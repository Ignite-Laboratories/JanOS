// Code generated by 'internal/generators/letter'; DO NOT EDIT.
//go:generate go run ./internal/generators/letter -pkg std -name XY -nameL xy -cmpts X,Y -cmptsL x,y -out xy.go
package std

import (
	"core/sys/name/format"
	"core/sys/num"
	"core/sys/num/bounded"
	"core/sys/support"
	"fmt"
)

// XY is a 2D vector of like-typed bounded.Number components.
//
// NOTE: If you'd like asymmetric types, please see XYTyped.
type XY[T num.Primitive] = XYTyped[T, T]

// XYTyped is a 2D vector of asymmetrically typed bounded.Number components.
//
// NOTE: If you'd like symmetric types, please see XY.
type XYTyped[TX num.Primitive, TY num.Primitive] struct {
	Entity
	X bounded.Number[TX]
	Y bounded.Number[TY]
}

func NewXY[T num.Primitive]() XY[T] {
	return XY[T](NewXYTyped[T, T]())
}

func NewXYTyped[TX num.Primitive, TY num.Primitive]() XYTyped[TX, TY] {
	minX := num.MinValue[TX]()
	maxX := num.MaxValue[TX]()
	minY := num.MinValue[TY]()
	maxY := num.MaxValue[TY]()

	c := XYTyped[TX, TY]{}
	c.Entity = NewEntity[format.Default]()
	c.SetBoundaries(minX, maxX, minY, maxY)
	return c
}

func (_v XYTyped[TX, TY]) String() string {
	if support.AllSameTypes(TX(0), TY(0)) {
		return fmt.Sprintf("xy[%T].{%v, %v}(%v)", TX(0), _v.X.ValueString(), _v.Y.ValueString(), _v.GivenName.Name)
	}
	return fmt.Sprintf("xy[%T, %T].{%v, %v}(%v)", TX(0), TY(0), _v.X.ValueString(), _v.Y.ValueString(), _v.GivenName.Name)
}

func (_v XYTyped[TX, TY]) Set(x TX, y TY) XYTyped[TX, TY] {
	_ = _v.X.Set(x)
	_ = _v.Y.Set(y)
	return _v
}

func (_v XYTyped[TX, TY]) SetClamp(clamp bool) XYTyped[TX, TY] {
	_v.X.Clamp = clamp
	_v.Y.Clamp = clamp
	return _v
}

func (_v XYTyped[TX, TY]) SetBoundaries(minX, maxX TX, minY, maxY TY) XYTyped[TX, TY] {
	_ = _v.X.SetBoundaries(minX, maxX)
	_ = _v.Y.SetBoundaries(minY, maxY)
	return _v
}

/**
Swizzling

	NOTE: This is a regular expression to find and replace swizzle functions into a one-liner if the auto formatter ever kicks in

	Find -
	func \((.*?)\) ([A-Z]{2,4})\(\) \((.*?)\)[ ]*\{[\n\t ]*return(.*?)[\n\t ]*\}

	Replace -
	func ($1) $2() ($3) { return$4 }
*/

func (_v XYTyped[TX, TY]) XX() (TX, TX) { return _v.X.Value(), _v.X.Value() }
func (_v XYTyped[TX, TY]) XY() (TX, TY) { return _v.X.Value(), _v.Y.Value() }
func (_v XYTyped[TX, TY]) YX() (TY, TX) { return _v.Y.Value(), _v.X.Value() }
func (_v XYTyped[TX, TY]) YY() (TY, TY) { return _v.Y.Value(), _v.Y.Value() }
