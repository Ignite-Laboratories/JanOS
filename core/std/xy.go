// Code generated by 'gen/letters/main'; DO NOT EDIT.
//go:generate go run ../gen/letters/main -pkg std -name XY -nameL xy -cmpts X,Y -cmptsL x,y -out ../std/xy.go
package std

import (
	"core/sys/atlas"
	"core/sys/name/format"
	"core/sys/num"
	"core/sys/num/bounded"
	"core/sys/support"
	"fmt"
	"strings"
)

// XY is a 2D vector of like-typed bounded.Numeric components.
//
// NOTE: If you'd like asymmetric types, please see XYTyped.
type XY[T num.Primitive] = XYTyped[T, T]

// XYTyped is a 2D vector of asymmetrically typed bounded.Numeric components.
//
// NOTE: If you'd like symmetric types, please see XY.
type XYTyped[TX num.Primitive, TY num.Primitive] struct {
	Entity
	X bounded.Numeric[TX]
	Y bounded.Numeric[TY]
}

func NewXY[T num.Primitive](x T, y T, name ...string) *XY[T] {
	typed := XY[T](*NewXYTyped[T, T](x, y, name...))
	return &typed
}

func NewXYTyped[TX num.Primitive, TY num.Primitive](x TX, y TY, name ...string) *XYTyped[TX, TY] {
	minX := num.MinValue[TX]()
	maxX := num.MaxValue[TX]()
	if num.IsFloat[TX]() {
		minX = 0
		maxX = 1
	}
	minY := num.MinValue[TY]()
	maxY := num.MaxValue[TY]()
	if num.IsFloat[TY]() {
		minY = 0
		maxY = 1
	}

	_v := &XYTyped[TX, TY]{}
	_v.Entity = NewEntity[format.Default]()
	_v.SetBoundaries(minX, maxX, minY, maxY)
	_v.Set(x, y)
	if len(name) > 0 {
		_v.SetName(name[0])
	}
	return _v
}

func (_v *XYTyped[TX, TY]) Name() string {
	return _v.GivenName.Name
}

func (_v *XYTyped[TX, TY]) SetName(name string) *XYTyped[TX, TY] {
	_v.GivenName.Name = name
	return _v
}

func (_v *XYTyped[TX, TY]) Set(x TX, y TY) *XYTyped[TX, TY] {
	_ = _v.X.Set(x)
	_ = _v.Y.Set(y)
	return _v
}

func (_v *XYTyped[TX, TY]) SetClamp(clamp bool) *XYTyped[TX, TY] {
	_v.X.Clamp = clamp
	_v.Y.Clamp = clamp
	return _v
}

func (_v *XYTyped[TX, TY]) SetBoundaries(minX, maxX TX, minY, maxY TY) *XYTyped[TX, TY] {
	_ = _v.X.SetBoundaries(minX, maxX)
	_ = _v.Y.SetBoundaries(minY, maxY)
	return _v
}

func (_v *XYTyped[TX, TY]) Component(index uint) (bounded.INumeric, error) {
	switch index {
	case 0:
		return &_v.X, nil
	case 1:
		return &_v.Y, nil
	default:
		return nil, fmt.Errorf("cannot get component index %d of an XY vector", index)
	}
}

func (_v *XYTyped[TX, TY]) Components() []bounded.INumeric {
	return []bounded.INumeric{&_v.X, &_v.Y}
}

func (_v *XYTyped[TX, TY]) ComponentByName(name string) (bounded.INumeric, error) {
	switch strings.ToLower(name) {
	case "x":
		return &_v.X, nil
	case "y":
		return &_v.Y, nil
	default:
		return nil, fmt.Errorf("cannot get component \"%s\" of an XY vector", name)
	}
}

func (_v *XYTyped[TX, TY]) ComponentLen() uint {
	return 2
}

func (_v *XYTyped[TX, TY]) SetComponent(index uint, value any) error {
	switch index {
	case 0:
		 _v.X.Set(value.(TX))
	case 1:
		 _v.Y.Set(value.(TY))
	default:
		return fmt.Errorf("cannot set component index %d of an XY vector", index)
	}
	return nil
}

func (_v *XYTyped[TX, TY]) SetComponents(values []any) error {
	if len(values) != 2 {
		return fmt.Errorf("cannot set %d components of 2D vector XY", len(values), )
	}
	if _, ok := values[0].(TX); !ok {
		return fmt.Errorf("expected type %T for component X, got type %T", TX(0), values[0])	}
	if _, ok := values[1].(TY); !ok {
		return fmt.Errorf("expected type %T for component Y, got type %T", TY(0), values[1])	}
	_v.X.Set(values[0].(TX))
	_v.Y.Set(values[1].(TY))
	return nil
}

func (_v *XYTyped[TX, TY]) SetComponentByName(name string, value any) error {
	switch strings.ToLower(name) {
	case "x":
		 _v.X.Set(value.(TX))
	case "y":
		 _v.Y.Set(value.(TY))
	default:
		return fmt.Errorf("cannot set component \"%s\" of an XY vector", name)
	}
	return nil
}

func (_v XYTyped[TX, TY]) String() string {
	if atlas.CompactVectors {
		return fmt.Sprintf("{x: %v, y: %v}", _v.X.String(), _v.Y.String())
	}
	 if support.AllSameTypes(TX(0), TY(0)) {
		return fmt.Sprintf("xy[%T]{%v, %v}(\"%v\")", TX(0), _v.X.String(), _v.Y.String(), _v.GivenName.Name)
	}
	return fmt.Sprintf("xy[%T, %T]{%v, %v}(\"%v\")", TX(0), TY(0), _v.X.String(), _v.Y.String(), _v.GivenName.Name)
}

func (_v *XYTyped[TX, TY]) XX() (TX, TX) { return _v.X.Value(), _v.X.Value() }
func (_v *XYTyped[TX, TY]) XY() (TX, TY) { return _v.X.Value(), _v.Y.Value() }
func (_v *XYTyped[TX, TY]) YX() (TY, TX) { return _v.Y.Value(), _v.X.Value() }
func (_v *XYTyped[TX, TY]) YY() (TY, TY) { return _v.Y.Value(), _v.Y.Value() }
func (_v *XYTyped[TX, TY]) XXX() (TX, TX, TX) { return _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYTyped[TX, TY]) XXY() (TX, TX, TY) { return _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYTyped[TX, TY]) XYX() (TX, TY, TX) { return _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYTyped[TX, TY]) XYY() (TX, TY, TY) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYTyped[TX, TY]) YXX() (TY, TX, TX) { return _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYTyped[TX, TY]) YXY() (TY, TX, TY) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYTyped[TX, TY]) YYX() (TY, TY, TX) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYTyped[TX, TY]) YYY() (TY, TY, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYTyped[TX, TY]) XXXX() (TX, TX, TX, TX) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYTyped[TX, TY]) XXXY() (TX, TX, TX, TY) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYTyped[TX, TY]) XXYX() (TX, TX, TY, TX) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYTyped[TX, TY]) XXYY() (TX, TX, TY, TY) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYTyped[TX, TY]) XYXX() (TX, TY, TX, TX) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYTyped[TX, TY]) XYXY() (TX, TY, TX, TY) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYTyped[TX, TY]) XYYX() (TX, TY, TY, TX) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYTyped[TX, TY]) XYYY() (TX, TY, TY, TY) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYTyped[TX, TY]) YXXX() (TY, TX, TX, TX) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYTyped[TX, TY]) YXXY() (TY, TX, TX, TY) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYTyped[TX, TY]) YXYX() (TY, TX, TY, TX) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYTyped[TX, TY]) YXYY() (TY, TX, TY, TY) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYTyped[TX, TY]) YYXX() (TY, TY, TX, TX) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYTyped[TX, TY]) YYXY() (TY, TY, TX, TY) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYTyped[TX, TY]) YYYX() (TY, TY, TY, TX) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYTyped[TX, TY]) YYYY() (TY, TY, TY, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
