// Code generated by 'gen/letters'; DO NOT EDIT.
//go:generate go run ../gen/letters -pkg std -name HSV -nameL hsv -cmpts H,S,V -cmptsL h,s,v -out ../std/hsv.go
package std

import (
	"core/sys/atlas"
	"core/sys/name/format"
	"core/sys/num"
	"core/sys/num/bounded"
	"core/sys/support"
	"fmt"
	"strings"
)

// HSV is a 3D vector of like-typed bounded.Numeric components.
//
// NOTE: If you'd like asymmetric types, please see HSVTyped.
type HSV[T num.Primitive] = HSVTyped[T, T, T]

// HSVTyped is a 3D vector of asymmetrically typed bounded.Numeric components.
//
// NOTE: If you'd like symmetric types, please see HSV.
type HSVTyped[TH num.Primitive, TS num.Primitive, TV num.Primitive] struct {
	Entity
	H bounded.Numeric[TH]
	S bounded.Numeric[TS]
	V bounded.Numeric[TV]
}

func NewHSV[T num.Primitive](h T, s T, v T) *HSV[T] {
	typed := HSV[T](*NewHSVTyped[T, T, T](h, s, v))
	return &typed
}

func NewHSVTyped[TH num.Primitive, TS num.Primitive, TV num.Primitive](h TH, s TS, v TV) *HSVTyped[TH, TS, TV] {
	minH := num.MinValue[TH]()
	maxH := num.MaxValue[TH]()
	minS := num.MinValue[TS]()
	maxS := num.MaxValue[TS]()
	minV := num.MinValue[TV]()
	maxV := num.MaxValue[TV]()

	_v := &HSVTyped[TH, TS, TV]{}
	_v.Entity = NewEntity[format.Default]()
	_v.SetBoundaries(minH, maxH, minS, maxS, minV, maxV)
	_v.Set(h, s, v)
	return _v
}

func (_v *HSVTyped[TH, TS, TV]) Name() string {
	return _v.GivenName.Name
}

func (_v *HSVTyped[TH, TS, TV]) SetName(name string) *HSVTyped[TH, TS, TV] {
	_v.GivenName.Name = name
	return _v
}

func (_v *HSVTyped[TH, TS, TV]) Set(h TH, s TS, v TV) *HSVTyped[TH, TS, TV] {
	_ = _v.H.Set(h)
	_ = _v.S.Set(s)
	_ = _v.V.Set(v)
	return _v
}

func (_v *HSVTyped[TH, TS, TV]) SetClamp(clamp bool) *HSVTyped[TH, TS, TV] {
	_v.H.Clamp = clamp
	_v.S.Clamp = clamp
	_v.V.Clamp = clamp
	return _v
}

func (_v *HSVTyped[TH, TS, TV]) SetBoundaries(minH, maxH TH, minS, maxS TS, minV, maxV TV) *HSVTyped[TH, TS, TV] {
	_ = _v.H.SetBoundaries(minH, maxH)
	_ = _v.S.SetBoundaries(minS, maxS)
	_ = _v.V.SetBoundaries(minV, maxV)
	return _v
}

func (_v *HSVTyped[TH, TS, TV]) Component(index uint) (bounded.INumeric, error) {
	switch index {
	case 0:
		return &_v.H, nil
	case 1:
		return &_v.S, nil
	case 2:
		return &_v.V, nil
	default:
		return nil, fmt.Errorf("cannot get component index %d of an HSV vector", index)
	}
}

func (_v *HSVTyped[TH, TS, TV]) Components() []bounded.INumeric {
	return []bounded.INumeric{&_v.H, &_v.S, &_v.V}
}

func (_v *HSVTyped[TH, TS, TV]) ComponentByName(name string) (bounded.INumeric, error) {
	switch strings.ToLower(name) {
	case "h":
		return &_v.H, nil
	case "s":
		return &_v.S, nil
	case "v":
		return &_v.V, nil
	default:
		return nil, fmt.Errorf("cannot get component \"%s\" of an HSV vector", name)
	}
}

func (_v *HSVTyped[TH, TS, TV]) ComponentLen() uint {
	return 3
}

func (_v *HSVTyped[TH, TS, TV]) SetComponent(index uint, value any) error {
	switch index {
	case 0:
		 _v.H.Set(value.(TH))
	case 1:
		 _v.S.Set(value.(TS))
	case 2:
		 _v.V.Set(value.(TV))
	default:
		return fmt.Errorf("cannot set component index %d of an HSV vector", index)
	}
	return nil
}

func (_v *HSVTyped[TH, TS, TV]) SetComponents(values []any) error {
	if len(values) != 3 {
		return fmt.Errorf("cannot set %d components of 3D vector HSV", len(values), )
	}
	if _, ok := values[0].(TH); !ok {
		return fmt.Errorf("expected type %T for component H, got type %T", TH(0), values[0])	}
	if _, ok := values[1].(TS); !ok {
		return fmt.Errorf("expected type %T for component S, got type %T", TS(0), values[1])	}
	if _, ok := values[2].(TV); !ok {
		return fmt.Errorf("expected type %T for component V, got type %T", TV(0), values[2])	}
	_v.H.Set(values[0].(TH))
	_v.S.Set(values[1].(TS))
	_v.V.Set(values[2].(TV))
	return nil
}

func (_v *HSVTyped[TH, TS, TV]) SetComponentByName(name string, value any) error {
	switch strings.ToLower(name) {
	case "h":
		 _v.H.Set(value.(TH))
	case "s":
		 _v.S.Set(value.(TS))
	case "v":
		 _v.V.Set(value.(TV))
	default:
		return fmt.Errorf("cannot set component \"%s\" of an HSV vector", name)
	}
	return nil
}

func (_v HSVTyped[TH, TS, TV]) String() string {
	if atlas.CompactVectors {
		return fmt.Sprintf("{h: %v, s: %v, v: %v}", _v.H.String(), _v.S.String(), _v.V.String())
	}
	 if support.AllSameTypes(TH(0), TS(0), TV(0)) {
		return fmt.Sprintf("hsv[%T]{%v, %v, %v}(\"%v\")", TH(0), _v.H.String(), _v.S.String(), _v.V.String(), _v.GivenName.Name)
	}
	return fmt.Sprintf("hsv[%T, %T, %T]{%v, %v, %v}(\"%v\")", TH(0), TS(0), TV(0), _v.H.String(), _v.S.String(), _v.V.String(), _v.GivenName.Name)
}

/**
Swizzling

	NOTE: This is a regular expression to find and replace swizzle functions into a one-liner if the auto formatter ever kicks in

	Find -
	func \*\((.*?)\) ([A-Z]{2,4})\(\) \((.*?)\)[ ]*\{[\n\t ]*return(.*?)[\n\t ]*\}

	Replace -
	func \*($1) $2() ($3) { return$4 }
*/

func (_v *HSVTyped[TH, TS, TV]) HH() (TH, TH) { return _v.H.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) HS() (TH, TS) { return _v.H.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) HV() (TH, TV) { return _v.H.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) SH() (TS, TH) { return _v.S.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) SS() (TS, TS) { return _v.S.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) SV() (TS, TV) { return _v.S.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) VH() (TV, TH) { return _v.V.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) VS() (TV, TS) { return _v.V.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) VV() (TV, TV) { return _v.V.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) HHH() (TH, TH, TH) { return _v.H.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) HHS() (TH, TH, TS) { return _v.H.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) HHV() (TH, TH, TV) { return _v.H.Value(), _v.H.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) HSH() (TH, TS, TH) { return _v.H.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) HSS() (TH, TS, TS) { return _v.H.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) HSV() (TH, TS, TV) { return _v.H.Value(), _v.S.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) HVH() (TH, TV, TH) { return _v.H.Value(), _v.V.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) HVS() (TH, TV, TS) { return _v.H.Value(), _v.V.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) HVV() (TH, TV, TV) { return _v.H.Value(), _v.V.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) SHH() (TS, TH, TH) { return _v.S.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) SHS() (TS, TH, TS) { return _v.S.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) SHV() (TS, TH, TV) { return _v.S.Value(), _v.H.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) SSH() (TS, TS, TH) { return _v.S.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) SSS() (TS, TS, TS) { return _v.S.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) SSV() (TS, TS, TV) { return _v.S.Value(), _v.S.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) SVH() (TS, TV, TH) { return _v.S.Value(), _v.V.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) SVS() (TS, TV, TS) { return _v.S.Value(), _v.V.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) SVV() (TS, TV, TV) { return _v.S.Value(), _v.V.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) VHH() (TV, TH, TH) { return _v.V.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) VHS() (TV, TH, TS) { return _v.V.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) VHV() (TV, TH, TV) { return _v.V.Value(), _v.H.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) VSH() (TV, TS, TH) { return _v.V.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) VSS() (TV, TS, TS) { return _v.V.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) VSV() (TV, TS, TV) { return _v.V.Value(), _v.S.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) VVH() (TV, TV, TH) { return _v.V.Value(), _v.V.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) VVS() (TV, TV, TS) { return _v.V.Value(), _v.V.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) VVV() (TV, TV, TV) { return _v.V.Value(), _v.V.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) HHHH() (TH, TH, TH, TH) { return _v.H.Value(), _v.H.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) HHHS() (TH, TH, TH, TS) { return _v.H.Value(), _v.H.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) HHHV() (TH, TH, TH, TV) { return _v.H.Value(), _v.H.Value(), _v.H.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) HHSH() (TH, TH, TS, TH) { return _v.H.Value(), _v.H.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) HHSS() (TH, TH, TS, TS) { return _v.H.Value(), _v.H.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) HHSV() (TH, TH, TS, TV) { return _v.H.Value(), _v.H.Value(), _v.S.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) HHVH() (TH, TH, TV, TH) { return _v.H.Value(), _v.H.Value(), _v.V.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) HHVS() (TH, TH, TV, TS) { return _v.H.Value(), _v.H.Value(), _v.V.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) HHVV() (TH, TH, TV, TV) { return _v.H.Value(), _v.H.Value(), _v.V.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) HSHH() (TH, TS, TH, TH) { return _v.H.Value(), _v.S.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) HSHS() (TH, TS, TH, TS) { return _v.H.Value(), _v.S.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) HSHV() (TH, TS, TH, TV) { return _v.H.Value(), _v.S.Value(), _v.H.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) HSSH() (TH, TS, TS, TH) { return _v.H.Value(), _v.S.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) HSSS() (TH, TS, TS, TS) { return _v.H.Value(), _v.S.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) HSSV() (TH, TS, TS, TV) { return _v.H.Value(), _v.S.Value(), _v.S.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) HSVH() (TH, TS, TV, TH) { return _v.H.Value(), _v.S.Value(), _v.V.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) HSVS() (TH, TS, TV, TS) { return _v.H.Value(), _v.S.Value(), _v.V.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) HSVV() (TH, TS, TV, TV) { return _v.H.Value(), _v.S.Value(), _v.V.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) HVHH() (TH, TV, TH, TH) { return _v.H.Value(), _v.V.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) HVHS() (TH, TV, TH, TS) { return _v.H.Value(), _v.V.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) HVHV() (TH, TV, TH, TV) { return _v.H.Value(), _v.V.Value(), _v.H.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) HVSH() (TH, TV, TS, TH) { return _v.H.Value(), _v.V.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) HVSS() (TH, TV, TS, TS) { return _v.H.Value(), _v.V.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) HVSV() (TH, TV, TS, TV) { return _v.H.Value(), _v.V.Value(), _v.S.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) HVVH() (TH, TV, TV, TH) { return _v.H.Value(), _v.V.Value(), _v.V.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) HVVS() (TH, TV, TV, TS) { return _v.H.Value(), _v.V.Value(), _v.V.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) HVVV() (TH, TV, TV, TV) { return _v.H.Value(), _v.V.Value(), _v.V.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) SHHH() (TS, TH, TH, TH) { return _v.S.Value(), _v.H.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) SHHS() (TS, TH, TH, TS) { return _v.S.Value(), _v.H.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) SHHV() (TS, TH, TH, TV) { return _v.S.Value(), _v.H.Value(), _v.H.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) SHSH() (TS, TH, TS, TH) { return _v.S.Value(), _v.H.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) SHSS() (TS, TH, TS, TS) { return _v.S.Value(), _v.H.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) SHSV() (TS, TH, TS, TV) { return _v.S.Value(), _v.H.Value(), _v.S.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) SHVH() (TS, TH, TV, TH) { return _v.S.Value(), _v.H.Value(), _v.V.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) SHVS() (TS, TH, TV, TS) { return _v.S.Value(), _v.H.Value(), _v.V.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) SHVV() (TS, TH, TV, TV) { return _v.S.Value(), _v.H.Value(), _v.V.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) SSHH() (TS, TS, TH, TH) { return _v.S.Value(), _v.S.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) SSHS() (TS, TS, TH, TS) { return _v.S.Value(), _v.S.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) SSHV() (TS, TS, TH, TV) { return _v.S.Value(), _v.S.Value(), _v.H.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) SSSH() (TS, TS, TS, TH) { return _v.S.Value(), _v.S.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) SSSS() (TS, TS, TS, TS) { return _v.S.Value(), _v.S.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) SSSV() (TS, TS, TS, TV) { return _v.S.Value(), _v.S.Value(), _v.S.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) SSVH() (TS, TS, TV, TH) { return _v.S.Value(), _v.S.Value(), _v.V.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) SSVS() (TS, TS, TV, TS) { return _v.S.Value(), _v.S.Value(), _v.V.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) SSVV() (TS, TS, TV, TV) { return _v.S.Value(), _v.S.Value(), _v.V.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) SVHH() (TS, TV, TH, TH) { return _v.S.Value(), _v.V.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) SVHS() (TS, TV, TH, TS) { return _v.S.Value(), _v.V.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) SVHV() (TS, TV, TH, TV) { return _v.S.Value(), _v.V.Value(), _v.H.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) SVSH() (TS, TV, TS, TH) { return _v.S.Value(), _v.V.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) SVSS() (TS, TV, TS, TS) { return _v.S.Value(), _v.V.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) SVSV() (TS, TV, TS, TV) { return _v.S.Value(), _v.V.Value(), _v.S.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) SVVH() (TS, TV, TV, TH) { return _v.S.Value(), _v.V.Value(), _v.V.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) SVVS() (TS, TV, TV, TS) { return _v.S.Value(), _v.V.Value(), _v.V.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) SVVV() (TS, TV, TV, TV) { return _v.S.Value(), _v.V.Value(), _v.V.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) VHHH() (TV, TH, TH, TH) { return _v.V.Value(), _v.H.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) VHHS() (TV, TH, TH, TS) { return _v.V.Value(), _v.H.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) VHHV() (TV, TH, TH, TV) { return _v.V.Value(), _v.H.Value(), _v.H.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) VHSH() (TV, TH, TS, TH) { return _v.V.Value(), _v.H.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) VHSS() (TV, TH, TS, TS) { return _v.V.Value(), _v.H.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) VHSV() (TV, TH, TS, TV) { return _v.V.Value(), _v.H.Value(), _v.S.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) VHVH() (TV, TH, TV, TH) { return _v.V.Value(), _v.H.Value(), _v.V.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) VHVS() (TV, TH, TV, TS) { return _v.V.Value(), _v.H.Value(), _v.V.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) VHVV() (TV, TH, TV, TV) { return _v.V.Value(), _v.H.Value(), _v.V.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) VSHH() (TV, TS, TH, TH) { return _v.V.Value(), _v.S.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) VSHS() (TV, TS, TH, TS) { return _v.V.Value(), _v.S.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) VSHV() (TV, TS, TH, TV) { return _v.V.Value(), _v.S.Value(), _v.H.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) VSSH() (TV, TS, TS, TH) { return _v.V.Value(), _v.S.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) VSSS() (TV, TS, TS, TS) { return _v.V.Value(), _v.S.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) VSSV() (TV, TS, TS, TV) { return _v.V.Value(), _v.S.Value(), _v.S.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) VSVH() (TV, TS, TV, TH) { return _v.V.Value(), _v.S.Value(), _v.V.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) VSVS() (TV, TS, TV, TS) { return _v.V.Value(), _v.S.Value(), _v.V.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) VSVV() (TV, TS, TV, TV) { return _v.V.Value(), _v.S.Value(), _v.V.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) VVHH() (TV, TV, TH, TH) { return _v.V.Value(), _v.V.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) VVHS() (TV, TV, TH, TS) { return _v.V.Value(), _v.V.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) VVHV() (TV, TV, TH, TV) { return _v.V.Value(), _v.V.Value(), _v.H.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) VVSH() (TV, TV, TS, TH) { return _v.V.Value(), _v.V.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) VVSS() (TV, TV, TS, TS) { return _v.V.Value(), _v.V.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) VVSV() (TV, TV, TS, TV) { return _v.V.Value(), _v.V.Value(), _v.S.Value(), _v.V.Value() }
func (_v *HSVTyped[TH, TS, TV]) VVVH() (TV, TV, TV, TH) { return _v.V.Value(), _v.V.Value(), _v.V.Value(), _v.H.Value() }
func (_v *HSVTyped[TH, TS, TV]) VVVS() (TV, TV, TV, TS) { return _v.V.Value(), _v.V.Value(), _v.V.Value(), _v.S.Value() }
func (_v *HSVTyped[TH, TS, TV]) VVVV() (TV, TV, TV, TV) { return _v.V.Value(), _v.V.Value(), _v.V.Value(), _v.V.Value() }
