// Code generated by 'internal/generators/letter'; DO NOT EDIT.
//go:generate go run ./internal/generators/letter -pkg std -name HSV -nameL hsv -cmpts H,S,V -cmptsL h,s,v -out ../hsv.go
package std

import (
	"core/sys/name/format"
	"core/sys/num"
	"core/sys/num/bounded"
	"core/sys/support"
	"fmt"
)

// HSV is a 3D vector of like-typed bounded.Number components.
//
// NOTE: If you'd like asymmetric types, please see HSVTyped.
type HSV[T num.Primitive] = HSVTyped[T, T, T]

// HSVTyped is a 3D vector of asymmetrically typed bounded.Number components.
//
// NOTE: If you'd like symmetric types, please see HSV.
type HSVTyped[TH num.Primitive, TS num.Primitive, TV num.Primitive] struct {
	Entity
	H bounded.Number[TH]
	S bounded.Number[TS]
	V bounded.Number[TV]
}

func NewHSV[T num.Primitive]() HSV[T] {
	return HSV[T](NewHSVTyped[T, T, T]())
}

func NewHSVTyped[TH num.Primitive, TS num.Primitive, TV num.Primitive]() HSVTyped[TH, TS, TV] {
	minH := num.MinValue[TH]()
	maxH := num.MaxValue[TH]()
	minS := num.MinValue[TS]()
	maxS := num.MaxValue[TS]()
	minV := num.MinValue[TV]()
	maxV := num.MaxValue[TV]()

	c := HSVTyped[TH, TS, TV]{}
	c.Entity = NewEntity[format.Default]()
	c.SetBoundaries(minH, maxH, minS, maxS, minV, maxV)
	return c
}

func (_v HSVTyped[TH, TS, TV]) String() string {
	if support.AllSameTypes(TH(0), TS(0), TV(0)) {
		return fmt.Sprintf("hsv[%T].{%v, %v, %v}(%v)", TH(0), _v.H.ValueString(), _v.S.ValueString(), _v.V.ValueString(), _v.GivenName.Name)
	}
	return fmt.Sprintf("hsv[%T, %T, %T].{%v, %v, %v}(%v)", TH(0), TS(0), TV(0), _v.H.ValueString(), _v.S.ValueString(), _v.V.ValueString(), _v.GivenName.Name)
}

func (_v HSVTyped[TH, TS, TV]) Set(h TH, s TS, v TV) HSVTyped[TH, TS, TV] {
	_ = _v.H.Set(h)
	_ = _v.S.Set(s)
	_ = _v.V.Set(v)
	return _v
}

func (_v HSVTyped[TH, TS, TV]) SetClamp(clamp bool) HSVTyped[TH, TS, TV] {
	_v.H.Clamp = clamp
	_v.S.Clamp = clamp
	_v.V.Clamp = clamp
	return _v
}

func (_v HSVTyped[TH, TS, TV]) SetBoundaries(minH, maxH TH, minS, maxS TS, minV, maxV TV) HSVTyped[TH, TS, TV] {
	_ = _v.H.SetBoundaries(minH, maxH)
	_ = _v.S.SetBoundaries(minS, maxS)
	_ = _v.V.SetBoundaries(minV, maxV)
	return _v
}

/**
Swizzling

	NOTE: This is a regular expression to find and replace swizzle functions into a one-liner if the auto formatter ever kicks in

	Find -
	func \((.*?)\) ([A-Z]{2,4})\(\) \((.*?)\)[ ]*\{[\n\t ]*return(.*?)[\n\t ]*\}

	Replace -
	func ($1) $2() ($3) { return$4 }
*/

func (_v HSVTyped[TH, TS, TV]) HH() (TH, TH) { return _v.H.Value(), _v.H.Value() }
func (_v HSVTyped[TH, TS, TV]) HS() (TH, TS) { return _v.H.Value(), _v.S.Value() }
func (_v HSVTyped[TH, TS, TV]) HV() (TH, TV) { return _v.H.Value(), _v.V.Value() }
func (_v HSVTyped[TH, TS, TV]) SH() (TS, TH) { return _v.S.Value(), _v.H.Value() }
func (_v HSVTyped[TH, TS, TV]) SS() (TS, TS) { return _v.S.Value(), _v.S.Value() }
func (_v HSVTyped[TH, TS, TV]) SV() (TS, TV) { return _v.S.Value(), _v.V.Value() }
func (_v HSVTyped[TH, TS, TV]) VH() (TV, TH) { return _v.V.Value(), _v.H.Value() }
func (_v HSVTyped[TH, TS, TV]) VS() (TV, TS) { return _v.V.Value(), _v.S.Value() }
func (_v HSVTyped[TH, TS, TV]) VV() (TV, TV) { return _v.V.Value(), _v.V.Value() }
func (_v HSVTyped[TH, TS, TV]) HHH() (TH, TH, TH) { return _v.H.Value(), _v.H.Value(), _v.H.Value() }
func (_v HSVTyped[TH, TS, TV]) HHS() (TH, TH, TS) { return _v.H.Value(), _v.H.Value(), _v.S.Value() }
func (_v HSVTyped[TH, TS, TV]) HHV() (TH, TH, TV) { return _v.H.Value(), _v.H.Value(), _v.V.Value() }
func (_v HSVTyped[TH, TS, TV]) HSH() (TH, TS, TH) { return _v.H.Value(), _v.S.Value(), _v.H.Value() }
func (_v HSVTyped[TH, TS, TV]) HSS() (TH, TS, TS) { return _v.H.Value(), _v.S.Value(), _v.S.Value() }
func (_v HSVTyped[TH, TS, TV]) HSV() (TH, TS, TV) { return _v.H.Value(), _v.S.Value(), _v.V.Value() }
func (_v HSVTyped[TH, TS, TV]) HVH() (TH, TV, TH) { return _v.H.Value(), _v.V.Value(), _v.H.Value() }
func (_v HSVTyped[TH, TS, TV]) HVS() (TH, TV, TS) { return _v.H.Value(), _v.V.Value(), _v.S.Value() }
func (_v HSVTyped[TH, TS, TV]) HVV() (TH, TV, TV) { return _v.H.Value(), _v.V.Value(), _v.V.Value() }
func (_v HSVTyped[TH, TS, TV]) SHH() (TS, TH, TH) { return _v.S.Value(), _v.H.Value(), _v.H.Value() }
func (_v HSVTyped[TH, TS, TV]) SHS() (TS, TH, TS) { return _v.S.Value(), _v.H.Value(), _v.S.Value() }
func (_v HSVTyped[TH, TS, TV]) SHV() (TS, TH, TV) { return _v.S.Value(), _v.H.Value(), _v.V.Value() }
func (_v HSVTyped[TH, TS, TV]) SSH() (TS, TS, TH) { return _v.S.Value(), _v.S.Value(), _v.H.Value() }
func (_v HSVTyped[TH, TS, TV]) SSS() (TS, TS, TS) { return _v.S.Value(), _v.S.Value(), _v.S.Value() }
func (_v HSVTyped[TH, TS, TV]) SSV() (TS, TS, TV) { return _v.S.Value(), _v.S.Value(), _v.V.Value() }
func (_v HSVTyped[TH, TS, TV]) SVH() (TS, TV, TH) { return _v.S.Value(), _v.V.Value(), _v.H.Value() }
func (_v HSVTyped[TH, TS, TV]) SVS() (TS, TV, TS) { return _v.S.Value(), _v.V.Value(), _v.S.Value() }
func (_v HSVTyped[TH, TS, TV]) SVV() (TS, TV, TV) { return _v.S.Value(), _v.V.Value(), _v.V.Value() }
func (_v HSVTyped[TH, TS, TV]) VHH() (TV, TH, TH) { return _v.V.Value(), _v.H.Value(), _v.H.Value() }
func (_v HSVTyped[TH, TS, TV]) VHS() (TV, TH, TS) { return _v.V.Value(), _v.H.Value(), _v.S.Value() }
func (_v HSVTyped[TH, TS, TV]) VHV() (TV, TH, TV) { return _v.V.Value(), _v.H.Value(), _v.V.Value() }
func (_v HSVTyped[TH, TS, TV]) VSH() (TV, TS, TH) { return _v.V.Value(), _v.S.Value(), _v.H.Value() }
func (_v HSVTyped[TH, TS, TV]) VSS() (TV, TS, TS) { return _v.V.Value(), _v.S.Value(), _v.S.Value() }
func (_v HSVTyped[TH, TS, TV]) VSV() (TV, TS, TV) { return _v.V.Value(), _v.S.Value(), _v.V.Value() }
func (_v HSVTyped[TH, TS, TV]) VVH() (TV, TV, TH) { return _v.V.Value(), _v.V.Value(), _v.H.Value() }
func (_v HSVTyped[TH, TS, TV]) VVS() (TV, TV, TS) { return _v.V.Value(), _v.V.Value(), _v.S.Value() }
func (_v HSVTyped[TH, TS, TV]) VVV() (TV, TV, TV) { return _v.V.Value(), _v.V.Value(), _v.V.Value() }
