// Code generated by 'internal/generators/letter'; DO NOT EDIT.
//go:generate go run ./internal/generators/letter -pkg std -name YCbCr -nameL yCbCr -cmpts Y,Cb,Cr -cmptsL y,cb,cr -out ../yCbCr.go
package std

import (
	"core/sys/name/format"
	"core/sys/num"
	"core/sys/num/bounded"
	"core/sys/support"
	"fmt"
)

// YCbCr is a 3D vector of like-typed bounded.Number components.
//
// NOTE: If you'd like asymmetric types, please see YCbCrTyped.
type YCbCr[T num.Primitive] = YCbCrTyped[T, T, T]

// YCbCrTyped is a 3D vector of asymmetrically typed bounded.Number components.
//
// NOTE: If you'd like symmetric types, please see YCbCr.
type YCbCrTyped[TY num.Primitive, TCb num.Primitive, TCr num.Primitive] struct {
	Entity
	Y bounded.Number[TY]
	Cb bounded.Number[TCb]
	Cr bounded.Number[TCr]
}

func NewYCbCr[T num.Primitive]() YCbCr[T] {
	return YCbCr[T](NewYCbCrTyped[T, T, T]())
}

func NewYCbCrTyped[TY num.Primitive, TCb num.Primitive, TCr num.Primitive]() YCbCrTyped[TY, TCb, TCr] {
	minY := num.MinValue[TY]()
	maxY := num.MaxValue[TY]()
	minCb := num.MinValue[TCb]()
	maxCb := num.MaxValue[TCb]()
	minCr := num.MinValue[TCr]()
	maxCr := num.MaxValue[TCr]()

	c := YCbCrTyped[TY, TCb, TCr]{}
	c.Entity = NewEntity[format.Default]()
	c.SetBoundaries(minY, maxY, minCb, maxCb, minCr, maxCr)
	return c
}

func (_v YCbCrTyped[TY, TCb, TCr]) String() string {
	if support.AllSameTypes(TY(0), TCb(0), TCr(0)) {
		return fmt.Sprintf("yCbCr[%T].{%v, %v, %v}(%v)", TY(0), _v.Y.ValueString(), _v.Cb.ValueString(), _v.Cr.ValueString(), _v.GivenName.Name)
	}
	return fmt.Sprintf("yCbCr[%T, %T, %T].{%v, %v, %v}(%v)", TY(0), TCb(0), TCr(0), _v.Y.ValueString(), _v.Cb.ValueString(), _v.Cr.ValueString(), _v.GivenName.Name)
}

func (_v YCbCrTyped[TY, TCb, TCr]) Set(y TY, cb TCb, cr TCr) YCbCrTyped[TY, TCb, TCr] {
	_ = _v.Y.Set(y)
	_ = _v.Cb.Set(cb)
	_ = _v.Cr.Set(cr)
	return _v
}

func (_v YCbCrTyped[TY, TCb, TCr]) SetClamp(clamp bool) YCbCrTyped[TY, TCb, TCr] {
	_v.Y.Clamp = clamp
	_v.Cb.Clamp = clamp
	_v.Cr.Clamp = clamp
	return _v
}

func (_v YCbCrTyped[TY, TCb, TCr]) SetBoundaries(minY, maxY TY, minCb, maxCb TCb, minCr, maxCr TCr) YCbCrTyped[TY, TCb, TCr] {
	_ = _v.Y.SetBoundaries(minY, maxY)
	_ = _v.Cb.SetBoundaries(minCb, maxCb)
	_ = _v.Cr.SetBoundaries(minCr, maxCr)
	return _v
}

