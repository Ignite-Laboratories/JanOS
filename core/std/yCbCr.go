// Code generated by 'gen/letters/main'; DO NOT EDIT.
//go:generate go run ../gen/letters/main -pkg std -name YCbCr -nameL yCbCr -cmpts Y,Cb,Cr -cmptsL y,Cb,Cr -out ../std/yCbCr.go
package std

import (
	"core/sys/atlas"
	"core/sys/name/format"
	"core/sys/num"
	"core/sys/num/bounded"
	"core/sys/support"
	"fmt"
	"strings"
)

// YCbCr is a 3D vector of like-typed bounded.Numeric components.
//
// NOTE: If you'd like asymmetric types, please see YCbCrTyped.
type YCbCr[T num.Primitive] = YCbCrTyped[T, T, T]

// YCbCrTyped is a 3D vector of asymmetrically typed bounded.Numeric components.
//
// NOTE: If you'd like symmetric types, please see YCbCr.
type YCbCrTyped[TY num.Primitive, TCb num.Primitive, TCr num.Primitive] struct {
	Entity
	Y bounded.Numeric[TY]
	Cb bounded.Numeric[TCb]
	Cr bounded.Numeric[TCr]
}

func NewYCbCr[T num.Primitive](y T, Cb T, Cr T, name ...string) *YCbCr[T] {
	typed := YCbCr[T](*NewYCbCrTyped[T, T, T](y, Cb, Cr, name...))
	return &typed
}

func NewYCbCrTyped[TY num.Primitive, TCb num.Primitive, TCr num.Primitive](y TY, Cb TCb, Cr TCr, name ...string) *YCbCrTyped[TY, TCb, TCr] {
	minY := num.MinValue[TY]()
	maxY := num.MaxValue[TY]()
	if num.IsFloat[TY]() {
		minY = 0
		maxY = 1
	}
	minCb := num.MinValue[TCb]()
	maxCb := num.MaxValue[TCb]()
	if num.IsFloat[TCb]() {
		minCb = 0
		maxCb = 1
	}
	minCr := num.MinValue[TCr]()
	maxCr := num.MaxValue[TCr]()
	if num.IsFloat[TCr]() {
		minCr = 0
		maxCr = 1
	}

	_v := &YCbCrTyped[TY, TCb, TCr]{}
	_v.Entity = NewEntity[format.Default]()
	_v.SetBoundaries(minY, maxY, minCb, maxCb, minCr, maxCr)
	_v.Set(y, Cb, Cr)
	if len(name) > 0 {
		_v.SetName(name[0])
	}
	return _v
}

func (_v *YCbCrTyped[TY, TCb, TCr]) Name() string {
	return _v.GivenName.Name
}

func (_v *YCbCrTyped[TY, TCb, TCr]) SetName(name string) *YCbCrTyped[TY, TCb, TCr] {
	_v.GivenName.Name = name
	return _v
}

func (_v *YCbCrTyped[TY, TCb, TCr]) Set(y TY, Cb TCb, Cr TCr) *YCbCrTyped[TY, TCb, TCr] {
	_ = _v.Y.Set(y)
	_ = _v.Cb.Set(Cb)
	_ = _v.Cr.Set(Cr)
	return _v
}

func (_v *YCbCrTyped[TY, TCb, TCr]) SetClamp(clamp bool) *YCbCrTyped[TY, TCb, TCr] {
	_v.Y.Clamp = clamp
	_v.Cb.Clamp = clamp
	_v.Cr.Clamp = clamp
	return _v
}

func (_v *YCbCrTyped[TY, TCb, TCr]) SetBoundaries(minY, maxY TY, minCb, maxCb TCb, minCr, maxCr TCr) *YCbCrTyped[TY, TCb, TCr] {
	_ = _v.Y.SetBoundaries(minY, maxY)
	_ = _v.Cb.SetBoundaries(minCb, maxCb)
	_ = _v.Cr.SetBoundaries(minCr, maxCr)
	return _v
}

func (_v *YCbCrTyped[TY, TCb, TCr]) Component(index uint) (bounded.INumeric, error) {
	switch index {
	case 0:
		return &_v.Y, nil
	case 1:
		return &_v.Cb, nil
	case 2:
		return &_v.Cr, nil
	default:
		return nil, fmt.Errorf("cannot get component index %d of an YCbCr vector", index)
	}
}

func (_v *YCbCrTyped[TY, TCb, TCr]) Components() []bounded.INumeric {
	return []bounded.INumeric{&_v.Y, &_v.Cb, &_v.Cr}
}

func (_v *YCbCrTyped[TY, TCb, TCr]) ComponentByName(name string) (bounded.INumeric, error) {
	switch strings.ToLower(name) {
	case "y":
		return &_v.Y, nil
	case "cb":
		return &_v.Cb, nil
	case "cr":
		return &_v.Cr, nil
	default:
		return nil, fmt.Errorf("cannot get component \"%s\" of an YCbCr vector", name)
	}
}

func (_v *YCbCrTyped[TY, TCb, TCr]) ComponentLen() uint {
	return 3
}

func (_v *YCbCrTyped[TY, TCb, TCr]) SetComponent(index uint, value any) error {
	switch index {
	case 0:
		 _v.Y.Set(value.(TY))
	case 1:
		 _v.Cb.Set(value.(TCb))
	case 2:
		 _v.Cr.Set(value.(TCr))
	default:
		return fmt.Errorf("cannot set component index %d of an YCbCr vector", index)
	}
	return nil
}

func (_v *YCbCrTyped[TY, TCb, TCr]) SetComponents(values []any) error {
	if len(values) != 3 {
		return fmt.Errorf("cannot set %d components of 3D vector YCbCr", len(values), )
	}
	if _, ok := values[0].(TY); !ok {
		return fmt.Errorf("expected type %T for component Y, got type %T", TY(0), values[0])	}
	if _, ok := values[1].(TCb); !ok {
		return fmt.Errorf("expected type %T for component Cb, got type %T", TCb(0), values[1])	}
	if _, ok := values[2].(TCr); !ok {
		return fmt.Errorf("expected type %T for component Cr, got type %T", TCr(0), values[2])	}
	_v.Y.Set(values[0].(TY))
	_v.Cb.Set(values[1].(TCb))
	_v.Cr.Set(values[2].(TCr))
	return nil
}

func (_v *YCbCrTyped[TY, TCb, TCr]) SetComponentByName(name string, value any) error {
	switch strings.ToLower(name) {
	case "y":
		 _v.Y.Set(value.(TY))
	case "cb":
		 _v.Cb.Set(value.(TCb))
	case "cr":
		 _v.Cr.Set(value.(TCr))
	default:
		return fmt.Errorf("cannot set component \"%s\" of an YCbCr vector", name)
	}
	return nil
}

func (_v YCbCrTyped[TY, TCb, TCr]) String() string {
	if atlas.CompactVectors {
		return fmt.Sprintf("{y: %v, Cb: %v, Cr: %v}", _v.Y.String(), _v.Cb.String(), _v.Cr.String())
	}
	 if support.AllSameTypes(TY(0), TCb(0), TCr(0)) {
		return fmt.Sprintf("yCbCr[%T]{%v, %v, %v}(\"%v\")", TY(0), _v.Y.String(), _v.Cb.String(), _v.Cr.String(), _v.GivenName.Name)
	}
	return fmt.Sprintf("yCbCr[%T, %T, %T]{%v, %v, %v}(\"%v\")", TY(0), TCb(0), TCr(0), _v.Y.String(), _v.Cb.String(), _v.Cr.String(), _v.GivenName.Name)
}

func (_v *YCbCrTyped[TY, TCb, TCr]) YY() (TY, TY) { return _v.Y.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCb() (TY, TCb) { return _v.Y.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCr() (TY, TCr) { return _v.Y.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbY() (TCb, TY) { return _v.Cb.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCb() (TCb, TCb) { return _v.Cb.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCr() (TCb, TCr) { return _v.Cb.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrY() (TCr, TY) { return _v.Cr.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCb() (TCr, TCb) { return _v.Cr.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCr() (TCr, TCr) { return _v.Cr.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YYY() (TY, TY, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YYCb() (TY, TY, TCb) { return _v.Y.Value(), _v.Y.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YYCr() (TY, TY, TCr) { return _v.Y.Value(), _v.Y.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCbY() (TY, TCb, TY) { return _v.Y.Value(), _v.Cb.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCbCb() (TY, TCb, TCb) { return _v.Y.Value(), _v.Cb.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCbCr() (TY, TCb, TCr) { return _v.Y.Value(), _v.Cb.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCrY() (TY, TCr, TY) { return _v.Y.Value(), _v.Cr.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCrCb() (TY, TCr, TCb) { return _v.Y.Value(), _v.Cr.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCrCr() (TY, TCr, TCr) { return _v.Y.Value(), _v.Cr.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbYY() (TCb, TY, TY) { return _v.Cb.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbYCb() (TCb, TY, TCb) { return _v.Cb.Value(), _v.Y.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbYCr() (TCb, TY, TCr) { return _v.Cb.Value(), _v.Y.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCbY() (TCb, TCb, TY) { return _v.Cb.Value(), _v.Cb.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCbCb() (TCb, TCb, TCb) { return _v.Cb.Value(), _v.Cb.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCbCr() (TCb, TCb, TCr) { return _v.Cb.Value(), _v.Cb.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCrY() (TCb, TCr, TY) { return _v.Cb.Value(), _v.Cr.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCrCb() (TCb, TCr, TCb) { return _v.Cb.Value(), _v.Cr.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCrCr() (TCb, TCr, TCr) { return _v.Cb.Value(), _v.Cr.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrYY() (TCr, TY, TY) { return _v.Cr.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrYCb() (TCr, TY, TCb) { return _v.Cr.Value(), _v.Y.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrYCr() (TCr, TY, TCr) { return _v.Cr.Value(), _v.Y.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCbY() (TCr, TCb, TY) { return _v.Cr.Value(), _v.Cb.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCbCb() (TCr, TCb, TCb) { return _v.Cr.Value(), _v.Cb.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCbCr() (TCr, TCb, TCr) { return _v.Cr.Value(), _v.Cb.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCrY() (TCr, TCr, TY) { return _v.Cr.Value(), _v.Cr.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCrCb() (TCr, TCr, TCb) { return _v.Cr.Value(), _v.Cr.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCrCr() (TCr, TCr, TCr) { return _v.Cr.Value(), _v.Cr.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YYYY() (TY, TY, TY, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YYYCb() (TY, TY, TY, TCb) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YYYCr() (TY, TY, TY, TCr) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YYCbY() (TY, TY, TCb, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Cb.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YYCbCb() (TY, TY, TCb, TCb) { return _v.Y.Value(), _v.Y.Value(), _v.Cb.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YYCbCr() (TY, TY, TCb, TCr) { return _v.Y.Value(), _v.Y.Value(), _v.Cb.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YYCrY() (TY, TY, TCr, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Cr.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YYCrCb() (TY, TY, TCr, TCb) { return _v.Y.Value(), _v.Y.Value(), _v.Cr.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YYCrCr() (TY, TY, TCr, TCr) { return _v.Y.Value(), _v.Y.Value(), _v.Cr.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCbYY() (TY, TCb, TY, TY) { return _v.Y.Value(), _v.Cb.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCbYCb() (TY, TCb, TY, TCb) { return _v.Y.Value(), _v.Cb.Value(), _v.Y.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCbYCr() (TY, TCb, TY, TCr) { return _v.Y.Value(), _v.Cb.Value(), _v.Y.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCbCbY() (TY, TCb, TCb, TY) { return _v.Y.Value(), _v.Cb.Value(), _v.Cb.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCbCbCb() (TY, TCb, TCb, TCb) { return _v.Y.Value(), _v.Cb.Value(), _v.Cb.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCbCbCr() (TY, TCb, TCb, TCr) { return _v.Y.Value(), _v.Cb.Value(), _v.Cb.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCbCrY() (TY, TCb, TCr, TY) { return _v.Y.Value(), _v.Cb.Value(), _v.Cr.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCbCrCb() (TY, TCb, TCr, TCb) { return _v.Y.Value(), _v.Cb.Value(), _v.Cr.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCbCrCr() (TY, TCb, TCr, TCr) { return _v.Y.Value(), _v.Cb.Value(), _v.Cr.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCrYY() (TY, TCr, TY, TY) { return _v.Y.Value(), _v.Cr.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCrYCb() (TY, TCr, TY, TCb) { return _v.Y.Value(), _v.Cr.Value(), _v.Y.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCrYCr() (TY, TCr, TY, TCr) { return _v.Y.Value(), _v.Cr.Value(), _v.Y.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCrCbY() (TY, TCr, TCb, TY) { return _v.Y.Value(), _v.Cr.Value(), _v.Cb.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCrCbCb() (TY, TCr, TCb, TCb) { return _v.Y.Value(), _v.Cr.Value(), _v.Cb.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCrCbCr() (TY, TCr, TCb, TCr) { return _v.Y.Value(), _v.Cr.Value(), _v.Cb.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCrCrY() (TY, TCr, TCr, TY) { return _v.Y.Value(), _v.Cr.Value(), _v.Cr.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCrCrCb() (TY, TCr, TCr, TCb) { return _v.Y.Value(), _v.Cr.Value(), _v.Cr.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) YCrCrCr() (TY, TCr, TCr, TCr) { return _v.Y.Value(), _v.Cr.Value(), _v.Cr.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbYYY() (TCb, TY, TY, TY) { return _v.Cb.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbYYCb() (TCb, TY, TY, TCb) { return _v.Cb.Value(), _v.Y.Value(), _v.Y.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbYYCr() (TCb, TY, TY, TCr) { return _v.Cb.Value(), _v.Y.Value(), _v.Y.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbYCbY() (TCb, TY, TCb, TY) { return _v.Cb.Value(), _v.Y.Value(), _v.Cb.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbYCbCb() (TCb, TY, TCb, TCb) { return _v.Cb.Value(), _v.Y.Value(), _v.Cb.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbYCbCr() (TCb, TY, TCb, TCr) { return _v.Cb.Value(), _v.Y.Value(), _v.Cb.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbYCrY() (TCb, TY, TCr, TY) { return _v.Cb.Value(), _v.Y.Value(), _v.Cr.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbYCrCb() (TCb, TY, TCr, TCb) { return _v.Cb.Value(), _v.Y.Value(), _v.Cr.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbYCrCr() (TCb, TY, TCr, TCr) { return _v.Cb.Value(), _v.Y.Value(), _v.Cr.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCbYY() (TCb, TCb, TY, TY) { return _v.Cb.Value(), _v.Cb.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCbYCb() (TCb, TCb, TY, TCb) { return _v.Cb.Value(), _v.Cb.Value(), _v.Y.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCbYCr() (TCb, TCb, TY, TCr) { return _v.Cb.Value(), _v.Cb.Value(), _v.Y.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCbCbY() (TCb, TCb, TCb, TY) { return _v.Cb.Value(), _v.Cb.Value(), _v.Cb.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCbCbCb() (TCb, TCb, TCb, TCb) { return _v.Cb.Value(), _v.Cb.Value(), _v.Cb.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCbCbCr() (TCb, TCb, TCb, TCr) { return _v.Cb.Value(), _v.Cb.Value(), _v.Cb.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCbCrY() (TCb, TCb, TCr, TY) { return _v.Cb.Value(), _v.Cb.Value(), _v.Cr.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCbCrCb() (TCb, TCb, TCr, TCb) { return _v.Cb.Value(), _v.Cb.Value(), _v.Cr.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCbCrCr() (TCb, TCb, TCr, TCr) { return _v.Cb.Value(), _v.Cb.Value(), _v.Cr.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCrYY() (TCb, TCr, TY, TY) { return _v.Cb.Value(), _v.Cr.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCrYCb() (TCb, TCr, TY, TCb) { return _v.Cb.Value(), _v.Cr.Value(), _v.Y.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCrYCr() (TCb, TCr, TY, TCr) { return _v.Cb.Value(), _v.Cr.Value(), _v.Y.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCrCbY() (TCb, TCr, TCb, TY) { return _v.Cb.Value(), _v.Cr.Value(), _v.Cb.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCrCbCb() (TCb, TCr, TCb, TCb) { return _v.Cb.Value(), _v.Cr.Value(), _v.Cb.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCrCbCr() (TCb, TCr, TCb, TCr) { return _v.Cb.Value(), _v.Cr.Value(), _v.Cb.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCrCrY() (TCb, TCr, TCr, TY) { return _v.Cb.Value(), _v.Cr.Value(), _v.Cr.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCrCrCb() (TCb, TCr, TCr, TCb) { return _v.Cb.Value(), _v.Cr.Value(), _v.Cr.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CbCrCrCr() (TCb, TCr, TCr, TCr) { return _v.Cb.Value(), _v.Cr.Value(), _v.Cr.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrYYY() (TCr, TY, TY, TY) { return _v.Cr.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrYYCb() (TCr, TY, TY, TCb) { return _v.Cr.Value(), _v.Y.Value(), _v.Y.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrYYCr() (TCr, TY, TY, TCr) { return _v.Cr.Value(), _v.Y.Value(), _v.Y.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrYCbY() (TCr, TY, TCb, TY) { return _v.Cr.Value(), _v.Y.Value(), _v.Cb.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrYCbCb() (TCr, TY, TCb, TCb) { return _v.Cr.Value(), _v.Y.Value(), _v.Cb.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrYCbCr() (TCr, TY, TCb, TCr) { return _v.Cr.Value(), _v.Y.Value(), _v.Cb.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrYCrY() (TCr, TY, TCr, TY) { return _v.Cr.Value(), _v.Y.Value(), _v.Cr.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrYCrCb() (TCr, TY, TCr, TCb) { return _v.Cr.Value(), _v.Y.Value(), _v.Cr.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrYCrCr() (TCr, TY, TCr, TCr) { return _v.Cr.Value(), _v.Y.Value(), _v.Cr.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCbYY() (TCr, TCb, TY, TY) { return _v.Cr.Value(), _v.Cb.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCbYCb() (TCr, TCb, TY, TCb) { return _v.Cr.Value(), _v.Cb.Value(), _v.Y.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCbYCr() (TCr, TCb, TY, TCr) { return _v.Cr.Value(), _v.Cb.Value(), _v.Y.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCbCbY() (TCr, TCb, TCb, TY) { return _v.Cr.Value(), _v.Cb.Value(), _v.Cb.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCbCbCb() (TCr, TCb, TCb, TCb) { return _v.Cr.Value(), _v.Cb.Value(), _v.Cb.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCbCbCr() (TCr, TCb, TCb, TCr) { return _v.Cr.Value(), _v.Cb.Value(), _v.Cb.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCbCrY() (TCr, TCb, TCr, TY) { return _v.Cr.Value(), _v.Cb.Value(), _v.Cr.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCbCrCb() (TCr, TCb, TCr, TCb) { return _v.Cr.Value(), _v.Cb.Value(), _v.Cr.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCbCrCr() (TCr, TCb, TCr, TCr) { return _v.Cr.Value(), _v.Cb.Value(), _v.Cr.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCrYY() (TCr, TCr, TY, TY) { return _v.Cr.Value(), _v.Cr.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCrYCb() (TCr, TCr, TY, TCb) { return _v.Cr.Value(), _v.Cr.Value(), _v.Y.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCrYCr() (TCr, TCr, TY, TCr) { return _v.Cr.Value(), _v.Cr.Value(), _v.Y.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCrCbY() (TCr, TCr, TCb, TY) { return _v.Cr.Value(), _v.Cr.Value(), _v.Cb.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCrCbCb() (TCr, TCr, TCb, TCb) { return _v.Cr.Value(), _v.Cr.Value(), _v.Cb.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCrCbCr() (TCr, TCr, TCb, TCr) { return _v.Cr.Value(), _v.Cr.Value(), _v.Cb.Value(), _v.Cr.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCrCrY() (TCr, TCr, TCr, TY) { return _v.Cr.Value(), _v.Cr.Value(), _v.Cr.Value(), _v.Y.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCrCrCb() (TCr, TCr, TCr, TCb) { return _v.Cr.Value(), _v.Cr.Value(), _v.Cr.Value(), _v.Cb.Value() }
func (_v *YCbCrTyped[TY, TCb, TCr]) CrCrCrCr() (TCr, TCr, TCr, TCr) { return _v.Cr.Value(), _v.Cr.Value(), _v.Cr.Value(), _v.Cr.Value() }
