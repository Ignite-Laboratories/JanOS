// Code generated by 'gen/letters'; DO NOT EDIT.
//go:generate go run ../gen/letters -pkg std -name XYZ -nameL xyz -cmpts X,Y,Z -cmptsL x,y,z -out ../std/xyz.go
package std

import (
	"core/sys/atlas"
	"core/sys/name/format"
	"core/sys/num"
	"core/sys/num/bounded"
	"core/sys/support"
	"fmt"
	"strings"
)

// XYZ is a 3D vector of like-typed bounded.Number components.
//
// NOTE: If you'd like asymmetric types, please see XYZTyped.
type XYZ[T num.Primitive] = XYZTyped[T, T, T]

// XYZTyped is a 3D vector of asymmetrically typed bounded.Number components.
//
// NOTE: If you'd like symmetric types, please see XYZ.
type XYZTyped[TX num.Primitive, TY num.Primitive, TZ num.Primitive] struct {
	Entity
	X bounded.Number[TX]
	Y bounded.Number[TY]
	Z bounded.Number[TZ]
}

func NewXYZ[T num.Primitive](x T, y T, z T) *XYZ[T] {
	typed := XYZ[T](*NewXYZTyped[T, T, T](x, y, z))
	return &typed
}

func NewXYZTyped[TX num.Primitive, TY num.Primitive, TZ num.Primitive](x TX, y TY, z TZ) *XYZTyped[TX, TY, TZ] {
	minX := num.MinValue[TX]()
	maxX := num.MaxValue[TX]()
	minY := num.MinValue[TY]()
	maxY := num.MaxValue[TY]()
	minZ := num.MinValue[TZ]()
	maxZ := num.MaxValue[TZ]()

	_v := &XYZTyped[TX, TY, TZ]{}
	_v.Entity = NewEntity[format.Default]()
	_v.SetBoundaries(minX, maxX, minY, maxY, minZ, maxZ)
	_v.Set(x, y, z)
	return _v
}

func (_v *XYZTyped[TX, TY, TZ]) GetName() string {
	return _v.GivenName.Name
}

func (_v *XYZTyped[TX, TY, TZ]) SetName(name string) *XYZTyped[TX, TY, TZ] {
	_v.GivenName.Name = name
	return _v
}

func (_v *XYZTyped[TX, TY, TZ]) Set(x TX, y TY, z TZ) *XYZTyped[TX, TY, TZ] {
	_ = _v.X.Set(x)
	_ = _v.Y.Set(y)
	_ = _v.Z.Set(z)
	return _v
}

func (_v *XYZTyped[TX, TY, TZ]) SetClamp(clamp bool) *XYZTyped[TX, TY, TZ] {
	_v.X.Clamp = clamp
	_v.Y.Clamp = clamp
	_v.Z.Clamp = clamp
	return _v
}

func (_v *XYZTyped[TX, TY, TZ]) SetBoundaries(minX, maxX TX, minY, maxY TY, minZ, maxZ TZ) *XYZTyped[TX, TY, TZ] {
	_ = _v.X.SetBoundaries(minX, maxX)
	_ = _v.Y.SetBoundaries(minY, maxY)
	_ = _v.Z.SetBoundaries(minZ, maxZ)
	return _v
}

func (_v *XYZTyped[TX, TY, TZ]) GetComponent(index uint) any {
	switch index {
	case 0:
		 return any(_v.X)
	case 1:
		 return any(_v.Y)
	case 2:
		 return any(_v.Z)
	 default:
		panic(fmt.Errorf("cannot get component index %d of an XYZ vector", index))
	}
}

func (_v *XYZTyped[TX, TY, TZ]) GetComponentByName(name string) any {
	switch strings.ToLower(name) {
	case "x":
		 return any(_v.X)
	case "y":
		 return any(_v.Y)
	case "z":
		 return any(_v.Z)
	 default:
		panic(fmt.Errorf("cannot get component \"%s\" of an XYZ vector", name))
	}
}

func (_v *XYZTyped[TX, TY, TZ]) SetComponent(index uint, value any) {
	switch index {
	case 0:
		 _v.X.Set(value.(TX))
	case 1:
		 _v.Y.Set(value.(TY))
	case 2:
		 _v.Z.Set(value.(TZ))
	 default:
		panic(fmt.Errorf("cannot set component index %d of an XYZ vector", index))
	}
}

func (_v *XYZTyped[TX, TY, TZ]) SetComponentByName(name string, value any) {
	switch strings.ToLower(name) {
	case "x":
		 _v.X.Set(value.(TX))
	case "y":
		 _v.Y.Set(value.(TY))
	case "z":
		 _v.Z.Set(value.(TZ))
	 default:
		panic(fmt.Errorf("cannot set component \"%s\" of an XYZ vector", name))
	}
}

func (_v XYZTyped[TX, TY, TZ]) String() string {
	if atlas.CompactVectors {
		return fmt.Sprintf("{x: %v, y: %v, z: %v}", _v.X.String(), _v.Y.String(), _v.Z.String())
	}
	 if support.AllSameTypes(TX(0), TY(0), TZ(0)) {
		return fmt.Sprintf("xyz[%T]{%v, %v, %v}(\"%v\")", TX(0), _v.X.String(), _v.Y.String(), _v.Z.String(), _v.GivenName.Name)
	}
	return fmt.Sprintf("xyz[%T, %T, %T]{%v, %v, %v}(\"%v\")", TX(0), TY(0), TZ(0), _v.X.String(), _v.Y.String(), _v.Z.String(), _v.GivenName.Name)
}

/**
Swizzling

	NOTE: This is a regular expression to find and replace swizzle functions into a one-liner if the auto formatter ever kicks in

	Find -
	func \*\((.*?)\) ([A-Z]{2,4})\(\) \((.*?)\)[ ]*\{[\n\t ]*return(.*?)[\n\t ]*\}

	Replace -
	func \*($1) $2() ($3) { return$4 }
*/

func (_v *XYZTyped[TX, TY, TZ]) XX() (TX, TX) { return _v.X.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XY() (TX, TY) { return _v.X.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XZ() (TX, TZ) { return _v.X.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YX() (TY, TX) { return _v.Y.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YY() (TY, TY) { return _v.Y.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YZ() (TY, TZ) { return _v.Y.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZX() (TZ, TX) { return _v.Z.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZY() (TZ, TY) { return _v.Z.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZZ() (TZ, TZ) { return _v.Z.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XXX() (TX, TX, TX) { return _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XXY() (TX, TX, TY) { return _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XXZ() (TX, TX, TZ) { return _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XYX() (TX, TY, TX) { return _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XYY() (TX, TY, TY) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XYZ() (TX, TY, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XZX() (TX, TZ, TX) { return _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XZY() (TX, TZ, TY) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XZZ() (TX, TZ, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YXX() (TY, TX, TX) { return _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YXY() (TY, TX, TY) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YXZ() (TY, TX, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YYX() (TY, TY, TX) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YYY() (TY, TY, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YYZ() (TY, TY, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YZX() (TY, TZ, TX) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YZY() (TY, TZ, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YZZ() (TY, TZ, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZXX() (TZ, TX, TX) { return _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZXY() (TZ, TX, TY) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZXZ() (TZ, TX, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZYX() (TZ, TY, TX) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZYY() (TZ, TY, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZYZ() (TZ, TY, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZZX() (TZ, TZ, TX) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZZY() (TZ, TZ, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZZZ() (TZ, TZ, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XXXX() (TX, TX, TX, TX) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XXXY() (TX, TX, TX, TY) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XXXZ() (TX, TX, TX, TZ) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XXYX() (TX, TX, TY, TX) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XXYY() (TX, TX, TY, TY) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XXYZ() (TX, TX, TY, TZ) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XXZX() (TX, TX, TZ, TX) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XXZY() (TX, TX, TZ, TY) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XXZZ() (TX, TX, TZ, TZ) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XYXX() (TX, TY, TX, TX) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XYXY() (TX, TY, TX, TY) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XYXZ() (TX, TY, TX, TZ) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XYYX() (TX, TY, TY, TX) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XYYY() (TX, TY, TY, TY) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XYYZ() (TX, TY, TY, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XYZX() (TX, TY, TZ, TX) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XYZY() (TX, TY, TZ, TY) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XYZZ() (TX, TY, TZ, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XZXX() (TX, TZ, TX, TX) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XZXY() (TX, TZ, TX, TY) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XZXZ() (TX, TZ, TX, TZ) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XZYX() (TX, TZ, TY, TX) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XZYY() (TX, TZ, TY, TY) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XZYZ() (TX, TZ, TY, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XZZX() (TX, TZ, TZ, TX) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XZZY() (TX, TZ, TZ, TY) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) XZZZ() (TX, TZ, TZ, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YXXX() (TY, TX, TX, TX) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YXXY() (TY, TX, TX, TY) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YXXZ() (TY, TX, TX, TZ) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YXYX() (TY, TX, TY, TX) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YXYY() (TY, TX, TY, TY) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YXYZ() (TY, TX, TY, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YXZX() (TY, TX, TZ, TX) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YXZY() (TY, TX, TZ, TY) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YXZZ() (TY, TX, TZ, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YYXX() (TY, TY, TX, TX) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YYXY() (TY, TY, TX, TY) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YYXZ() (TY, TY, TX, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YYYX() (TY, TY, TY, TX) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YYYY() (TY, TY, TY, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YYYZ() (TY, TY, TY, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YYZX() (TY, TY, TZ, TX) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YYZY() (TY, TY, TZ, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YYZZ() (TY, TY, TZ, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YZXX() (TY, TZ, TX, TX) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YZXY() (TY, TZ, TX, TY) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YZXZ() (TY, TZ, TX, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YZYX() (TY, TZ, TY, TX) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YZYY() (TY, TZ, TY, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YZYZ() (TY, TZ, TY, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YZZX() (TY, TZ, TZ, TX) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YZZY() (TY, TZ, TZ, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) YZZZ() (TY, TZ, TZ, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZXXX() (TZ, TX, TX, TX) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZXXY() (TZ, TX, TX, TY) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZXXZ() (TZ, TX, TX, TZ) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZXYX() (TZ, TX, TY, TX) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZXYY() (TZ, TX, TY, TY) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZXYZ() (TZ, TX, TY, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZXZX() (TZ, TX, TZ, TX) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZXZY() (TZ, TX, TZ, TY) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZXZZ() (TZ, TX, TZ, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZYXX() (TZ, TY, TX, TX) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZYXY() (TZ, TY, TX, TY) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZYXZ() (TZ, TY, TX, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZYYX() (TZ, TY, TY, TX) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZYYY() (TZ, TY, TY, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZYYZ() (TZ, TY, TY, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZYZX() (TZ, TY, TZ, TX) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZYZY() (TZ, TY, TZ, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZYZZ() (TZ, TY, TZ, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZZXX() (TZ, TZ, TX, TX) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZZXY() (TZ, TZ, TX, TY) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZZXZ() (TZ, TZ, TX, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZZYX() (TZ, TZ, TY, TX) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZZYY() (TZ, TZ, TY, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZZYZ() (TZ, TZ, TY, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZZZX() (TZ, TZ, TZ, TX) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZZZY() (TZ, TZ, TZ, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZTyped[TX, TY, TZ]) ZZZZ() (TZ, TZ, TZ, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
