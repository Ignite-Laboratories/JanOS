// Code generated by 'internal/generators/letter'; DO NOT EDIT.
//go:generate go run ./internal/generators/letter -pkg std -name ST -nameL st -cmpts S,T -cmptsL s,t -out st.go
package std

import (
	"core/sys/name/format"
	"core/sys/num"
	"core/sys/num/bounded"
	"core/sys/support"
	"fmt"
)

// ST is a 2D vector of like-typed bounded.Number components.
//
// NOTE: If you'd like asymmetric types, please see STTyped.
type ST[T num.Primitive] = STTyped[T, T]

// STTyped is a 2D vector of asymmetrically typed bounded.Number components.
//
// NOTE: If you'd like symmetric types, please see ST.
type STTyped[TS num.Primitive, TT num.Primitive] struct {
	Entity
	S bounded.Number[TS]
	T bounded.Number[TT]
}

func NewST[T num.Primitive]() ST[T] {
	return ST[T](NewSTTyped[T, T]())
}

func NewSTTyped[TS num.Primitive, TT num.Primitive]() STTyped[TS, TT] {
	minS := num.MinValue[TS]()
	maxS := num.MaxValue[TS]()
	minT := num.MinValue[TT]()
	maxT := num.MaxValue[TT]()

	c := STTyped[TS, TT]{}
	c.Entity = NewEntity[format.Default]()
	c.SetBoundaries(minS, maxS, minT, maxT)
	return c
}

func (_v STTyped[TS, TT]) String() string {
	if support.AllSameTypes(TS(0), TT(0)) {
		return fmt.Sprintf("st[%T].{%v, %v}(%v)", TS(0), _v.S.ValueString(), _v.T.ValueString(), _v.GivenName.Name)
	}
	return fmt.Sprintf("st[%T, %T].{%v, %v}(%v)", TS(0), TT(0), _v.S.ValueString(), _v.T.ValueString(), _v.GivenName.Name)
}

func (_v STTyped[TS, TT]) Set(s TS, t TT) STTyped[TS, TT] {
	_ = _v.S.Set(s)
	_ = _v.T.Set(t)
	return _v
}

func (_v STTyped[TS, TT]) SetClamp(clamp bool) STTyped[TS, TT] {
	_v.S.Clamp = clamp
	_v.T.Clamp = clamp
	return _v
}

func (_v STTyped[TS, TT]) SetBoundaries(minS, maxS TS, minT, maxT TT) STTyped[TS, TT] {
	_ = _v.S.SetBoundaries(minS, maxS)
	_ = _v.T.SetBoundaries(minT, maxT)
	return _v
}

/**
Swizzling

	NOTE: This is a regular expression to find and replace swizzle functions into a one-liner if the auto formatter ever kicks in

	Find -
	func \((.*?)\) ([A-Z]{2,4})\(\) \((.*?)\)[ ]*\{[\n\t ]*return(.*?)[\n\t ]*\}

	Replace -
	func ($1) $2() ($3) { return$4 }
*/

func (_v STTyped[TS, TT]) SS() (TS, TS) { return _v.S.Value(), _v.S.Value() }
func (_v STTyped[TS, TT]) ST() (TS, TT) { return _v.S.Value(), _v.T.Value() }
func (_v STTyped[TS, TT]) TS() (TT, TS) { return _v.T.Value(), _v.S.Value() }
func (_v STTyped[TS, TT]) TT() (TT, TT) { return _v.T.Value(), _v.T.Value() }
