// Code generated by 'gen/letters/main'; DO NOT EDIT.
//go:generate go run ../gen/letters/main -pkg std -name ST -nameL st -cmpts S,T -cmptsL s,t -out ../std/st.go
package std

import (
	"core/sys/atlas"
	"core/sys/name/format"
	"core/sys/num"
	"core/sys/support"
	"fmt"
	"strings"
)

// ST is a 2D vector of like-typed bounded.Numeric components.
//
// NOTE: If you'd like asymmetric types, please see STTyped.
type ST[T num.Primitive] = STTyped[T, T]

// STTyped is a 2D vector of asymmetrically typed bounded.Numeric components.
//
// NOTE: If you'd like symmetric types, please see ST.
type STTyped[TS num.Primitive, TT num.Primitive] struct {
	Entity
	S num.Numeric[TS]
	T num.Numeric[TT]
}

func NewST[T num.Primitive](s T, t T, name ...string) *ST[T] {
	typed := ST[T](*NewSTTyped[T, T](s, t, name...))
	return &typed
}

func NewSTTyped[TS num.Primitive, TT num.Primitive](s TS, t TT, name ...string) *STTyped[TS, TT] {
	minS := num.MinValue[TS]()
	maxS := num.MaxValue[TS]()
	if num.IsFloat[TS]() {
		minS = 0
		maxS = 1
	}
	minT := num.MinValue[TT]()
	maxT := num.MaxValue[TT]()
	if num.IsFloat[TT]() {
		minT = 0
		maxT = 1
	}

	_v := &STTyped[TS, TT]{}
	_v.Entity = NewEntity[format.Default]()
	_v.SetBoundaries(minS, maxS, minT, maxT)
	_v.Set(s, t)
	if len(name) > 0 {
		_v.SetName(name[0])
	}
	return _v
}

func (_v *STTyped[TS, TT]) Name() string {
	return _v.GivenName.Name
}

func (_v *STTyped[TS, TT]) SetName(name string) *STTyped[TS, TT] {
	_v.GivenName.Name = name
	return _v
}

func (_v *STTyped[TS, TT]) Set(s TS, t TT) *STTyped[TS, TT] {
	_ = _v.S.Set(s)
	_ = _v.T.Set(t)
	return _v
}

func (_v *STTyped[TS, TT]) SetClamp(clamp bool) *STTyped[TS, TT] {
	_v.S.Clamp = clamp
	_v.T.Clamp = clamp
	return _v
}

func (_v *STTyped[TS, TT]) SetBoundaries(minS, maxS TS, minT, maxT TT) *STTyped[TS, TT] {
	_ = _v.S.SetBoundaries(minS, maxS)
	_ = _v.T.SetBoundaries(minT, maxT)
	return _v
}

func (_v *STTyped[TS, TT]) Component(index uint) (num.INumeric, error) {
	switch index {
	case 0:
		return &_v.S, nil
	case 1:
		return &_v.T, nil
	default:
		return nil, fmt.Errorf("cannot get component index %d of an ST vector", index)
	}
}

func (_v *STTyped[TS, TT]) Components() []num.INumeric {
	return []num.INumeric{&_v.S, &_v.T}
}

func (_v *STTyped[TS, TT]) ComponentByName(name string) (num.INumeric, error) {
	switch strings.ToLower(name) {
	case "s":
		return &_v.S, nil
	case "t":
		return &_v.T, nil
	default:
		return nil, fmt.Errorf("cannot get component \"%s\" of an ST vector", name)
	}
}

func (_v *STTyped[TS, TT]) ComponentLen() uint {
	return 2
}

func (_v *STTyped[TS, TT]) SetComponent(index uint, value any) error {
	switch index {
	case 0:
		 _v.S.Set(value.(TS))
	case 1:
		 _v.T.Set(value.(TT))
	default:
		return fmt.Errorf("cannot set component index %d of an ST vector", index)
	}
	return nil
}

func (_v *STTyped[TS, TT]) SetComponents(values []any) error {
	if len(values) != 2 {
		return fmt.Errorf("cannot set %d components of 2D vector ST", len(values), )
	}
	if _, ok := values[0].(TS); !ok {
		return fmt.Errorf("expected type %T for component S, got type %T", TS(0), values[0])	}
	if _, ok := values[1].(TT); !ok {
		return fmt.Errorf("expected type %T for component T, got type %T", TT(0), values[1])	}
	_v.S.Set(values[0].(TS))
	_v.T.Set(values[1].(TT))
	return nil
}

func (_v *STTyped[TS, TT]) SetComponentByName(name string, value any) error {
	switch strings.ToLower(name) {
	case "s":
		 _v.S.Set(value.(TS))
	case "t":
		 _v.T.Set(value.(TT))
	default:
		return fmt.Errorf("cannot set component \"%s\" of an ST vector", name)
	}
	return nil
}

func (_v STTyped[TS, TT]) String() string {
	if atlas.CompactVectors {
		return fmt.Sprintf("{s: %v, t: %v}", _v.S.String(), _v.T.String())
	}
	 if support.AllSameTypes(TS(0), TT(0)) {
		return fmt.Sprintf("st[%T]{%v, %v}(\"%v\")", TS(0), _v.S.String(), _v.T.String(), _v.GivenName.Name)
	}
	return fmt.Sprintf("st[%T, %T]{%v, %v}(\"%v\")", TS(0), TT(0), _v.S.String(), _v.T.String(), _v.GivenName.Name)
}

func (_v *STTyped[TS, TT]) SS() (TS, TS) { return _v.S.Value(), _v.S.Value() }
func (_v *STTyped[TS, TT]) ST() (TS, TT) { return _v.S.Value(), _v.T.Value() }
func (_v *STTyped[TS, TT]) TS() (TT, TS) { return _v.T.Value(), _v.S.Value() }
func (_v *STTyped[TS, TT]) TT() (TT, TT) { return _v.T.Value(), _v.T.Value() }
func (_v *STTyped[TS, TT]) SSS() (TS, TS, TS) { return _v.S.Value(), _v.S.Value(), _v.S.Value() }
func (_v *STTyped[TS, TT]) SST() (TS, TS, TT) { return _v.S.Value(), _v.S.Value(), _v.T.Value() }
func (_v *STTyped[TS, TT]) STS() (TS, TT, TS) { return _v.S.Value(), _v.T.Value(), _v.S.Value() }
func (_v *STTyped[TS, TT]) STT() (TS, TT, TT) { return _v.S.Value(), _v.T.Value(), _v.T.Value() }
func (_v *STTyped[TS, TT]) TSS() (TT, TS, TS) { return _v.T.Value(), _v.S.Value(), _v.S.Value() }
func (_v *STTyped[TS, TT]) TST() (TT, TS, TT) { return _v.T.Value(), _v.S.Value(), _v.T.Value() }
func (_v *STTyped[TS, TT]) TTS() (TT, TT, TS) { return _v.T.Value(), _v.T.Value(), _v.S.Value() }
func (_v *STTyped[TS, TT]) TTT() (TT, TT, TT) { return _v.T.Value(), _v.T.Value(), _v.T.Value() }
func (_v *STTyped[TS, TT]) SSSS() (TS, TS, TS, TS) { return _v.S.Value(), _v.S.Value(), _v.S.Value(), _v.S.Value() }
func (_v *STTyped[TS, TT]) SSST() (TS, TS, TS, TT) { return _v.S.Value(), _v.S.Value(), _v.S.Value(), _v.T.Value() }
func (_v *STTyped[TS, TT]) SSTS() (TS, TS, TT, TS) { return _v.S.Value(), _v.S.Value(), _v.T.Value(), _v.S.Value() }
func (_v *STTyped[TS, TT]) SSTT() (TS, TS, TT, TT) { return _v.S.Value(), _v.S.Value(), _v.T.Value(), _v.T.Value() }
func (_v *STTyped[TS, TT]) STSS() (TS, TT, TS, TS) { return _v.S.Value(), _v.T.Value(), _v.S.Value(), _v.S.Value() }
func (_v *STTyped[TS, TT]) STST() (TS, TT, TS, TT) { return _v.S.Value(), _v.T.Value(), _v.S.Value(), _v.T.Value() }
func (_v *STTyped[TS, TT]) STTS() (TS, TT, TT, TS) { return _v.S.Value(), _v.T.Value(), _v.T.Value(), _v.S.Value() }
func (_v *STTyped[TS, TT]) STTT() (TS, TT, TT, TT) { return _v.S.Value(), _v.T.Value(), _v.T.Value(), _v.T.Value() }
func (_v *STTyped[TS, TT]) TSSS() (TT, TS, TS, TS) { return _v.T.Value(), _v.S.Value(), _v.S.Value(), _v.S.Value() }
func (_v *STTyped[TS, TT]) TSST() (TT, TS, TS, TT) { return _v.T.Value(), _v.S.Value(), _v.S.Value(), _v.T.Value() }
func (_v *STTyped[TS, TT]) TSTS() (TT, TS, TT, TS) { return _v.T.Value(), _v.S.Value(), _v.T.Value(), _v.S.Value() }
func (_v *STTyped[TS, TT]) TSTT() (TT, TS, TT, TT) { return _v.T.Value(), _v.S.Value(), _v.T.Value(), _v.T.Value() }
func (_v *STTyped[TS, TT]) TTSS() (TT, TT, TS, TS) { return _v.T.Value(), _v.T.Value(), _v.S.Value(), _v.S.Value() }
func (_v *STTyped[TS, TT]) TTST() (TT, TT, TS, TT) { return _v.T.Value(), _v.T.Value(), _v.S.Value(), _v.T.Value() }
func (_v *STTyped[TS, TT]) TTTS() (TT, TT, TT, TS) { return _v.T.Value(), _v.T.Value(), _v.T.Value(), _v.S.Value() }
func (_v *STTyped[TS, TT]) TTTT() (TT, TT, TT, TT) { return _v.T.Value(), _v.T.Value(), _v.T.Value(), _v.T.Value() }
