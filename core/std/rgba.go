// Code generated by 'gen/letters/main'; DO NOT EDIT.
//go:generate go run ../gen/letters/main -pkg std -name RGBA -nameL rgba -cmpts R,G,B,A -cmptsL r,g,b,a -out ../std/rgba.go
package std

import (
	"core/sys/atlas"
	"core/sys/name/format"
	"core/sys/num"
	"core/sys/num/bounded"
	"core/sys/support"
	"fmt"
	"strings"
)

// RGBA is a 4D vector of like-typed bounded.Numeric components.
//
// NOTE: If you'd like asymmetric types, please see RGBATyped.
type RGBA[T num.Primitive] = RGBATyped[T, T, T, T]

// RGBATyped is a 4D vector of asymmetrically typed bounded.Numeric components.
//
// NOTE: If you'd like symmetric types, please see RGBA.
type RGBATyped[TR num.Primitive, TG num.Primitive, TB num.Primitive, TA num.Primitive] struct {
	Entity
	R bounded.Numeric[TR]
	G bounded.Numeric[TG]
	B bounded.Numeric[TB]
	A bounded.Numeric[TA]
}

func NewRGBA[T num.Primitive](r T, g T, b T, a T, name ...string) *RGBA[T] {
	typed := RGBA[T](*NewRGBATyped[T, T, T, T](r, g, b, a, name...))
	return &typed
}

func NewRGBATyped[TR num.Primitive, TG num.Primitive, TB num.Primitive, TA num.Primitive](r TR, g TG, b TB, a TA, name ...string) *RGBATyped[TR, TG, TB, TA] {
	minR := num.MinValue[TR]()
	maxR := num.MaxValue[TR]()
	if num.IsFloat[TR]() {
		minR = 0
		maxR = 1
	}
	minG := num.MinValue[TG]()
	maxG := num.MaxValue[TG]()
	if num.IsFloat[TG]() {
		minG = 0
		maxG = 1
	}
	minB := num.MinValue[TB]()
	maxB := num.MaxValue[TB]()
	if num.IsFloat[TB]() {
		minB = 0
		maxB = 1
	}
	minA := num.MinValue[TA]()
	maxA := num.MaxValue[TA]()
	if num.IsFloat[TA]() {
		minA = 0
		maxA = 1
	}

	_v := &RGBATyped[TR, TG, TB, TA]{}
	_v.Entity = NewEntity[format.Default]()
	_v.SetBoundaries(minR, maxR, minG, maxG, minB, maxB, minA, maxA)
	_v.Set(r, g, b, a)
	if len(name) > 0 {
		_v.SetName(name[0])
	}
	return _v
}

func (_v *RGBATyped[TR, TG, TB, TA]) Name() string {
	return _v.GivenName.Name
}

func (_v *RGBATyped[TR, TG, TB, TA]) SetName(name string) *RGBATyped[TR, TG, TB, TA] {
	_v.GivenName.Name = name
	return _v
}

func (_v *RGBATyped[TR, TG, TB, TA]) Set(r TR, g TG, b TB, a TA) *RGBATyped[TR, TG, TB, TA] {
	_ = _v.R.Set(r)
	_ = _v.G.Set(g)
	_ = _v.B.Set(b)
	_ = _v.A.Set(a)
	return _v
}

func (_v *RGBATyped[TR, TG, TB, TA]) SetClamp(clamp bool) *RGBATyped[TR, TG, TB, TA] {
	_v.R.Clamp = clamp
	_v.G.Clamp = clamp
	_v.B.Clamp = clamp
	_v.A.Clamp = clamp
	return _v
}

func (_v *RGBATyped[TR, TG, TB, TA]) SetBoundaries(minR, maxR TR, minG, maxG TG, minB, maxB TB, minA, maxA TA) *RGBATyped[TR, TG, TB, TA] {
	_ = _v.R.SetBoundaries(minR, maxR)
	_ = _v.G.SetBoundaries(minG, maxG)
	_ = _v.B.SetBoundaries(minB, maxB)
	_ = _v.A.SetBoundaries(minA, maxA)
	return _v
}

func (_v *RGBATyped[TR, TG, TB, TA]) Component(index uint) (bounded.INumeric, error) {
	switch index {
	case 0:
		return &_v.R, nil
	case 1:
		return &_v.G, nil
	case 2:
		return &_v.B, nil
	case 3:
		return &_v.A, nil
	default:
		return nil, fmt.Errorf("cannot get component index %d of an RGBA vector", index)
	}
}

func (_v *RGBATyped[TR, TG, TB, TA]) Components() []bounded.INumeric {
	return []bounded.INumeric{&_v.R, &_v.G, &_v.B, &_v.A}
}

func (_v *RGBATyped[TR, TG, TB, TA]) ComponentByName(name string) (bounded.INumeric, error) {
	switch strings.ToLower(name) {
	case "r":
		return &_v.R, nil
	case "g":
		return &_v.G, nil
	case "b":
		return &_v.B, nil
	case "a":
		return &_v.A, nil
	default:
		return nil, fmt.Errorf("cannot get component \"%s\" of an RGBA vector", name)
	}
}

func (_v *RGBATyped[TR, TG, TB, TA]) ComponentLen() uint {
	return 4
}

func (_v *RGBATyped[TR, TG, TB, TA]) SetComponent(index uint, value any) error {
	switch index {
	case 0:
		 _v.R.Set(value.(TR))
	case 1:
		 _v.G.Set(value.(TG))
	case 2:
		 _v.B.Set(value.(TB))
	case 3:
		 _v.A.Set(value.(TA))
	default:
		return fmt.Errorf("cannot set component index %d of an RGBA vector", index)
	}
	return nil
}

func (_v *RGBATyped[TR, TG, TB, TA]) SetComponents(values []any) error {
	if len(values) != 4 {
		return fmt.Errorf("cannot set %d components of 4D vector RGBA", len(values), )
	}
	if _, ok := values[0].(TR); !ok {
		return fmt.Errorf("expected type %T for component R, got type %T", TR(0), values[0])	}
	if _, ok := values[1].(TG); !ok {
		return fmt.Errorf("expected type %T for component G, got type %T", TG(0), values[1])	}
	if _, ok := values[2].(TB); !ok {
		return fmt.Errorf("expected type %T for component B, got type %T", TB(0), values[2])	}
	if _, ok := values[3].(TA); !ok {
		return fmt.Errorf("expected type %T for component A, got type %T", TA(0), values[3])	}
	_v.R.Set(values[0].(TR))
	_v.G.Set(values[1].(TG))
	_v.B.Set(values[2].(TB))
	_v.A.Set(values[3].(TA))
	return nil
}

func (_v *RGBATyped[TR, TG, TB, TA]) SetComponentByName(name string, value any) error {
	switch strings.ToLower(name) {
	case "r":
		 _v.R.Set(value.(TR))
	case "g":
		 _v.G.Set(value.(TG))
	case "b":
		 _v.B.Set(value.(TB))
	case "a":
		 _v.A.Set(value.(TA))
	default:
		return fmt.Errorf("cannot set component \"%s\" of an RGBA vector", name)
	}
	return nil
}

func (_v RGBATyped[TR, TG, TB, TA]) String() string {
	if atlas.CompactVectors {
		return fmt.Sprintf("{r: %v, g: %v, b: %v, a: %v}", _v.R.String(), _v.G.String(), _v.B.String(), _v.A.String())
	}
	 if support.AllSameTypes(TR(0), TG(0), TB(0), TA(0)) {
		return fmt.Sprintf("rgba[%T]{%v, %v, %v, %v}(\"%v\")", TR(0), _v.R.String(), _v.G.String(), _v.B.String(), _v.A.String(), _v.GivenName.Name)
	}
	return fmt.Sprintf("rgba[%T, %T, %T, %T]{%v, %v, %v, %v}(\"%v\")", TR(0), TG(0), TB(0), TA(0), _v.R.String(), _v.G.String(), _v.B.String(), _v.A.String(), _v.GivenName.Name)
}

func (_v *RGBATyped[TR, TG, TB, TA]) RR() (TR, TR) { return _v.R.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RG() (TR, TG) { return _v.R.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RB() (TR, TB) { return _v.R.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RA() (TR, TA) { return _v.R.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GR() (TG, TR) { return _v.G.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GG() (TG, TG) { return _v.G.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GB() (TG, TB) { return _v.G.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GA() (TG, TA) { return _v.G.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BR() (TB, TR) { return _v.B.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BG() (TB, TG) { return _v.B.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BB() (TB, TB) { return _v.B.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BA() (TB, TA) { return _v.B.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AR() (TA, TR) { return _v.A.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AG() (TA, TG) { return _v.A.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AB() (TA, TB) { return _v.A.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AA() (TA, TA) { return _v.A.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RRR() (TR, TR, TR) { return _v.R.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RRG() (TR, TR, TG) { return _v.R.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RRB() (TR, TR, TB) { return _v.R.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RRA() (TR, TR, TA) { return _v.R.Value(), _v.R.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RGR() (TR, TG, TR) { return _v.R.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RGG() (TR, TG, TG) { return _v.R.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RGB() (TR, TG, TB) { return _v.R.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RGA() (TR, TG, TA) { return _v.R.Value(), _v.G.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RBR() (TR, TB, TR) { return _v.R.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RBG() (TR, TB, TG) { return _v.R.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RBB() (TR, TB, TB) { return _v.R.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RBA() (TR, TB, TA) { return _v.R.Value(), _v.B.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RAR() (TR, TA, TR) { return _v.R.Value(), _v.A.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RAG() (TR, TA, TG) { return _v.R.Value(), _v.A.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RAB() (TR, TA, TB) { return _v.R.Value(), _v.A.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RAA() (TR, TA, TA) { return _v.R.Value(), _v.A.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GRR() (TG, TR, TR) { return _v.G.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GRG() (TG, TR, TG) { return _v.G.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GRB() (TG, TR, TB) { return _v.G.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GRA() (TG, TR, TA) { return _v.G.Value(), _v.R.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GGR() (TG, TG, TR) { return _v.G.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GGG() (TG, TG, TG) { return _v.G.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GGB() (TG, TG, TB) { return _v.G.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GGA() (TG, TG, TA) { return _v.G.Value(), _v.G.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GBR() (TG, TB, TR) { return _v.G.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GBG() (TG, TB, TG) { return _v.G.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GBB() (TG, TB, TB) { return _v.G.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GBA() (TG, TB, TA) { return _v.G.Value(), _v.B.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GAR() (TG, TA, TR) { return _v.G.Value(), _v.A.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GAG() (TG, TA, TG) { return _v.G.Value(), _v.A.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GAB() (TG, TA, TB) { return _v.G.Value(), _v.A.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GAA() (TG, TA, TA) { return _v.G.Value(), _v.A.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BRR() (TB, TR, TR) { return _v.B.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BRG() (TB, TR, TG) { return _v.B.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BRB() (TB, TR, TB) { return _v.B.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BRA() (TB, TR, TA) { return _v.B.Value(), _v.R.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BGR() (TB, TG, TR) { return _v.B.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BGG() (TB, TG, TG) { return _v.B.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BGB() (TB, TG, TB) { return _v.B.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BGA() (TB, TG, TA) { return _v.B.Value(), _v.G.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BBR() (TB, TB, TR) { return _v.B.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BBG() (TB, TB, TG) { return _v.B.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BBB() (TB, TB, TB) { return _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BBA() (TB, TB, TA) { return _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BAR() (TB, TA, TR) { return _v.B.Value(), _v.A.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BAG() (TB, TA, TG) { return _v.B.Value(), _v.A.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BAB() (TB, TA, TB) { return _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BAA() (TB, TA, TA) { return _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ARR() (TA, TR, TR) { return _v.A.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ARG() (TA, TR, TG) { return _v.A.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ARB() (TA, TR, TB) { return _v.A.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ARA() (TA, TR, TA) { return _v.A.Value(), _v.R.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AGR() (TA, TG, TR) { return _v.A.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AGG() (TA, TG, TG) { return _v.A.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AGB() (TA, TG, TB) { return _v.A.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AGA() (TA, TG, TA) { return _v.A.Value(), _v.G.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ABR() (TA, TB, TR) { return _v.A.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ABG() (TA, TB, TG) { return _v.A.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ABB() (TA, TB, TB) { return _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ABA() (TA, TB, TA) { return _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AAR() (TA, TA, TR) { return _v.A.Value(), _v.A.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AAG() (TA, TA, TG) { return _v.A.Value(), _v.A.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AAB() (TA, TA, TB) { return _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AAA() (TA, TA, TA) { return _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RRRR() (TR, TR, TR, TR) { return _v.R.Value(), _v.R.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RRRG() (TR, TR, TR, TG) { return _v.R.Value(), _v.R.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RRRB() (TR, TR, TR, TB) { return _v.R.Value(), _v.R.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RRRA() (TR, TR, TR, TA) { return _v.R.Value(), _v.R.Value(), _v.R.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RRGR() (TR, TR, TG, TR) { return _v.R.Value(), _v.R.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RRGG() (TR, TR, TG, TG) { return _v.R.Value(), _v.R.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RRGB() (TR, TR, TG, TB) { return _v.R.Value(), _v.R.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RRGA() (TR, TR, TG, TA) { return _v.R.Value(), _v.R.Value(), _v.G.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RRBR() (TR, TR, TB, TR) { return _v.R.Value(), _v.R.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RRBG() (TR, TR, TB, TG) { return _v.R.Value(), _v.R.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RRBB() (TR, TR, TB, TB) { return _v.R.Value(), _v.R.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RRBA() (TR, TR, TB, TA) { return _v.R.Value(), _v.R.Value(), _v.B.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RRAR() (TR, TR, TA, TR) { return _v.R.Value(), _v.R.Value(), _v.A.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RRAG() (TR, TR, TA, TG) { return _v.R.Value(), _v.R.Value(), _v.A.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RRAB() (TR, TR, TA, TB) { return _v.R.Value(), _v.R.Value(), _v.A.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RRAA() (TR, TR, TA, TA) { return _v.R.Value(), _v.R.Value(), _v.A.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RGRR() (TR, TG, TR, TR) { return _v.R.Value(), _v.G.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RGRG() (TR, TG, TR, TG) { return _v.R.Value(), _v.G.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RGRB() (TR, TG, TR, TB) { return _v.R.Value(), _v.G.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RGRA() (TR, TG, TR, TA) { return _v.R.Value(), _v.G.Value(), _v.R.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RGGR() (TR, TG, TG, TR) { return _v.R.Value(), _v.G.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RGGG() (TR, TG, TG, TG) { return _v.R.Value(), _v.G.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RGGB() (TR, TG, TG, TB) { return _v.R.Value(), _v.G.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RGGA() (TR, TG, TG, TA) { return _v.R.Value(), _v.G.Value(), _v.G.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RGBR() (TR, TG, TB, TR) { return _v.R.Value(), _v.G.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RGBG() (TR, TG, TB, TG) { return _v.R.Value(), _v.G.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RGBB() (TR, TG, TB, TB) { return _v.R.Value(), _v.G.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RGBA() (TR, TG, TB, TA) { return _v.R.Value(), _v.G.Value(), _v.B.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RGAR() (TR, TG, TA, TR) { return _v.R.Value(), _v.G.Value(), _v.A.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RGAG() (TR, TG, TA, TG) { return _v.R.Value(), _v.G.Value(), _v.A.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RGAB() (TR, TG, TA, TB) { return _v.R.Value(), _v.G.Value(), _v.A.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RGAA() (TR, TG, TA, TA) { return _v.R.Value(), _v.G.Value(), _v.A.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RBRR() (TR, TB, TR, TR) { return _v.R.Value(), _v.B.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RBRG() (TR, TB, TR, TG) { return _v.R.Value(), _v.B.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RBRB() (TR, TB, TR, TB) { return _v.R.Value(), _v.B.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RBRA() (TR, TB, TR, TA) { return _v.R.Value(), _v.B.Value(), _v.R.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RBGR() (TR, TB, TG, TR) { return _v.R.Value(), _v.B.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RBGG() (TR, TB, TG, TG) { return _v.R.Value(), _v.B.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RBGB() (TR, TB, TG, TB) { return _v.R.Value(), _v.B.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RBGA() (TR, TB, TG, TA) { return _v.R.Value(), _v.B.Value(), _v.G.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RBBR() (TR, TB, TB, TR) { return _v.R.Value(), _v.B.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RBBG() (TR, TB, TB, TG) { return _v.R.Value(), _v.B.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RBBB() (TR, TB, TB, TB) { return _v.R.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RBBA() (TR, TB, TB, TA) { return _v.R.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RBAR() (TR, TB, TA, TR) { return _v.R.Value(), _v.B.Value(), _v.A.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RBAG() (TR, TB, TA, TG) { return _v.R.Value(), _v.B.Value(), _v.A.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RBAB() (TR, TB, TA, TB) { return _v.R.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RBAA() (TR, TB, TA, TA) { return _v.R.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RARR() (TR, TA, TR, TR) { return _v.R.Value(), _v.A.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RARG() (TR, TA, TR, TG) { return _v.R.Value(), _v.A.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RARB() (TR, TA, TR, TB) { return _v.R.Value(), _v.A.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RARA() (TR, TA, TR, TA) { return _v.R.Value(), _v.A.Value(), _v.R.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RAGR() (TR, TA, TG, TR) { return _v.R.Value(), _v.A.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RAGG() (TR, TA, TG, TG) { return _v.R.Value(), _v.A.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RAGB() (TR, TA, TG, TB) { return _v.R.Value(), _v.A.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RAGA() (TR, TA, TG, TA) { return _v.R.Value(), _v.A.Value(), _v.G.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RABR() (TR, TA, TB, TR) { return _v.R.Value(), _v.A.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RABG() (TR, TA, TB, TG) { return _v.R.Value(), _v.A.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RABB() (TR, TA, TB, TB) { return _v.R.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RABA() (TR, TA, TB, TA) { return _v.R.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RAAR() (TR, TA, TA, TR) { return _v.R.Value(), _v.A.Value(), _v.A.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RAAG() (TR, TA, TA, TG) { return _v.R.Value(), _v.A.Value(), _v.A.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RAAB() (TR, TA, TA, TB) { return _v.R.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) RAAA() (TR, TA, TA, TA) { return _v.R.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GRRR() (TG, TR, TR, TR) { return _v.G.Value(), _v.R.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GRRG() (TG, TR, TR, TG) { return _v.G.Value(), _v.R.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GRRB() (TG, TR, TR, TB) { return _v.G.Value(), _v.R.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GRRA() (TG, TR, TR, TA) { return _v.G.Value(), _v.R.Value(), _v.R.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GRGR() (TG, TR, TG, TR) { return _v.G.Value(), _v.R.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GRGG() (TG, TR, TG, TG) { return _v.G.Value(), _v.R.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GRGB() (TG, TR, TG, TB) { return _v.G.Value(), _v.R.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GRGA() (TG, TR, TG, TA) { return _v.G.Value(), _v.R.Value(), _v.G.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GRBR() (TG, TR, TB, TR) { return _v.G.Value(), _v.R.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GRBG() (TG, TR, TB, TG) { return _v.G.Value(), _v.R.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GRBB() (TG, TR, TB, TB) { return _v.G.Value(), _v.R.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GRBA() (TG, TR, TB, TA) { return _v.G.Value(), _v.R.Value(), _v.B.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GRAR() (TG, TR, TA, TR) { return _v.G.Value(), _v.R.Value(), _v.A.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GRAG() (TG, TR, TA, TG) { return _v.G.Value(), _v.R.Value(), _v.A.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GRAB() (TG, TR, TA, TB) { return _v.G.Value(), _v.R.Value(), _v.A.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GRAA() (TG, TR, TA, TA) { return _v.G.Value(), _v.R.Value(), _v.A.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GGRR() (TG, TG, TR, TR) { return _v.G.Value(), _v.G.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GGRG() (TG, TG, TR, TG) { return _v.G.Value(), _v.G.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GGRB() (TG, TG, TR, TB) { return _v.G.Value(), _v.G.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GGRA() (TG, TG, TR, TA) { return _v.G.Value(), _v.G.Value(), _v.R.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GGGR() (TG, TG, TG, TR) { return _v.G.Value(), _v.G.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GGGG() (TG, TG, TG, TG) { return _v.G.Value(), _v.G.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GGGB() (TG, TG, TG, TB) { return _v.G.Value(), _v.G.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GGGA() (TG, TG, TG, TA) { return _v.G.Value(), _v.G.Value(), _v.G.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GGBR() (TG, TG, TB, TR) { return _v.G.Value(), _v.G.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GGBG() (TG, TG, TB, TG) { return _v.G.Value(), _v.G.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GGBB() (TG, TG, TB, TB) { return _v.G.Value(), _v.G.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GGBA() (TG, TG, TB, TA) { return _v.G.Value(), _v.G.Value(), _v.B.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GGAR() (TG, TG, TA, TR) { return _v.G.Value(), _v.G.Value(), _v.A.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GGAG() (TG, TG, TA, TG) { return _v.G.Value(), _v.G.Value(), _v.A.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GGAB() (TG, TG, TA, TB) { return _v.G.Value(), _v.G.Value(), _v.A.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GGAA() (TG, TG, TA, TA) { return _v.G.Value(), _v.G.Value(), _v.A.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GBRR() (TG, TB, TR, TR) { return _v.G.Value(), _v.B.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GBRG() (TG, TB, TR, TG) { return _v.G.Value(), _v.B.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GBRB() (TG, TB, TR, TB) { return _v.G.Value(), _v.B.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GBRA() (TG, TB, TR, TA) { return _v.G.Value(), _v.B.Value(), _v.R.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GBGR() (TG, TB, TG, TR) { return _v.G.Value(), _v.B.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GBGG() (TG, TB, TG, TG) { return _v.G.Value(), _v.B.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GBGB() (TG, TB, TG, TB) { return _v.G.Value(), _v.B.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GBGA() (TG, TB, TG, TA) { return _v.G.Value(), _v.B.Value(), _v.G.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GBBR() (TG, TB, TB, TR) { return _v.G.Value(), _v.B.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GBBG() (TG, TB, TB, TG) { return _v.G.Value(), _v.B.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GBBB() (TG, TB, TB, TB) { return _v.G.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GBBA() (TG, TB, TB, TA) { return _v.G.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GBAR() (TG, TB, TA, TR) { return _v.G.Value(), _v.B.Value(), _v.A.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GBAG() (TG, TB, TA, TG) { return _v.G.Value(), _v.B.Value(), _v.A.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GBAB() (TG, TB, TA, TB) { return _v.G.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GBAA() (TG, TB, TA, TA) { return _v.G.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GARR() (TG, TA, TR, TR) { return _v.G.Value(), _v.A.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GARG() (TG, TA, TR, TG) { return _v.G.Value(), _v.A.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GARB() (TG, TA, TR, TB) { return _v.G.Value(), _v.A.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GARA() (TG, TA, TR, TA) { return _v.G.Value(), _v.A.Value(), _v.R.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GAGR() (TG, TA, TG, TR) { return _v.G.Value(), _v.A.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GAGG() (TG, TA, TG, TG) { return _v.G.Value(), _v.A.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GAGB() (TG, TA, TG, TB) { return _v.G.Value(), _v.A.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GAGA() (TG, TA, TG, TA) { return _v.G.Value(), _v.A.Value(), _v.G.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GABR() (TG, TA, TB, TR) { return _v.G.Value(), _v.A.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GABG() (TG, TA, TB, TG) { return _v.G.Value(), _v.A.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GABB() (TG, TA, TB, TB) { return _v.G.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GABA() (TG, TA, TB, TA) { return _v.G.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GAAR() (TG, TA, TA, TR) { return _v.G.Value(), _v.A.Value(), _v.A.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GAAG() (TG, TA, TA, TG) { return _v.G.Value(), _v.A.Value(), _v.A.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GAAB() (TG, TA, TA, TB) { return _v.G.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) GAAA() (TG, TA, TA, TA) { return _v.G.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BRRR() (TB, TR, TR, TR) { return _v.B.Value(), _v.R.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BRRG() (TB, TR, TR, TG) { return _v.B.Value(), _v.R.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BRRB() (TB, TR, TR, TB) { return _v.B.Value(), _v.R.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BRRA() (TB, TR, TR, TA) { return _v.B.Value(), _v.R.Value(), _v.R.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BRGR() (TB, TR, TG, TR) { return _v.B.Value(), _v.R.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BRGG() (TB, TR, TG, TG) { return _v.B.Value(), _v.R.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BRGB() (TB, TR, TG, TB) { return _v.B.Value(), _v.R.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BRGA() (TB, TR, TG, TA) { return _v.B.Value(), _v.R.Value(), _v.G.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BRBR() (TB, TR, TB, TR) { return _v.B.Value(), _v.R.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BRBG() (TB, TR, TB, TG) { return _v.B.Value(), _v.R.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BRBB() (TB, TR, TB, TB) { return _v.B.Value(), _v.R.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BRBA() (TB, TR, TB, TA) { return _v.B.Value(), _v.R.Value(), _v.B.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BRAR() (TB, TR, TA, TR) { return _v.B.Value(), _v.R.Value(), _v.A.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BRAG() (TB, TR, TA, TG) { return _v.B.Value(), _v.R.Value(), _v.A.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BRAB() (TB, TR, TA, TB) { return _v.B.Value(), _v.R.Value(), _v.A.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BRAA() (TB, TR, TA, TA) { return _v.B.Value(), _v.R.Value(), _v.A.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BGRR() (TB, TG, TR, TR) { return _v.B.Value(), _v.G.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BGRG() (TB, TG, TR, TG) { return _v.B.Value(), _v.G.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BGRB() (TB, TG, TR, TB) { return _v.B.Value(), _v.G.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BGRA() (TB, TG, TR, TA) { return _v.B.Value(), _v.G.Value(), _v.R.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BGGR() (TB, TG, TG, TR) { return _v.B.Value(), _v.G.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BGGG() (TB, TG, TG, TG) { return _v.B.Value(), _v.G.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BGGB() (TB, TG, TG, TB) { return _v.B.Value(), _v.G.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BGGA() (TB, TG, TG, TA) { return _v.B.Value(), _v.G.Value(), _v.G.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BGBR() (TB, TG, TB, TR) { return _v.B.Value(), _v.G.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BGBG() (TB, TG, TB, TG) { return _v.B.Value(), _v.G.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BGBB() (TB, TG, TB, TB) { return _v.B.Value(), _v.G.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BGBA() (TB, TG, TB, TA) { return _v.B.Value(), _v.G.Value(), _v.B.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BGAR() (TB, TG, TA, TR) { return _v.B.Value(), _v.G.Value(), _v.A.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BGAG() (TB, TG, TA, TG) { return _v.B.Value(), _v.G.Value(), _v.A.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BGAB() (TB, TG, TA, TB) { return _v.B.Value(), _v.G.Value(), _v.A.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BGAA() (TB, TG, TA, TA) { return _v.B.Value(), _v.G.Value(), _v.A.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BBRR() (TB, TB, TR, TR) { return _v.B.Value(), _v.B.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BBRG() (TB, TB, TR, TG) { return _v.B.Value(), _v.B.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BBRB() (TB, TB, TR, TB) { return _v.B.Value(), _v.B.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BBRA() (TB, TB, TR, TA) { return _v.B.Value(), _v.B.Value(), _v.R.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BBGR() (TB, TB, TG, TR) { return _v.B.Value(), _v.B.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BBGG() (TB, TB, TG, TG) { return _v.B.Value(), _v.B.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BBGB() (TB, TB, TG, TB) { return _v.B.Value(), _v.B.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BBGA() (TB, TB, TG, TA) { return _v.B.Value(), _v.B.Value(), _v.G.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BBBR() (TB, TB, TB, TR) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BBBG() (TB, TB, TB, TG) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BBBB() (TB, TB, TB, TB) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BBBA() (TB, TB, TB, TA) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BBAR() (TB, TB, TA, TR) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BBAG() (TB, TB, TA, TG) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BBAB() (TB, TB, TA, TB) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BBAA() (TB, TB, TA, TA) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BARR() (TB, TA, TR, TR) { return _v.B.Value(), _v.A.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BARG() (TB, TA, TR, TG) { return _v.B.Value(), _v.A.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BARB() (TB, TA, TR, TB) { return _v.B.Value(), _v.A.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BARA() (TB, TA, TR, TA) { return _v.B.Value(), _v.A.Value(), _v.R.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BAGR() (TB, TA, TG, TR) { return _v.B.Value(), _v.A.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BAGG() (TB, TA, TG, TG) { return _v.B.Value(), _v.A.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BAGB() (TB, TA, TG, TB) { return _v.B.Value(), _v.A.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BAGA() (TB, TA, TG, TA) { return _v.B.Value(), _v.A.Value(), _v.G.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BABR() (TB, TA, TB, TR) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BABG() (TB, TA, TB, TG) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BABB() (TB, TA, TB, TB) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BABA() (TB, TA, TB, TA) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BAAR() (TB, TA, TA, TR) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BAAG() (TB, TA, TA, TG) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BAAB() (TB, TA, TA, TB) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) BAAA() (TB, TA, TA, TA) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ARRR() (TA, TR, TR, TR) { return _v.A.Value(), _v.R.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ARRG() (TA, TR, TR, TG) { return _v.A.Value(), _v.R.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ARRB() (TA, TR, TR, TB) { return _v.A.Value(), _v.R.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ARRA() (TA, TR, TR, TA) { return _v.A.Value(), _v.R.Value(), _v.R.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ARGR() (TA, TR, TG, TR) { return _v.A.Value(), _v.R.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ARGG() (TA, TR, TG, TG) { return _v.A.Value(), _v.R.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ARGB() (TA, TR, TG, TB) { return _v.A.Value(), _v.R.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ARGA() (TA, TR, TG, TA) { return _v.A.Value(), _v.R.Value(), _v.G.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ARBR() (TA, TR, TB, TR) { return _v.A.Value(), _v.R.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ARBG() (TA, TR, TB, TG) { return _v.A.Value(), _v.R.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ARBB() (TA, TR, TB, TB) { return _v.A.Value(), _v.R.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ARBA() (TA, TR, TB, TA) { return _v.A.Value(), _v.R.Value(), _v.B.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ARAR() (TA, TR, TA, TR) { return _v.A.Value(), _v.R.Value(), _v.A.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ARAG() (TA, TR, TA, TG) { return _v.A.Value(), _v.R.Value(), _v.A.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ARAB() (TA, TR, TA, TB) { return _v.A.Value(), _v.R.Value(), _v.A.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ARAA() (TA, TR, TA, TA) { return _v.A.Value(), _v.R.Value(), _v.A.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AGRR() (TA, TG, TR, TR) { return _v.A.Value(), _v.G.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AGRG() (TA, TG, TR, TG) { return _v.A.Value(), _v.G.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AGRB() (TA, TG, TR, TB) { return _v.A.Value(), _v.G.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AGRA() (TA, TG, TR, TA) { return _v.A.Value(), _v.G.Value(), _v.R.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AGGR() (TA, TG, TG, TR) { return _v.A.Value(), _v.G.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AGGG() (TA, TG, TG, TG) { return _v.A.Value(), _v.G.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AGGB() (TA, TG, TG, TB) { return _v.A.Value(), _v.G.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AGGA() (TA, TG, TG, TA) { return _v.A.Value(), _v.G.Value(), _v.G.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AGBR() (TA, TG, TB, TR) { return _v.A.Value(), _v.G.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AGBG() (TA, TG, TB, TG) { return _v.A.Value(), _v.G.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AGBB() (TA, TG, TB, TB) { return _v.A.Value(), _v.G.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AGBA() (TA, TG, TB, TA) { return _v.A.Value(), _v.G.Value(), _v.B.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AGAR() (TA, TG, TA, TR) { return _v.A.Value(), _v.G.Value(), _v.A.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AGAG() (TA, TG, TA, TG) { return _v.A.Value(), _v.G.Value(), _v.A.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AGAB() (TA, TG, TA, TB) { return _v.A.Value(), _v.G.Value(), _v.A.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AGAA() (TA, TG, TA, TA) { return _v.A.Value(), _v.G.Value(), _v.A.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ABRR() (TA, TB, TR, TR) { return _v.A.Value(), _v.B.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ABRG() (TA, TB, TR, TG) { return _v.A.Value(), _v.B.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ABRB() (TA, TB, TR, TB) { return _v.A.Value(), _v.B.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ABRA() (TA, TB, TR, TA) { return _v.A.Value(), _v.B.Value(), _v.R.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ABGR() (TA, TB, TG, TR) { return _v.A.Value(), _v.B.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ABGG() (TA, TB, TG, TG) { return _v.A.Value(), _v.B.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ABGB() (TA, TB, TG, TB) { return _v.A.Value(), _v.B.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ABGA() (TA, TB, TG, TA) { return _v.A.Value(), _v.B.Value(), _v.G.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ABBR() (TA, TB, TB, TR) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ABBG() (TA, TB, TB, TG) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ABBB() (TA, TB, TB, TB) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ABBA() (TA, TB, TB, TA) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ABAR() (TA, TB, TA, TR) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ABAG() (TA, TB, TA, TG) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ABAB() (TA, TB, TA, TB) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) ABAA() (TA, TB, TA, TA) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AARR() (TA, TA, TR, TR) { return _v.A.Value(), _v.A.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AARG() (TA, TA, TR, TG) { return _v.A.Value(), _v.A.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AARB() (TA, TA, TR, TB) { return _v.A.Value(), _v.A.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AARA() (TA, TA, TR, TA) { return _v.A.Value(), _v.A.Value(), _v.R.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AAGR() (TA, TA, TG, TR) { return _v.A.Value(), _v.A.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AAGG() (TA, TA, TG, TG) { return _v.A.Value(), _v.A.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AAGB() (TA, TA, TG, TB) { return _v.A.Value(), _v.A.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AAGA() (TA, TA, TG, TA) { return _v.A.Value(), _v.A.Value(), _v.G.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AABR() (TA, TA, TB, TR) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AABG() (TA, TA, TB, TG) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AABB() (TA, TA, TB, TB) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AABA() (TA, TA, TB, TA) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AAAR() (TA, TA, TA, TR) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.R.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AAAG() (TA, TA, TA, TG) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.G.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AAAB() (TA, TA, TA, TB) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v *RGBATyped[TR, TG, TB, TA]) AAAA() (TA, TA, TA, TA) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
