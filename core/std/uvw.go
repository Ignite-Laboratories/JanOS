// Code generated by 'gen/letters'; DO NOT EDIT.
//go:generate go run ../gen/letters -pkg std -name UVW -nameL uvw -cmpts U,V,W -cmptsL u,v,w -out ../std/uvw.go
package std

import (
	"core/sys/atlas"
	"core/sys/name/format"
	"core/sys/num"
	"core/sys/num/bounded"
	"core/sys/support"
	"fmt"
	"strings"
)

// UVW is a 3D vector of like-typed bounded.Numeric components.
//
// NOTE: If you'd like asymmetric types, please see UVWTyped.
type UVW[T num.Primitive] = UVWTyped[T, T, T]

// UVWTyped is a 3D vector of asymmetrically typed bounded.Numeric components.
//
// NOTE: If you'd like symmetric types, please see UVW.
type UVWTyped[TU num.Primitive, TV num.Primitive, TW num.Primitive] struct {
	Entity
	U bounded.Numeric[TU]
	V bounded.Numeric[TV]
	W bounded.Numeric[TW]
}

func NewUVW[T num.Primitive](u T, v T, w T) *UVW[T] {
	typed := UVW[T](*NewUVWTyped[T, T, T](u, v, w))
	return &typed
}

func NewUVWTyped[TU num.Primitive, TV num.Primitive, TW num.Primitive](u TU, v TV, w TW) *UVWTyped[TU, TV, TW] {
	minU := num.MinValue[TU]()
	maxU := num.MaxValue[TU]()
	minV := num.MinValue[TV]()
	maxV := num.MaxValue[TV]()
	minW := num.MinValue[TW]()
	maxW := num.MaxValue[TW]()

	_v := &UVWTyped[TU, TV, TW]{}
	_v.Entity = NewEntity[format.Default]()
	_v.SetBoundaries(minU, maxU, minV, maxV, minW, maxW)
	_v.Set(u, v, w)
	return _v
}

func (_v *UVWTyped[TU, TV, TW]) Name() string {
	return _v.GivenName.Name
}

func (_v *UVWTyped[TU, TV, TW]) SetName(name string) *UVWTyped[TU, TV, TW] {
	_v.GivenName.Name = name
	return _v
}

func (_v *UVWTyped[TU, TV, TW]) Set(u TU, v TV, w TW) *UVWTyped[TU, TV, TW] {
	_ = _v.U.Set(u)
	_ = _v.V.Set(v)
	_ = _v.W.Set(w)
	return _v
}

func (_v *UVWTyped[TU, TV, TW]) SetClamp(clamp bool) *UVWTyped[TU, TV, TW] {
	_v.U.Clamp = clamp
	_v.V.Clamp = clamp
	_v.W.Clamp = clamp
	return _v
}

func (_v *UVWTyped[TU, TV, TW]) SetBoundaries(minU, maxU TU, minV, maxV TV, minW, maxW TW) *UVWTyped[TU, TV, TW] {
	_ = _v.U.SetBoundaries(minU, maxU)
	_ = _v.V.SetBoundaries(minV, maxV)
	_ = _v.W.SetBoundaries(minW, maxW)
	return _v
}

func (_v *UVWTyped[TU, TV, TW]) Component(index uint) (bounded.INumeric, error) {
	switch index {
	case 0:
		return &_v.U, nil
	case 1:
		return &_v.V, nil
	case 2:
		return &_v.W, nil
	default:
		return nil, fmt.Errorf("cannot get component index %d of an UVW vector", index)
	}
}

func (_v *UVWTyped[TU, TV, TW]) Components() []bounded.INumeric {
	return []bounded.INumeric{&_v.U, &_v.V, &_v.W}
}

func (_v *UVWTyped[TU, TV, TW]) ComponentByName(name string) (bounded.INumeric, error) {
	switch strings.ToLower(name) {
	case "u":
		return &_v.U, nil
	case "v":
		return &_v.V, nil
	case "w":
		return &_v.W, nil
	default:
		return nil, fmt.Errorf("cannot get component \"%s\" of an UVW vector", name)
	}
}

func (_v *UVWTyped[TU, TV, TW]) ComponentLen() uint {
	return 3
}

func (_v *UVWTyped[TU, TV, TW]) SetComponent(index uint, value any) error {
	switch index {
	case 0:
		 _v.U.Set(value.(TU))
	case 1:
		 _v.V.Set(value.(TV))
	case 2:
		 _v.W.Set(value.(TW))
	default:
		return fmt.Errorf("cannot set component index %d of an UVW vector", index)
	}
	return nil
}

func (_v *UVWTyped[TU, TV, TW]) SetComponents(values []any) error {
	if len(values) != 3 {
		return fmt.Errorf("cannot set %d components of 3D vector UVW", len(values), )
	}
	if _, ok := values[0].(TU); !ok {
		return fmt.Errorf("expected type %T for component U, got type %T", TU(0), values[0])	}
	if _, ok := values[1].(TV); !ok {
		return fmt.Errorf("expected type %T for component V, got type %T", TV(0), values[1])	}
	if _, ok := values[2].(TW); !ok {
		return fmt.Errorf("expected type %T for component W, got type %T", TW(0), values[2])	}
	_v.U.Set(values[0].(TU))
	_v.V.Set(values[1].(TV))
	_v.W.Set(values[2].(TW))
	return nil
}

func (_v *UVWTyped[TU, TV, TW]) SetComponentByName(name string, value any) error {
	switch strings.ToLower(name) {
	case "u":
		 _v.U.Set(value.(TU))
	case "v":
		 _v.V.Set(value.(TV))
	case "w":
		 _v.W.Set(value.(TW))
	default:
		return fmt.Errorf("cannot set component \"%s\" of an UVW vector", name)
	}
	return nil
}

func (_v UVWTyped[TU, TV, TW]) String() string {
	if atlas.CompactVectors {
		return fmt.Sprintf("{u: %v, v: %v, w: %v}", _v.U.String(), _v.V.String(), _v.W.String())
	}
	 if support.AllSameTypes(TU(0), TV(0), TW(0)) {
		return fmt.Sprintf("uvw[%T]{%v, %v, %v}(\"%v\")", TU(0), _v.U.String(), _v.V.String(), _v.W.String(), _v.GivenName.Name)
	}
	return fmt.Sprintf("uvw[%T, %T, %T]{%v, %v, %v}(\"%v\")", TU(0), TV(0), TW(0), _v.U.String(), _v.V.String(), _v.W.String(), _v.GivenName.Name)
}

/**
Swizzling

	NOTE: This is a regular expression to find and replace swizzle functions into a one-liner if the auto formatter ever kicks in

	Find -
	func \*\((.*?)\) ([A-Z]{2,4})\(\) \((.*?)\)[ ]*\{[\n\t ]*return(.*?)[\n\t ]*\}

	Replace -
	func \*($1) $2() ($3) { return$4 }
*/

func (_v *UVWTyped[TU, TV, TW]) UU() (TU, TU) { return _v.U.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) UV() (TU, TV) { return _v.U.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) UW() (TU, TW) { return _v.U.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) VU() (TV, TU) { return _v.V.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) VV() (TV, TV) { return _v.V.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) VW() (TV, TW) { return _v.V.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) WU() (TW, TU) { return _v.W.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) WV() (TW, TV) { return _v.W.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) WW() (TW, TW) { return _v.W.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) UUU() (TU, TU, TU) { return _v.U.Value(), _v.U.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) UUV() (TU, TU, TV) { return _v.U.Value(), _v.U.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) UUW() (TU, TU, TW) { return _v.U.Value(), _v.U.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) UVU() (TU, TV, TU) { return _v.U.Value(), _v.V.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) UVV() (TU, TV, TV) { return _v.U.Value(), _v.V.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) UVW() (TU, TV, TW) { return _v.U.Value(), _v.V.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) UWU() (TU, TW, TU) { return _v.U.Value(), _v.W.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) UWV() (TU, TW, TV) { return _v.U.Value(), _v.W.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) UWW() (TU, TW, TW) { return _v.U.Value(), _v.W.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) VUU() (TV, TU, TU) { return _v.V.Value(), _v.U.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) VUV() (TV, TU, TV) { return _v.V.Value(), _v.U.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) VUW() (TV, TU, TW) { return _v.V.Value(), _v.U.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) VVU() (TV, TV, TU) { return _v.V.Value(), _v.V.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) VVV() (TV, TV, TV) { return _v.V.Value(), _v.V.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) VVW() (TV, TV, TW) { return _v.V.Value(), _v.V.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) VWU() (TV, TW, TU) { return _v.V.Value(), _v.W.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) VWV() (TV, TW, TV) { return _v.V.Value(), _v.W.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) VWW() (TV, TW, TW) { return _v.V.Value(), _v.W.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) WUU() (TW, TU, TU) { return _v.W.Value(), _v.U.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) WUV() (TW, TU, TV) { return _v.W.Value(), _v.U.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) WUW() (TW, TU, TW) { return _v.W.Value(), _v.U.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) WVU() (TW, TV, TU) { return _v.W.Value(), _v.V.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) WVV() (TW, TV, TV) { return _v.W.Value(), _v.V.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) WVW() (TW, TV, TW) { return _v.W.Value(), _v.V.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) WWU() (TW, TW, TU) { return _v.W.Value(), _v.W.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) WWV() (TW, TW, TV) { return _v.W.Value(), _v.W.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) WWW() (TW, TW, TW) { return _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) UUUU() (TU, TU, TU, TU) { return _v.U.Value(), _v.U.Value(), _v.U.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) UUUV() (TU, TU, TU, TV) { return _v.U.Value(), _v.U.Value(), _v.U.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) UUUW() (TU, TU, TU, TW) { return _v.U.Value(), _v.U.Value(), _v.U.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) UUVU() (TU, TU, TV, TU) { return _v.U.Value(), _v.U.Value(), _v.V.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) UUVV() (TU, TU, TV, TV) { return _v.U.Value(), _v.U.Value(), _v.V.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) UUVW() (TU, TU, TV, TW) { return _v.U.Value(), _v.U.Value(), _v.V.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) UUWU() (TU, TU, TW, TU) { return _v.U.Value(), _v.U.Value(), _v.W.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) UUWV() (TU, TU, TW, TV) { return _v.U.Value(), _v.U.Value(), _v.W.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) UUWW() (TU, TU, TW, TW) { return _v.U.Value(), _v.U.Value(), _v.W.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) UVUU() (TU, TV, TU, TU) { return _v.U.Value(), _v.V.Value(), _v.U.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) UVUV() (TU, TV, TU, TV) { return _v.U.Value(), _v.V.Value(), _v.U.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) UVUW() (TU, TV, TU, TW) { return _v.U.Value(), _v.V.Value(), _v.U.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) UVVU() (TU, TV, TV, TU) { return _v.U.Value(), _v.V.Value(), _v.V.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) UVVV() (TU, TV, TV, TV) { return _v.U.Value(), _v.V.Value(), _v.V.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) UVVW() (TU, TV, TV, TW) { return _v.U.Value(), _v.V.Value(), _v.V.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) UVWU() (TU, TV, TW, TU) { return _v.U.Value(), _v.V.Value(), _v.W.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) UVWV() (TU, TV, TW, TV) { return _v.U.Value(), _v.V.Value(), _v.W.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) UVWW() (TU, TV, TW, TW) { return _v.U.Value(), _v.V.Value(), _v.W.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) UWUU() (TU, TW, TU, TU) { return _v.U.Value(), _v.W.Value(), _v.U.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) UWUV() (TU, TW, TU, TV) { return _v.U.Value(), _v.W.Value(), _v.U.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) UWUW() (TU, TW, TU, TW) { return _v.U.Value(), _v.W.Value(), _v.U.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) UWVU() (TU, TW, TV, TU) { return _v.U.Value(), _v.W.Value(), _v.V.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) UWVV() (TU, TW, TV, TV) { return _v.U.Value(), _v.W.Value(), _v.V.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) UWVW() (TU, TW, TV, TW) { return _v.U.Value(), _v.W.Value(), _v.V.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) UWWU() (TU, TW, TW, TU) { return _v.U.Value(), _v.W.Value(), _v.W.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) UWWV() (TU, TW, TW, TV) { return _v.U.Value(), _v.W.Value(), _v.W.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) UWWW() (TU, TW, TW, TW) { return _v.U.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) VUUU() (TV, TU, TU, TU) { return _v.V.Value(), _v.U.Value(), _v.U.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) VUUV() (TV, TU, TU, TV) { return _v.V.Value(), _v.U.Value(), _v.U.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) VUUW() (TV, TU, TU, TW) { return _v.V.Value(), _v.U.Value(), _v.U.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) VUVU() (TV, TU, TV, TU) { return _v.V.Value(), _v.U.Value(), _v.V.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) VUVV() (TV, TU, TV, TV) { return _v.V.Value(), _v.U.Value(), _v.V.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) VUVW() (TV, TU, TV, TW) { return _v.V.Value(), _v.U.Value(), _v.V.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) VUWU() (TV, TU, TW, TU) { return _v.V.Value(), _v.U.Value(), _v.W.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) VUWV() (TV, TU, TW, TV) { return _v.V.Value(), _v.U.Value(), _v.W.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) VUWW() (TV, TU, TW, TW) { return _v.V.Value(), _v.U.Value(), _v.W.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) VVUU() (TV, TV, TU, TU) { return _v.V.Value(), _v.V.Value(), _v.U.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) VVUV() (TV, TV, TU, TV) { return _v.V.Value(), _v.V.Value(), _v.U.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) VVUW() (TV, TV, TU, TW) { return _v.V.Value(), _v.V.Value(), _v.U.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) VVVU() (TV, TV, TV, TU) { return _v.V.Value(), _v.V.Value(), _v.V.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) VVVV() (TV, TV, TV, TV) { return _v.V.Value(), _v.V.Value(), _v.V.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) VVVW() (TV, TV, TV, TW) { return _v.V.Value(), _v.V.Value(), _v.V.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) VVWU() (TV, TV, TW, TU) { return _v.V.Value(), _v.V.Value(), _v.W.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) VVWV() (TV, TV, TW, TV) { return _v.V.Value(), _v.V.Value(), _v.W.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) VVWW() (TV, TV, TW, TW) { return _v.V.Value(), _v.V.Value(), _v.W.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) VWUU() (TV, TW, TU, TU) { return _v.V.Value(), _v.W.Value(), _v.U.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) VWUV() (TV, TW, TU, TV) { return _v.V.Value(), _v.W.Value(), _v.U.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) VWUW() (TV, TW, TU, TW) { return _v.V.Value(), _v.W.Value(), _v.U.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) VWVU() (TV, TW, TV, TU) { return _v.V.Value(), _v.W.Value(), _v.V.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) VWVV() (TV, TW, TV, TV) { return _v.V.Value(), _v.W.Value(), _v.V.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) VWVW() (TV, TW, TV, TW) { return _v.V.Value(), _v.W.Value(), _v.V.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) VWWU() (TV, TW, TW, TU) { return _v.V.Value(), _v.W.Value(), _v.W.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) VWWV() (TV, TW, TW, TV) { return _v.V.Value(), _v.W.Value(), _v.W.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) VWWW() (TV, TW, TW, TW) { return _v.V.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) WUUU() (TW, TU, TU, TU) { return _v.W.Value(), _v.U.Value(), _v.U.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) WUUV() (TW, TU, TU, TV) { return _v.W.Value(), _v.U.Value(), _v.U.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) WUUW() (TW, TU, TU, TW) { return _v.W.Value(), _v.U.Value(), _v.U.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) WUVU() (TW, TU, TV, TU) { return _v.W.Value(), _v.U.Value(), _v.V.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) WUVV() (TW, TU, TV, TV) { return _v.W.Value(), _v.U.Value(), _v.V.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) WUVW() (TW, TU, TV, TW) { return _v.W.Value(), _v.U.Value(), _v.V.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) WUWU() (TW, TU, TW, TU) { return _v.W.Value(), _v.U.Value(), _v.W.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) WUWV() (TW, TU, TW, TV) { return _v.W.Value(), _v.U.Value(), _v.W.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) WUWW() (TW, TU, TW, TW) { return _v.W.Value(), _v.U.Value(), _v.W.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) WVUU() (TW, TV, TU, TU) { return _v.W.Value(), _v.V.Value(), _v.U.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) WVUV() (TW, TV, TU, TV) { return _v.W.Value(), _v.V.Value(), _v.U.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) WVUW() (TW, TV, TU, TW) { return _v.W.Value(), _v.V.Value(), _v.U.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) WVVU() (TW, TV, TV, TU) { return _v.W.Value(), _v.V.Value(), _v.V.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) WVVV() (TW, TV, TV, TV) { return _v.W.Value(), _v.V.Value(), _v.V.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) WVVW() (TW, TV, TV, TW) { return _v.W.Value(), _v.V.Value(), _v.V.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) WVWU() (TW, TV, TW, TU) { return _v.W.Value(), _v.V.Value(), _v.W.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) WVWV() (TW, TV, TW, TV) { return _v.W.Value(), _v.V.Value(), _v.W.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) WVWW() (TW, TV, TW, TW) { return _v.W.Value(), _v.V.Value(), _v.W.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) WWUU() (TW, TW, TU, TU) { return _v.W.Value(), _v.W.Value(), _v.U.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) WWUV() (TW, TW, TU, TV) { return _v.W.Value(), _v.W.Value(), _v.U.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) WWUW() (TW, TW, TU, TW) { return _v.W.Value(), _v.W.Value(), _v.U.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) WWVU() (TW, TW, TV, TU) { return _v.W.Value(), _v.W.Value(), _v.V.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) WWVV() (TW, TW, TV, TV) { return _v.W.Value(), _v.W.Value(), _v.V.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) WWVW() (TW, TW, TV, TW) { return _v.W.Value(), _v.W.Value(), _v.V.Value(), _v.W.Value() }
func (_v *UVWTyped[TU, TV, TW]) WWWU() (TW, TW, TW, TU) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.U.Value() }
func (_v *UVWTyped[TU, TV, TW]) WWWV() (TW, TW, TW, TV) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.V.Value() }
func (_v *UVWTyped[TU, TV, TW]) WWWW() (TW, TW, TW, TW) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
