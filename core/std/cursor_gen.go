// Code generated by 'gen/letters/main'; DO NOT EDIT.
//go:generate go run ../gen/letters/main -pkg std -name _cursor -nameL _cursor -cmpts I -cmptsL i -out ../std/cursor_gen.go
package std

import (
	"core/sys/atlas"
	"core/sys/num"
	"core/sys/num/bounded"
	"core/sys/support"
	"fmt"
	"strings"
)

// _cursor is a 1D vector of asymmetrically typed bounded.Numeric components.
type _cursor[TI num.Primitive] struct {
	Entity
	I bounded.Numeric[TI]
}

func (_v *_cursor[TI]) Name() string {
	return _v.GivenName.Name
}

func (_v *_cursor[TI]) SetName(name string) *_cursor[TI] {
	_v.GivenName.Name = name
	return _v
}

func (_v *_cursor[TI]) Set(i TI) *_cursor[TI] {
	_ = _v.I.Set(i)
	return _v
}

func (_v *_cursor[TI]) SetClamp(clamp bool) *_cursor[TI] {
	_v.I.Clamp = clamp
	return _v
}

func (_v *_cursor[TI]) SetBoundaries(minI, maxI TI) *_cursor[TI] {
	_ = _v.I.SetBoundaries(minI, maxI)
	return _v
}

func (_v *_cursor[TI]) Component(index uint) (bounded.INumeric, error) {
	switch index {
	case 0:
		return &_v.I, nil
	default:
		return nil, fmt.Errorf("cannot get component index %d of an _cursor vector", index)
	}
}

func (_v *_cursor[TI]) Components() []bounded.INumeric {
	return []bounded.INumeric{&_v.I}
}

func (_v *_cursor[TI]) ComponentByName(name string) (bounded.INumeric, error) {
	switch strings.ToLower(name) {
	case "i":
		return &_v.I, nil
	default:
		return nil, fmt.Errorf("cannot get component \"%s\" of an _cursor vector", name)
	}
}

func (_v *_cursor[TI]) ComponentLen() uint {
	return 1
}

func (_v *_cursor[TI]) SetComponent(index uint, value any) error {
	switch index {
	case 0:
		 _v.I.Set(value.(TI))
	default:
		return fmt.Errorf("cannot set component index %d of an _cursor vector", index)
	}
	return nil
}

func (_v *_cursor[TI]) SetComponents(values []any) error {
	if len(values) != 1 {
		return fmt.Errorf("cannot set %d components of 1D vector _cursor", len(values), )
	}
	if _, ok := values[0].(TI); !ok {
		return fmt.Errorf("expected type %T for component I, got type %T", TI(0), values[0])	}
	_v.I.Set(values[0].(TI))
	return nil
}

func (_v *_cursor[TI]) SetComponentByName(name string, value any) error {
	switch strings.ToLower(name) {
	case "i":
		 _v.I.Set(value.(TI))
	default:
		return fmt.Errorf("cannot set component \"%s\" of an _cursor vector", name)
	}
	return nil
}

func (_v _cursor[TI]) String() string {
	if atlas.CompactVectors {
		return fmt.Sprintf("{i: %v}", _v.I.String())
	}
	 if support.AllSameTypes(TI(0)) {
		return fmt.Sprintf("_cursor[%T]{%v}(\"%v\")", TI(0), _v.I.String(), _v.GivenName.Name)
	}
	return fmt.Sprintf("_cursor[%T]{%v}(\"%v\")", TI(0), _v.I.String(), _v.GivenName.Name)
}

