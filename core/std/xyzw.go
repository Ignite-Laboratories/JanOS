// Code generated by 'internal/generators/letter'; DO NOT EDIT.
//go:generate go run ./internal/generators/letter -pkg std -name XYZW -nameL xyzw -cmpts X,Y,Z,W -cmptsL x,y,z,w -out xyzw.go
package std

import (
	"core/sys/name/format"
	"core/sys/num"
	"core/sys/num/bounded"
	"core/sys/support"
	"fmt"
)

// XYZW is a 4D vector of like-typed bounded.Number components.
//
// NOTE: If you'd like asymmetric types, please see XYZWTyped.
type XYZW[T num.Primitive] = XYZWTyped[T, T, T, T]

// XYZWTyped is a 4D vector of asymmetrically typed bounded.Number components.
//
// NOTE: If you'd like symmetric types, please see XYZW.
type XYZWTyped[TX num.Primitive, TY num.Primitive, TZ num.Primitive, TW num.Primitive] struct {
	Entity
	X bounded.Number[TX]
	Y bounded.Number[TY]
	Z bounded.Number[TZ]
	W bounded.Number[TW]
}

func NewXYZW[T num.Primitive]() XYZW[T] {
	return XYZW[T](NewXYZWTyped[T, T, T, T]())
}

func NewXYZWTyped[TX num.Primitive, TY num.Primitive, TZ num.Primitive, TW num.Primitive]() XYZWTyped[TX, TY, TZ, TW] {
	minX := num.MinValue[TX]()
	maxX := num.MaxValue[TX]()
	minY := num.MinValue[TY]()
	maxY := num.MaxValue[TY]()
	minZ := num.MinValue[TZ]()
	maxZ := num.MaxValue[TZ]()
	minW := num.MinValue[TW]()
	maxW := num.MaxValue[TW]()

	c := XYZWTyped[TX, TY, TZ, TW]{}
	c.Entity = NewEntity[format.Default]()
	c.SetBoundaries(minX, maxX, minY, maxY, minZ, maxZ, minW, maxW)
	return c
}

func (_v XYZWTyped[TX, TY, TZ, TW]) String() string {
	if support.AllSameTypes(TX(0), TY(0), TZ(0), TW(0)) {
		return fmt.Sprintf("xyzw[%T].{%v, %v, %v, %v}(%v)", TX(0), _v.X.ValueString(), _v.Y.ValueString(), _v.Z.ValueString(), _v.W.ValueString(), _v.GivenName.Name)
	}
	return fmt.Sprintf("xyzw[%T, %T, %T, %T].{%v, %v, %v, %v}(%v)", TX(0), TY(0), TZ(0), TW(0), _v.X.ValueString(), _v.Y.ValueString(), _v.Z.ValueString(), _v.W.ValueString(), _v.GivenName.Name)
}

func (_v XYZWTyped[TX, TY, TZ, TW]) Set(x TX, y TY, z TZ, w TW) XYZWTyped[TX, TY, TZ, TW] {
	_ = _v.X.Set(x)
	_ = _v.Y.Set(y)
	_ = _v.Z.Set(z)
	_ = _v.W.Set(w)
	return _v
}

func (_v XYZWTyped[TX, TY, TZ, TW]) SetClamp(clamp bool) XYZWTyped[TX, TY, TZ, TW] {
	_v.X.Clamp = clamp
	_v.Y.Clamp = clamp
	_v.Z.Clamp = clamp
	_v.W.Clamp = clamp
	return _v
}

func (_v XYZWTyped[TX, TY, TZ, TW]) SetBoundaries(minX, maxX TX, minY, maxY TY, minZ, maxZ TZ, minW, maxW TW) XYZWTyped[TX, TY, TZ, TW] {
	_ = _v.X.SetBoundaries(minX, maxX)
	_ = _v.Y.SetBoundaries(minY, maxY)
	_ = _v.Z.SetBoundaries(minZ, maxZ)
	_ = _v.W.SetBoundaries(minW, maxW)
	return _v
}

/**
Swizzling

	NOTE: This is a regular expression to find and replace swizzle functions into a one-liner if the auto formatter ever kicks in

	Find -
	func \((.*?)\) ([A-Z]{2,4})\(\) \((.*?)\)[ ]*\{[\n\t ]*return(.*?)[\n\t ]*\}

	Replace -
	func ($1) $2() ($3) { return$4 }
*/

func (_v XYZWTyped[TX, TY, TZ, TW]) XX() (TX, TX) { return _v.X.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XY() (TX, TY) { return _v.X.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XZ() (TX, TZ) { return _v.X.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XW() (TX, TW) { return _v.X.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YX() (TY, TX) { return _v.Y.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YY() (TY, TY) { return _v.Y.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YZ() (TY, TZ) { return _v.Y.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YW() (TY, TW) { return _v.Y.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZX() (TZ, TX) { return _v.Z.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZY() (TZ, TY) { return _v.Z.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZZ() (TZ, TZ) { return _v.Z.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZW() (TZ, TW) { return _v.Z.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WX() (TW, TX) { return _v.W.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WY() (TW, TY) { return _v.W.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WZ() (TW, TZ) { return _v.W.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WW() (TW, TW) { return _v.W.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XXX() (TX, TX, TX) { return _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XXY() (TX, TX, TY) { return _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XXZ() (TX, TX, TZ) { return _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XXW() (TX, TX, TW) { return _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XYX() (TX, TY, TX) { return _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XYY() (TX, TY, TY) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XYZ() (TX, TY, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XYW() (TX, TY, TW) { return _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XZX() (TX, TZ, TX) { return _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XZY() (TX, TZ, TY) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XZZ() (TX, TZ, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XZW() (TX, TZ, TW) { return _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XWX() (TX, TW, TX) { return _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XWY() (TX, TW, TY) { return _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XWZ() (TX, TW, TZ) { return _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XWW() (TX, TW, TW) { return _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YXX() (TY, TX, TX) { return _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YXY() (TY, TX, TY) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YXZ() (TY, TX, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YXW() (TY, TX, TW) { return _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YYX() (TY, TY, TX) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YYY() (TY, TY, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YYZ() (TY, TY, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YYW() (TY, TY, TW) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YZX() (TY, TZ, TX) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YZY() (TY, TZ, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YZZ() (TY, TZ, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YZW() (TY, TZ, TW) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YWX() (TY, TW, TX) { return _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YWY() (TY, TW, TY) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YWZ() (TY, TW, TZ) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YWW() (TY, TW, TW) { return _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZXX() (TZ, TX, TX) { return _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZXY() (TZ, TX, TY) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZXZ() (TZ, TX, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZXW() (TZ, TX, TW) { return _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZYX() (TZ, TY, TX) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZYY() (TZ, TY, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZYZ() (TZ, TY, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZYW() (TZ, TY, TW) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZZX() (TZ, TZ, TX) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZZY() (TZ, TZ, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZZZ() (TZ, TZ, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZZW() (TZ, TZ, TW) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZWX() (TZ, TW, TX) { return _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZWY() (TZ, TW, TY) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZWZ() (TZ, TW, TZ) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZWW() (TZ, TW, TW) { return _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WXX() (TW, TX, TX) { return _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WXY() (TW, TX, TY) { return _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WXZ() (TW, TX, TZ) { return _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WXW() (TW, TX, TW) { return _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WYX() (TW, TY, TX) { return _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WYY() (TW, TY, TY) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WYZ() (TW, TY, TZ) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WYW() (TW, TY, TW) { return _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WZX() (TW, TZ, TX) { return _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WZY() (TW, TZ, TY) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WZZ() (TW, TZ, TZ) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WZW() (TW, TZ, TW) { return _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WWX() (TW, TW, TX) { return _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WWY() (TW, TW, TY) { return _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WWZ() (TW, TW, TZ) { return _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WWW() (TW, TW, TW) { return _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XXXX() (TX, TX, TX, TX) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XXXY() (TX, TX, TX, TY) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XXXZ() (TX, TX, TX, TZ) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XXXW() (TX, TX, TX, TW) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XXYX() (TX, TX, TY, TX) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XXYY() (TX, TX, TY, TY) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XXYZ() (TX, TX, TY, TZ) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XXYW() (TX, TX, TY, TW) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XXZX() (TX, TX, TZ, TX) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XXZY() (TX, TX, TZ, TY) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XXZZ() (TX, TX, TZ, TZ) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XXZW() (TX, TX, TZ, TW) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XXWX() (TX, TX, TW, TX) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XXWY() (TX, TX, TW, TY) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XXWZ() (TX, TX, TW, TZ) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XXWW() (TX, TX, TW, TW) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XYXX() (TX, TY, TX, TX) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XYXY() (TX, TY, TX, TY) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XYXZ() (TX, TY, TX, TZ) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XYXW() (TX, TY, TX, TW) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XYYX() (TX, TY, TY, TX) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XYYY() (TX, TY, TY, TY) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XYYZ() (TX, TY, TY, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XYYW() (TX, TY, TY, TW) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XYZX() (TX, TY, TZ, TX) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XYZY() (TX, TY, TZ, TY) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XYZZ() (TX, TY, TZ, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XYZW() (TX, TY, TZ, TW) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XYWX() (TX, TY, TW, TX) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XYWY() (TX, TY, TW, TY) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XYWZ() (TX, TY, TW, TZ) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XYWW() (TX, TY, TW, TW) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XZXX() (TX, TZ, TX, TX) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XZXY() (TX, TZ, TX, TY) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XZXZ() (TX, TZ, TX, TZ) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XZXW() (TX, TZ, TX, TW) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XZYX() (TX, TZ, TY, TX) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XZYY() (TX, TZ, TY, TY) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XZYZ() (TX, TZ, TY, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XZYW() (TX, TZ, TY, TW) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XZZX() (TX, TZ, TZ, TX) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XZZY() (TX, TZ, TZ, TY) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XZZZ() (TX, TZ, TZ, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XZZW() (TX, TZ, TZ, TW) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XZWX() (TX, TZ, TW, TX) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XZWY() (TX, TZ, TW, TY) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XZWZ() (TX, TZ, TW, TZ) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XZWW() (TX, TZ, TW, TW) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XWXX() (TX, TW, TX, TX) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XWXY() (TX, TW, TX, TY) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XWXZ() (TX, TW, TX, TZ) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XWXW() (TX, TW, TX, TW) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XWYX() (TX, TW, TY, TX) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XWYY() (TX, TW, TY, TY) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XWYZ() (TX, TW, TY, TZ) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XWYW() (TX, TW, TY, TW) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XWZX() (TX, TW, TZ, TX) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XWZY() (TX, TW, TZ, TY) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XWZZ() (TX, TW, TZ, TZ) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XWZW() (TX, TW, TZ, TW) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XWWX() (TX, TW, TW, TX) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XWWY() (TX, TW, TW, TY) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XWWZ() (TX, TW, TW, TZ) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) XWWW() (TX, TW, TW, TW) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YXXX() (TY, TX, TX, TX) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YXXY() (TY, TX, TX, TY) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YXXZ() (TY, TX, TX, TZ) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YXXW() (TY, TX, TX, TW) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YXYX() (TY, TX, TY, TX) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YXYY() (TY, TX, TY, TY) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YXYZ() (TY, TX, TY, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YXYW() (TY, TX, TY, TW) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YXZX() (TY, TX, TZ, TX) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YXZY() (TY, TX, TZ, TY) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YXZZ() (TY, TX, TZ, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YXZW() (TY, TX, TZ, TW) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YXWX() (TY, TX, TW, TX) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YXWY() (TY, TX, TW, TY) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YXWZ() (TY, TX, TW, TZ) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YXWW() (TY, TX, TW, TW) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YYXX() (TY, TY, TX, TX) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YYXY() (TY, TY, TX, TY) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YYXZ() (TY, TY, TX, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YYXW() (TY, TY, TX, TW) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YYYX() (TY, TY, TY, TX) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YYYY() (TY, TY, TY, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YYYZ() (TY, TY, TY, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YYYW() (TY, TY, TY, TW) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YYZX() (TY, TY, TZ, TX) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YYZY() (TY, TY, TZ, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YYZZ() (TY, TY, TZ, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YYZW() (TY, TY, TZ, TW) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YYWX() (TY, TY, TW, TX) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YYWY() (TY, TY, TW, TY) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YYWZ() (TY, TY, TW, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YYWW() (TY, TY, TW, TW) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YZXX() (TY, TZ, TX, TX) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YZXY() (TY, TZ, TX, TY) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YZXZ() (TY, TZ, TX, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YZXW() (TY, TZ, TX, TW) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YZYX() (TY, TZ, TY, TX) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YZYY() (TY, TZ, TY, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YZYZ() (TY, TZ, TY, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YZYW() (TY, TZ, TY, TW) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YZZX() (TY, TZ, TZ, TX) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YZZY() (TY, TZ, TZ, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YZZZ() (TY, TZ, TZ, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YZZW() (TY, TZ, TZ, TW) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YZWX() (TY, TZ, TW, TX) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YZWY() (TY, TZ, TW, TY) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YZWZ() (TY, TZ, TW, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YZWW() (TY, TZ, TW, TW) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YWXX() (TY, TW, TX, TX) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YWXY() (TY, TW, TX, TY) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YWXZ() (TY, TW, TX, TZ) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YWXW() (TY, TW, TX, TW) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YWYX() (TY, TW, TY, TX) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YWYY() (TY, TW, TY, TY) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YWYZ() (TY, TW, TY, TZ) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YWYW() (TY, TW, TY, TW) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YWZX() (TY, TW, TZ, TX) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YWZY() (TY, TW, TZ, TY) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YWZZ() (TY, TW, TZ, TZ) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YWZW() (TY, TW, TZ, TW) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YWWX() (TY, TW, TW, TX) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YWWY() (TY, TW, TW, TY) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YWWZ() (TY, TW, TW, TZ) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) YWWW() (TY, TW, TW, TW) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZXXX() (TZ, TX, TX, TX) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZXXY() (TZ, TX, TX, TY) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZXXZ() (TZ, TX, TX, TZ) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZXXW() (TZ, TX, TX, TW) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZXYX() (TZ, TX, TY, TX) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZXYY() (TZ, TX, TY, TY) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZXYZ() (TZ, TX, TY, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZXYW() (TZ, TX, TY, TW) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZXZX() (TZ, TX, TZ, TX) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZXZY() (TZ, TX, TZ, TY) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZXZZ() (TZ, TX, TZ, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZXZW() (TZ, TX, TZ, TW) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZXWX() (TZ, TX, TW, TX) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZXWY() (TZ, TX, TW, TY) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZXWZ() (TZ, TX, TW, TZ) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZXWW() (TZ, TX, TW, TW) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZYXX() (TZ, TY, TX, TX) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZYXY() (TZ, TY, TX, TY) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZYXZ() (TZ, TY, TX, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZYXW() (TZ, TY, TX, TW) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZYYX() (TZ, TY, TY, TX) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZYYY() (TZ, TY, TY, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZYYZ() (TZ, TY, TY, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZYYW() (TZ, TY, TY, TW) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZYZX() (TZ, TY, TZ, TX) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZYZY() (TZ, TY, TZ, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZYZZ() (TZ, TY, TZ, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZYZW() (TZ, TY, TZ, TW) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZYWX() (TZ, TY, TW, TX) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZYWY() (TZ, TY, TW, TY) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZYWZ() (TZ, TY, TW, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZYWW() (TZ, TY, TW, TW) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZZXX() (TZ, TZ, TX, TX) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZZXY() (TZ, TZ, TX, TY) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZZXZ() (TZ, TZ, TX, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZZXW() (TZ, TZ, TX, TW) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZZYX() (TZ, TZ, TY, TX) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZZYY() (TZ, TZ, TY, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZZYZ() (TZ, TZ, TY, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZZYW() (TZ, TZ, TY, TW) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZZZX() (TZ, TZ, TZ, TX) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZZZY() (TZ, TZ, TZ, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZZZZ() (TZ, TZ, TZ, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZZZW() (TZ, TZ, TZ, TW) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZZWX() (TZ, TZ, TW, TX) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZZWY() (TZ, TZ, TW, TY) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZZWZ() (TZ, TZ, TW, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZZWW() (TZ, TZ, TW, TW) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZWXX() (TZ, TW, TX, TX) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZWXY() (TZ, TW, TX, TY) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZWXZ() (TZ, TW, TX, TZ) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZWXW() (TZ, TW, TX, TW) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZWYX() (TZ, TW, TY, TX) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZWYY() (TZ, TW, TY, TY) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZWYZ() (TZ, TW, TY, TZ) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZWYW() (TZ, TW, TY, TW) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZWZX() (TZ, TW, TZ, TX) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZWZY() (TZ, TW, TZ, TY) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZWZZ() (TZ, TW, TZ, TZ) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZWZW() (TZ, TW, TZ, TW) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZWWX() (TZ, TW, TW, TX) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZWWY() (TZ, TW, TW, TY) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZWWZ() (TZ, TW, TW, TZ) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) ZWWW() (TZ, TW, TW, TW) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WXXX() (TW, TX, TX, TX) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WXXY() (TW, TX, TX, TY) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WXXZ() (TW, TX, TX, TZ) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WXXW() (TW, TX, TX, TW) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WXYX() (TW, TX, TY, TX) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WXYY() (TW, TX, TY, TY) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WXYZ() (TW, TX, TY, TZ) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WXYW() (TW, TX, TY, TW) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WXZX() (TW, TX, TZ, TX) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WXZY() (TW, TX, TZ, TY) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WXZZ() (TW, TX, TZ, TZ) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WXZW() (TW, TX, TZ, TW) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WXWX() (TW, TX, TW, TX) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WXWY() (TW, TX, TW, TY) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WXWZ() (TW, TX, TW, TZ) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WXWW() (TW, TX, TW, TW) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WYXX() (TW, TY, TX, TX) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WYXY() (TW, TY, TX, TY) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WYXZ() (TW, TY, TX, TZ) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WYXW() (TW, TY, TX, TW) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WYYX() (TW, TY, TY, TX) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WYYY() (TW, TY, TY, TY) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WYYZ() (TW, TY, TY, TZ) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WYYW() (TW, TY, TY, TW) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WYZX() (TW, TY, TZ, TX) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WYZY() (TW, TY, TZ, TY) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WYZZ() (TW, TY, TZ, TZ) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WYZW() (TW, TY, TZ, TW) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WYWX() (TW, TY, TW, TX) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WYWY() (TW, TY, TW, TY) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WYWZ() (TW, TY, TW, TZ) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WYWW() (TW, TY, TW, TW) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WZXX() (TW, TZ, TX, TX) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WZXY() (TW, TZ, TX, TY) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WZXZ() (TW, TZ, TX, TZ) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WZXW() (TW, TZ, TX, TW) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WZYX() (TW, TZ, TY, TX) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WZYY() (TW, TZ, TY, TY) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WZYZ() (TW, TZ, TY, TZ) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WZYW() (TW, TZ, TY, TW) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WZZX() (TW, TZ, TZ, TX) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WZZY() (TW, TZ, TZ, TY) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WZZZ() (TW, TZ, TZ, TZ) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WZZW() (TW, TZ, TZ, TW) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WZWX() (TW, TZ, TW, TX) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WZWY() (TW, TZ, TW, TY) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WZWZ() (TW, TZ, TW, TZ) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WZWW() (TW, TZ, TW, TW) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WWXX() (TW, TW, TX, TX) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WWXY() (TW, TW, TX, TY) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WWXZ() (TW, TW, TX, TZ) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WWXW() (TW, TW, TX, TW) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WWYX() (TW, TW, TY, TX) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WWYY() (TW, TW, TY, TY) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WWYZ() (TW, TW, TY, TZ) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WWYW() (TW, TW, TY, TW) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WWZX() (TW, TW, TZ, TX) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WWZY() (TW, TW, TZ, TY) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WWZZ() (TW, TW, TZ, TZ) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WWZW() (TW, TW, TZ, TW) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WWWX() (TW, TW, TW, TX) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WWWY() (TW, TW, TW, TY) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WWWZ() (TW, TW, TW, TZ) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWTyped[TX, TY, TZ, TW]) WWWW() (TW, TW, TW, TW) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
