// Code generated by 'gen/letters/main'; DO NOT EDIT.
//go:generate go run ../gen/letters/main -pkg std -name XYZWAB -nameL xyzwab -cmpts X,Y,Z,W,A,B -cmptsL x,y,z,w,a,b -out ../std/xyzwab.go
package std

import (
	"core/sys/atlas"
	"core/sys/name/format"
	"core/sys/num"
	"core/sys/support"
	"fmt"
	"strings"
)

// XYZWAB is a 6D vector of like-typed bounded.Numeric components.
//
// NOTE: If you'd like asymmetric types, please see XYZWABTyped.
type XYZWAB[T num.Primitive] = XYZWABTyped[T, T, T, T, T, T]

// XYZWABTyped is a 6D vector of asymmetrically typed bounded.Numeric components.
//
// NOTE: If you'd like symmetric types, please see XYZWAB.
type XYZWABTyped[TX num.Primitive, TY num.Primitive, TZ num.Primitive, TW num.Primitive, TA num.Primitive, TB num.Primitive] struct {
	Entity
	X num.Numeric[TX]
	Y num.Numeric[TY]
	Z num.Numeric[TZ]
	W num.Numeric[TW]
	A num.Numeric[TA]
	B num.Numeric[TB]
}

func NewXYZWAB[T num.Primitive](x T, y T, z T, w T, a T, b T, name ...string) *XYZWAB[T] {
	typed := XYZWAB[T](*NewXYZWABTyped[T, T, T, T, T, T](x, y, z, w, a, b, name...))
	return &typed
}

func NewXYZWABTyped[TX num.Primitive, TY num.Primitive, TZ num.Primitive, TW num.Primitive, TA num.Primitive, TB num.Primitive](x TX, y TY, z TZ, w TW, a TA, b TB, name ...string) *XYZWABTyped[TX, TY, TZ, TW, TA, TB] {
	minX := num.MinValue[TX]()
	maxX := num.MaxValue[TX]()
	if num.IsFloat[TX]() {
		minX = 0
		maxX = 1
	}
	minY := num.MinValue[TY]()
	maxY := num.MaxValue[TY]()
	if num.IsFloat[TY]() {
		minY = 0
		maxY = 1
	}
	minZ := num.MinValue[TZ]()
	maxZ := num.MaxValue[TZ]()
	if num.IsFloat[TZ]() {
		minZ = 0
		maxZ = 1
	}
	minW := num.MinValue[TW]()
	maxW := num.MaxValue[TW]()
	if num.IsFloat[TW]() {
		minW = 0
		maxW = 1
	}
	minA := num.MinValue[TA]()
	maxA := num.MaxValue[TA]()
	if num.IsFloat[TA]() {
		minA = 0
		maxA = 1
	}
	minB := num.MinValue[TB]()
	maxB := num.MaxValue[TB]()
	if num.IsFloat[TB]() {
		minB = 0
		maxB = 1
	}

	_v := &XYZWABTyped[TX, TY, TZ, TW, TA, TB]{}
	_v.Entity = NewEntity[format.Default]()
	_v.SetBoundaries(minX, maxX, minY, maxY, minZ, maxZ, minW, maxW, minA, maxA, minB, maxB)
	_v.Set(x, y, z, w, a, b)
	if len(name) > 0 {
		_v.SetName(name[0])
	}
	return _v
}

func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) Name() string {
	return _v.GivenName.Name
}

func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) SetName(name string) *XYZWABTyped[TX, TY, TZ, TW, TA, TB] {
	_v.GivenName.Name = name
	return _v
}

func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) Set(x TX, y TY, z TZ, w TW, a TA, b TB) *XYZWABTyped[TX, TY, TZ, TW, TA, TB] {
	_ = _v.X.Set(x)
	_ = _v.Y.Set(y)
	_ = _v.Z.Set(z)
	_ = _v.W.Set(w)
	_ = _v.A.Set(a)
	_ = _v.B.Set(b)
	return _v
}

func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) SetClamp(clamp bool) *XYZWABTyped[TX, TY, TZ, TW, TA, TB] {
	_v.X.Clamp = clamp
	_v.Y.Clamp = clamp
	_v.Z.Clamp = clamp
	_v.W.Clamp = clamp
	_v.A.Clamp = clamp
	_v.B.Clamp = clamp
	return _v
}

func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) SetBoundaries(minX, maxX TX, minY, maxY TY, minZ, maxZ TZ, minW, maxW TW, minA, maxA TA, minB, maxB TB) *XYZWABTyped[TX, TY, TZ, TW, TA, TB] {
	_ = _v.X.SetBoundaries(minX, maxX)
	_ = _v.Y.SetBoundaries(minY, maxY)
	_ = _v.Z.SetBoundaries(minZ, maxZ)
	_ = _v.W.SetBoundaries(minW, maxW)
	_ = _v.A.SetBoundaries(minA, maxA)
	_ = _v.B.SetBoundaries(minB, maxB)
	return _v
}

func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) Component(index uint) (num.INumeric, error) {
	switch index {
	case 0:
		return &_v.X, nil
	case 1:
		return &_v.Y, nil
	case 2:
		return &_v.Z, nil
	case 3:
		return &_v.W, nil
	case 4:
		return &_v.A, nil
	case 5:
		return &_v.B, nil
	default:
		return nil, fmt.Errorf("cannot get component index %d of an XYZWAB vector", index)
	}
}

func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) Components() []num.INumeric {
	return []num.INumeric{&_v.X, &_v.Y, &_v.Z, &_v.W, &_v.A, &_v.B}
}

func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ComponentByName(name string) (num.INumeric, error) {
	switch strings.ToLower(name) {
	case "x":
		return &_v.X, nil
	case "y":
		return &_v.Y, nil
	case "z":
		return &_v.Z, nil
	case "w":
		return &_v.W, nil
	case "a":
		return &_v.A, nil
	case "b":
		return &_v.B, nil
	default:
		return nil, fmt.Errorf("cannot get component \"%s\" of an XYZWAB vector", name)
	}
}

func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ComponentLen() uint {
	return 6
}

func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) SetComponent(index uint, value any) error {
	switch index {
	case 0:
		 _v.X.Set(value.(TX))
	case 1:
		 _v.Y.Set(value.(TY))
	case 2:
		 _v.Z.Set(value.(TZ))
	case 3:
		 _v.W.Set(value.(TW))
	case 4:
		 _v.A.Set(value.(TA))
	case 5:
		 _v.B.Set(value.(TB))
	default:
		return fmt.Errorf("cannot set component index %d of an XYZWAB vector", index)
	}
	return nil
}

func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) SetComponents(values []any) error {
	if len(values) != 6 {
		return fmt.Errorf("cannot set %d components of 6D vector XYZWAB", len(values), )
	}
	if _, ok := values[0].(TX); !ok {
		return fmt.Errorf("expected type %T for component X, got type %T", TX(0), values[0])	}
	if _, ok := values[1].(TY); !ok {
		return fmt.Errorf("expected type %T for component Y, got type %T", TY(0), values[1])	}
	if _, ok := values[2].(TZ); !ok {
		return fmt.Errorf("expected type %T for component Z, got type %T", TZ(0), values[2])	}
	if _, ok := values[3].(TW); !ok {
		return fmt.Errorf("expected type %T for component W, got type %T", TW(0), values[3])	}
	if _, ok := values[4].(TA); !ok {
		return fmt.Errorf("expected type %T for component A, got type %T", TA(0), values[4])	}
	if _, ok := values[5].(TB); !ok {
		return fmt.Errorf("expected type %T for component B, got type %T", TB(0), values[5])	}
	_v.X.Set(values[0].(TX))
	_v.Y.Set(values[1].(TY))
	_v.Z.Set(values[2].(TZ))
	_v.W.Set(values[3].(TW))
	_v.A.Set(values[4].(TA))
	_v.B.Set(values[5].(TB))
	return nil
}

func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) SetComponentByName(name string, value any) error {
	switch strings.ToLower(name) {
	case "x":
		 _v.X.Set(value.(TX))
	case "y":
		 _v.Y.Set(value.(TY))
	case "z":
		 _v.Z.Set(value.(TZ))
	case "w":
		 _v.W.Set(value.(TW))
	case "a":
		 _v.A.Set(value.(TA))
	case "b":
		 _v.B.Set(value.(TB))
	default:
		return fmt.Errorf("cannot set component \"%s\" of an XYZWAB vector", name)
	}
	return nil
}

func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) String() string {
	if atlas.CompactVectors {
		return fmt.Sprintf("{x: %v, y: %v, z: %v, w: %v, a: %v, b: %v}", _v.X.String(), _v.Y.String(), _v.Z.String(), _v.W.String(), _v.A.String(), _v.B.String())
	}
	 if support.AllSameTypes(TX(0), TY(0), TZ(0), TW(0), TA(0), TB(0)) {
		return fmt.Sprintf("xyzwab[%T]{%v, %v, %v, %v, %v, %v}(\"%v\")", TX(0), _v.X.String(), _v.Y.String(), _v.Z.String(), _v.W.String(), _v.A.String(), _v.B.String(), _v.GivenName.Name)
	}
	return fmt.Sprintf("xyzwab[%T, %T, %T, %T, %T, %T]{%v, %v, %v, %v, %v, %v}(\"%v\")", TX(0), TY(0), TZ(0), TW(0), TA(0), TB(0), _v.X.String(), _v.Y.String(), _v.Z.String(), _v.W.String(), _v.A.String(), _v.B.String(), _v.GivenName.Name)
}

func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XX() (TX, TX) { return _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XY() (TX, TY) { return _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZ() (TX, TZ) { return _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XW() (TX, TW) { return _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XA() (TX, TA) { return _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XB() (TX, TB) { return _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YX() (TY, TX) { return _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YY() (TY, TY) { return _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZ() (TY, TZ) { return _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YW() (TY, TW) { return _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YA() (TY, TA) { return _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YB() (TY, TB) { return _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZX() (TZ, TX) { return _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZY() (TZ, TY) { return _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZ() (TZ, TZ) { return _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZW() (TZ, TW) { return _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZA() (TZ, TA) { return _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZB() (TZ, TB) { return _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WX() (TW, TX) { return _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WY() (TW, TY) { return _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZ() (TW, TZ) { return _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WW() (TW, TW) { return _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WA() (TW, TA) { return _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WB() (TW, TB) { return _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AX() (TA, TX) { return _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AY() (TA, TY) { return _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZ() (TA, TZ) { return _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AW() (TA, TW) { return _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AA() (TA, TA) { return _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AB() (TA, TB) { return _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BX() (TB, TX) { return _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BY() (TB, TY) { return _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZ() (TB, TZ) { return _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BW() (TB, TW) { return _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BA() (TB, TA) { return _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BB() (TB, TB) { return _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXX() (TX, TX, TX) { return _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXY() (TX, TX, TY) { return _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZ() (TX, TX, TZ) { return _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXW() (TX, TX, TW) { return _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXA() (TX, TX, TA) { return _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXB() (TX, TX, TB) { return _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYX() (TX, TY, TX) { return _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYY() (TX, TY, TY) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZ() (TX, TY, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYW() (TX, TY, TW) { return _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYA() (TX, TY, TA) { return _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYB() (TX, TY, TB) { return _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZX() (TX, TZ, TX) { return _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZY() (TX, TZ, TY) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZ() (TX, TZ, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZW() (TX, TZ, TW) { return _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZA() (TX, TZ, TA) { return _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZB() (TX, TZ, TB) { return _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWX() (TX, TW, TX) { return _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWY() (TX, TW, TY) { return _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZ() (TX, TW, TZ) { return _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWW() (TX, TW, TW) { return _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWA() (TX, TW, TA) { return _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWB() (TX, TW, TB) { return _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAX() (TX, TA, TX) { return _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAY() (TX, TA, TY) { return _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZ() (TX, TA, TZ) { return _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAW() (TX, TA, TW) { return _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAA() (TX, TA, TA) { return _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAB() (TX, TA, TB) { return _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBX() (TX, TB, TX) { return _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBY() (TX, TB, TY) { return _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZ() (TX, TB, TZ) { return _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBW() (TX, TB, TW) { return _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBA() (TX, TB, TA) { return _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBB() (TX, TB, TB) { return _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXX() (TY, TX, TX) { return _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXY() (TY, TX, TY) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZ() (TY, TX, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXW() (TY, TX, TW) { return _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXA() (TY, TX, TA) { return _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXB() (TY, TX, TB) { return _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYX() (TY, TY, TX) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYY() (TY, TY, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZ() (TY, TY, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYW() (TY, TY, TW) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYA() (TY, TY, TA) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYB() (TY, TY, TB) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZX() (TY, TZ, TX) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZY() (TY, TZ, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZ() (TY, TZ, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZW() (TY, TZ, TW) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZA() (TY, TZ, TA) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZB() (TY, TZ, TB) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWX() (TY, TW, TX) { return _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWY() (TY, TW, TY) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZ() (TY, TW, TZ) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWW() (TY, TW, TW) { return _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWA() (TY, TW, TA) { return _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWB() (TY, TW, TB) { return _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAX() (TY, TA, TX) { return _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAY() (TY, TA, TY) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZ() (TY, TA, TZ) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAW() (TY, TA, TW) { return _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAA() (TY, TA, TA) { return _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAB() (TY, TA, TB) { return _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBX() (TY, TB, TX) { return _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBY() (TY, TB, TY) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZ() (TY, TB, TZ) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBW() (TY, TB, TW) { return _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBA() (TY, TB, TA) { return _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBB() (TY, TB, TB) { return _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXX() (TZ, TX, TX) { return _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXY() (TZ, TX, TY) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZ() (TZ, TX, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXW() (TZ, TX, TW) { return _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXA() (TZ, TX, TA) { return _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXB() (TZ, TX, TB) { return _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYX() (TZ, TY, TX) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYY() (TZ, TY, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZ() (TZ, TY, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYW() (TZ, TY, TW) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYA() (TZ, TY, TA) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYB() (TZ, TY, TB) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZX() (TZ, TZ, TX) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZY() (TZ, TZ, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZ() (TZ, TZ, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZW() (TZ, TZ, TW) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZA() (TZ, TZ, TA) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZB() (TZ, TZ, TB) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWX() (TZ, TW, TX) { return _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWY() (TZ, TW, TY) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZ() (TZ, TW, TZ) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWW() (TZ, TW, TW) { return _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWA() (TZ, TW, TA) { return _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWB() (TZ, TW, TB) { return _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAX() (TZ, TA, TX) { return _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAY() (TZ, TA, TY) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZ() (TZ, TA, TZ) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAW() (TZ, TA, TW) { return _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAA() (TZ, TA, TA) { return _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAB() (TZ, TA, TB) { return _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBX() (TZ, TB, TX) { return _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBY() (TZ, TB, TY) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZ() (TZ, TB, TZ) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBW() (TZ, TB, TW) { return _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBA() (TZ, TB, TA) { return _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBB() (TZ, TB, TB) { return _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXX() (TW, TX, TX) { return _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXY() (TW, TX, TY) { return _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZ() (TW, TX, TZ) { return _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXW() (TW, TX, TW) { return _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXA() (TW, TX, TA) { return _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXB() (TW, TX, TB) { return _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYX() (TW, TY, TX) { return _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYY() (TW, TY, TY) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZ() (TW, TY, TZ) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYW() (TW, TY, TW) { return _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYA() (TW, TY, TA) { return _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYB() (TW, TY, TB) { return _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZX() (TW, TZ, TX) { return _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZY() (TW, TZ, TY) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZ() (TW, TZ, TZ) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZW() (TW, TZ, TW) { return _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZA() (TW, TZ, TA) { return _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZB() (TW, TZ, TB) { return _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWX() (TW, TW, TX) { return _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWY() (TW, TW, TY) { return _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZ() (TW, TW, TZ) { return _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWW() (TW, TW, TW) { return _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWA() (TW, TW, TA) { return _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWB() (TW, TW, TB) { return _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAX() (TW, TA, TX) { return _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAY() (TW, TA, TY) { return _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZ() (TW, TA, TZ) { return _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAW() (TW, TA, TW) { return _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAA() (TW, TA, TA) { return _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAB() (TW, TA, TB) { return _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBX() (TW, TB, TX) { return _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBY() (TW, TB, TY) { return _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZ() (TW, TB, TZ) { return _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBW() (TW, TB, TW) { return _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBA() (TW, TB, TA) { return _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBB() (TW, TB, TB) { return _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXX() (TA, TX, TX) { return _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXY() (TA, TX, TY) { return _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZ() (TA, TX, TZ) { return _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXW() (TA, TX, TW) { return _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXA() (TA, TX, TA) { return _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXB() (TA, TX, TB) { return _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYX() (TA, TY, TX) { return _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYY() (TA, TY, TY) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZ() (TA, TY, TZ) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYW() (TA, TY, TW) { return _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYA() (TA, TY, TA) { return _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYB() (TA, TY, TB) { return _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZX() (TA, TZ, TX) { return _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZY() (TA, TZ, TY) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZ() (TA, TZ, TZ) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZW() (TA, TZ, TW) { return _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZA() (TA, TZ, TA) { return _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZB() (TA, TZ, TB) { return _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWX() (TA, TW, TX) { return _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWY() (TA, TW, TY) { return _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZ() (TA, TW, TZ) { return _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWW() (TA, TW, TW) { return _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWA() (TA, TW, TA) { return _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWB() (TA, TW, TB) { return _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAX() (TA, TA, TX) { return _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAY() (TA, TA, TY) { return _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZ() (TA, TA, TZ) { return _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAW() (TA, TA, TW) { return _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAA() (TA, TA, TA) { return _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAB() (TA, TA, TB) { return _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABX() (TA, TB, TX) { return _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABY() (TA, TB, TY) { return _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZ() (TA, TB, TZ) { return _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABW() (TA, TB, TW) { return _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABA() (TA, TB, TA) { return _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABB() (TA, TB, TB) { return _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXX() (TB, TX, TX) { return _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXY() (TB, TX, TY) { return _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZ() (TB, TX, TZ) { return _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXW() (TB, TX, TW) { return _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXA() (TB, TX, TA) { return _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXB() (TB, TX, TB) { return _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYX() (TB, TY, TX) { return _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYY() (TB, TY, TY) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZ() (TB, TY, TZ) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYW() (TB, TY, TW) { return _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYA() (TB, TY, TA) { return _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYB() (TB, TY, TB) { return _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZX() (TB, TZ, TX) { return _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZY() (TB, TZ, TY) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZ() (TB, TZ, TZ) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZW() (TB, TZ, TW) { return _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZA() (TB, TZ, TA) { return _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZB() (TB, TZ, TB) { return _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWX() (TB, TW, TX) { return _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWY() (TB, TW, TY) { return _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZ() (TB, TW, TZ) { return _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWW() (TB, TW, TW) { return _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWA() (TB, TW, TA) { return _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWB() (TB, TW, TB) { return _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAX() (TB, TA, TX) { return _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAY() (TB, TA, TY) { return _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZ() (TB, TA, TZ) { return _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAW() (TB, TA, TW) { return _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAA() (TB, TA, TA) { return _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAB() (TB, TA, TB) { return _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBX() (TB, TB, TX) { return _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBY() (TB, TB, TY) { return _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZ() (TB, TB, TZ) { return _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBW() (TB, TB, TW) { return _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBA() (TB, TB, TA) { return _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBB() (TB, TB, TB) { return _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXX() (TX, TX, TX, TX) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXY() (TX, TX, TX, TY) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXZ() (TX, TX, TX, TZ) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXW() (TX, TX, TX, TW) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXA() (TX, TX, TX, TA) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXB() (TX, TX, TX, TB) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYX() (TX, TX, TY, TX) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYY() (TX, TX, TY, TY) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYZ() (TX, TX, TY, TZ) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYW() (TX, TX, TY, TW) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYA() (TX, TX, TY, TA) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYB() (TX, TX, TY, TB) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZX() (TX, TX, TZ, TX) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZY() (TX, TX, TZ, TY) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZZ() (TX, TX, TZ, TZ) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZW() (TX, TX, TZ, TW) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZA() (TX, TX, TZ, TA) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZB() (TX, TX, TZ, TB) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWX() (TX, TX, TW, TX) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWY() (TX, TX, TW, TY) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWZ() (TX, TX, TW, TZ) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWW() (TX, TX, TW, TW) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWA() (TX, TX, TW, TA) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWB() (TX, TX, TW, TB) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAX() (TX, TX, TA, TX) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAY() (TX, TX, TA, TY) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAZ() (TX, TX, TA, TZ) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAW() (TX, TX, TA, TW) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAA() (TX, TX, TA, TA) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAB() (TX, TX, TA, TB) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBX() (TX, TX, TB, TX) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBY() (TX, TX, TB, TY) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBZ() (TX, TX, TB, TZ) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBW() (TX, TX, TB, TW) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBA() (TX, TX, TB, TA) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBB() (TX, TX, TB, TB) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXX() (TX, TY, TX, TX) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXY() (TX, TY, TX, TY) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXZ() (TX, TY, TX, TZ) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXW() (TX, TY, TX, TW) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXA() (TX, TY, TX, TA) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXB() (TX, TY, TX, TB) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYX() (TX, TY, TY, TX) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYY() (TX, TY, TY, TY) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYZ() (TX, TY, TY, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYW() (TX, TY, TY, TW) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYA() (TX, TY, TY, TA) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYB() (TX, TY, TY, TB) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZX() (TX, TY, TZ, TX) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZY() (TX, TY, TZ, TY) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZZ() (TX, TY, TZ, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZW() (TX, TY, TZ, TW) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZA() (TX, TY, TZ, TA) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZB() (TX, TY, TZ, TB) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWX() (TX, TY, TW, TX) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWY() (TX, TY, TW, TY) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWZ() (TX, TY, TW, TZ) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWW() (TX, TY, TW, TW) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWA() (TX, TY, TW, TA) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWB() (TX, TY, TW, TB) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAX() (TX, TY, TA, TX) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAY() (TX, TY, TA, TY) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAZ() (TX, TY, TA, TZ) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAW() (TX, TY, TA, TW) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAA() (TX, TY, TA, TA) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAB() (TX, TY, TA, TB) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBX() (TX, TY, TB, TX) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBY() (TX, TY, TB, TY) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBZ() (TX, TY, TB, TZ) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBW() (TX, TY, TB, TW) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBA() (TX, TY, TB, TA) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBB() (TX, TY, TB, TB) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXX() (TX, TZ, TX, TX) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXY() (TX, TZ, TX, TY) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXZ() (TX, TZ, TX, TZ) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXW() (TX, TZ, TX, TW) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXA() (TX, TZ, TX, TA) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXB() (TX, TZ, TX, TB) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYX() (TX, TZ, TY, TX) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYY() (TX, TZ, TY, TY) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYZ() (TX, TZ, TY, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYW() (TX, TZ, TY, TW) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYA() (TX, TZ, TY, TA) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYB() (TX, TZ, TY, TB) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZX() (TX, TZ, TZ, TX) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZY() (TX, TZ, TZ, TY) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZZ() (TX, TZ, TZ, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZW() (TX, TZ, TZ, TW) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZA() (TX, TZ, TZ, TA) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZB() (TX, TZ, TZ, TB) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWX() (TX, TZ, TW, TX) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWY() (TX, TZ, TW, TY) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWZ() (TX, TZ, TW, TZ) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWW() (TX, TZ, TW, TW) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWA() (TX, TZ, TW, TA) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWB() (TX, TZ, TW, TB) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAX() (TX, TZ, TA, TX) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAY() (TX, TZ, TA, TY) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAZ() (TX, TZ, TA, TZ) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAW() (TX, TZ, TA, TW) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAA() (TX, TZ, TA, TA) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAB() (TX, TZ, TA, TB) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBX() (TX, TZ, TB, TX) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBY() (TX, TZ, TB, TY) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBZ() (TX, TZ, TB, TZ) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBW() (TX, TZ, TB, TW) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBA() (TX, TZ, TB, TA) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBB() (TX, TZ, TB, TB) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXX() (TX, TW, TX, TX) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXY() (TX, TW, TX, TY) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXZ() (TX, TW, TX, TZ) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXW() (TX, TW, TX, TW) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXA() (TX, TW, TX, TA) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXB() (TX, TW, TX, TB) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYX() (TX, TW, TY, TX) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYY() (TX, TW, TY, TY) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYZ() (TX, TW, TY, TZ) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYW() (TX, TW, TY, TW) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYA() (TX, TW, TY, TA) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYB() (TX, TW, TY, TB) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZX() (TX, TW, TZ, TX) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZY() (TX, TW, TZ, TY) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZZ() (TX, TW, TZ, TZ) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZW() (TX, TW, TZ, TW) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZA() (TX, TW, TZ, TA) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZB() (TX, TW, TZ, TB) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWX() (TX, TW, TW, TX) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWY() (TX, TW, TW, TY) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWZ() (TX, TW, TW, TZ) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWW() (TX, TW, TW, TW) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWA() (TX, TW, TW, TA) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWB() (TX, TW, TW, TB) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAX() (TX, TW, TA, TX) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAY() (TX, TW, TA, TY) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAZ() (TX, TW, TA, TZ) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAW() (TX, TW, TA, TW) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAA() (TX, TW, TA, TA) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAB() (TX, TW, TA, TB) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBX() (TX, TW, TB, TX) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBY() (TX, TW, TB, TY) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBZ() (TX, TW, TB, TZ) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBW() (TX, TW, TB, TW) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBA() (TX, TW, TB, TA) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBB() (TX, TW, TB, TB) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXX() (TX, TA, TX, TX) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXY() (TX, TA, TX, TY) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXZ() (TX, TA, TX, TZ) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXW() (TX, TA, TX, TW) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXA() (TX, TA, TX, TA) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXB() (TX, TA, TX, TB) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYX() (TX, TA, TY, TX) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYY() (TX, TA, TY, TY) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYZ() (TX, TA, TY, TZ) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYW() (TX, TA, TY, TW) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYA() (TX, TA, TY, TA) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYB() (TX, TA, TY, TB) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZX() (TX, TA, TZ, TX) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZY() (TX, TA, TZ, TY) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZZ() (TX, TA, TZ, TZ) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZW() (TX, TA, TZ, TW) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZA() (TX, TA, TZ, TA) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZB() (TX, TA, TZ, TB) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWX() (TX, TA, TW, TX) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWY() (TX, TA, TW, TY) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWZ() (TX, TA, TW, TZ) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWW() (TX, TA, TW, TW) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWA() (TX, TA, TW, TA) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWB() (TX, TA, TW, TB) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAX() (TX, TA, TA, TX) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAY() (TX, TA, TA, TY) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAZ() (TX, TA, TA, TZ) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAW() (TX, TA, TA, TW) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAA() (TX, TA, TA, TA) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAB() (TX, TA, TA, TB) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABX() (TX, TA, TB, TX) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABY() (TX, TA, TB, TY) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABZ() (TX, TA, TB, TZ) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABW() (TX, TA, TB, TW) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABA() (TX, TA, TB, TA) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABB() (TX, TA, TB, TB) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXX() (TX, TB, TX, TX) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXY() (TX, TB, TX, TY) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXZ() (TX, TB, TX, TZ) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXW() (TX, TB, TX, TW) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXA() (TX, TB, TX, TA) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXB() (TX, TB, TX, TB) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYX() (TX, TB, TY, TX) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYY() (TX, TB, TY, TY) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYZ() (TX, TB, TY, TZ) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYW() (TX, TB, TY, TW) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYA() (TX, TB, TY, TA) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYB() (TX, TB, TY, TB) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZX() (TX, TB, TZ, TX) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZY() (TX, TB, TZ, TY) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZZ() (TX, TB, TZ, TZ) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZW() (TX, TB, TZ, TW) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZA() (TX, TB, TZ, TA) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZB() (TX, TB, TZ, TB) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWX() (TX, TB, TW, TX) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWY() (TX, TB, TW, TY) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWZ() (TX, TB, TW, TZ) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWW() (TX, TB, TW, TW) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWA() (TX, TB, TW, TA) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWB() (TX, TB, TW, TB) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAX() (TX, TB, TA, TX) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAY() (TX, TB, TA, TY) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAZ() (TX, TB, TA, TZ) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAW() (TX, TB, TA, TW) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAA() (TX, TB, TA, TA) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAB() (TX, TB, TA, TB) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBX() (TX, TB, TB, TX) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBY() (TX, TB, TB, TY) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBZ() (TX, TB, TB, TZ) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBW() (TX, TB, TB, TW) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBA() (TX, TB, TB, TA) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBB() (TX, TB, TB, TB) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXX() (TY, TX, TX, TX) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXY() (TY, TX, TX, TY) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXZ() (TY, TX, TX, TZ) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXW() (TY, TX, TX, TW) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXA() (TY, TX, TX, TA) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXB() (TY, TX, TX, TB) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYX() (TY, TX, TY, TX) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYY() (TY, TX, TY, TY) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYZ() (TY, TX, TY, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYW() (TY, TX, TY, TW) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYA() (TY, TX, TY, TA) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYB() (TY, TX, TY, TB) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZX() (TY, TX, TZ, TX) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZY() (TY, TX, TZ, TY) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZZ() (TY, TX, TZ, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZW() (TY, TX, TZ, TW) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZA() (TY, TX, TZ, TA) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZB() (TY, TX, TZ, TB) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWX() (TY, TX, TW, TX) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWY() (TY, TX, TW, TY) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWZ() (TY, TX, TW, TZ) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWW() (TY, TX, TW, TW) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWA() (TY, TX, TW, TA) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWB() (TY, TX, TW, TB) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAX() (TY, TX, TA, TX) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAY() (TY, TX, TA, TY) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAZ() (TY, TX, TA, TZ) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAW() (TY, TX, TA, TW) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAA() (TY, TX, TA, TA) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAB() (TY, TX, TA, TB) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBX() (TY, TX, TB, TX) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBY() (TY, TX, TB, TY) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBZ() (TY, TX, TB, TZ) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBW() (TY, TX, TB, TW) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBA() (TY, TX, TB, TA) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBB() (TY, TX, TB, TB) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXX() (TY, TY, TX, TX) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXY() (TY, TY, TX, TY) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXZ() (TY, TY, TX, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXW() (TY, TY, TX, TW) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXA() (TY, TY, TX, TA) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXB() (TY, TY, TX, TB) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYX() (TY, TY, TY, TX) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYY() (TY, TY, TY, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYZ() (TY, TY, TY, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYW() (TY, TY, TY, TW) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYA() (TY, TY, TY, TA) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYB() (TY, TY, TY, TB) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZX() (TY, TY, TZ, TX) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZY() (TY, TY, TZ, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZZ() (TY, TY, TZ, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZW() (TY, TY, TZ, TW) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZA() (TY, TY, TZ, TA) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZB() (TY, TY, TZ, TB) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWX() (TY, TY, TW, TX) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWY() (TY, TY, TW, TY) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWZ() (TY, TY, TW, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWW() (TY, TY, TW, TW) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWA() (TY, TY, TW, TA) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWB() (TY, TY, TW, TB) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAX() (TY, TY, TA, TX) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAY() (TY, TY, TA, TY) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAZ() (TY, TY, TA, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAW() (TY, TY, TA, TW) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAA() (TY, TY, TA, TA) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAB() (TY, TY, TA, TB) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBX() (TY, TY, TB, TX) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBY() (TY, TY, TB, TY) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBZ() (TY, TY, TB, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBW() (TY, TY, TB, TW) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBA() (TY, TY, TB, TA) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBB() (TY, TY, TB, TB) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXX() (TY, TZ, TX, TX) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXY() (TY, TZ, TX, TY) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXZ() (TY, TZ, TX, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXW() (TY, TZ, TX, TW) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXA() (TY, TZ, TX, TA) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXB() (TY, TZ, TX, TB) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYX() (TY, TZ, TY, TX) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYY() (TY, TZ, TY, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYZ() (TY, TZ, TY, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYW() (TY, TZ, TY, TW) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYA() (TY, TZ, TY, TA) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYB() (TY, TZ, TY, TB) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZX() (TY, TZ, TZ, TX) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZY() (TY, TZ, TZ, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZZ() (TY, TZ, TZ, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZW() (TY, TZ, TZ, TW) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZA() (TY, TZ, TZ, TA) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZB() (TY, TZ, TZ, TB) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWX() (TY, TZ, TW, TX) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWY() (TY, TZ, TW, TY) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWZ() (TY, TZ, TW, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWW() (TY, TZ, TW, TW) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWA() (TY, TZ, TW, TA) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWB() (TY, TZ, TW, TB) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAX() (TY, TZ, TA, TX) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAY() (TY, TZ, TA, TY) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAZ() (TY, TZ, TA, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAW() (TY, TZ, TA, TW) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAA() (TY, TZ, TA, TA) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAB() (TY, TZ, TA, TB) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBX() (TY, TZ, TB, TX) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBY() (TY, TZ, TB, TY) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBZ() (TY, TZ, TB, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBW() (TY, TZ, TB, TW) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBA() (TY, TZ, TB, TA) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBB() (TY, TZ, TB, TB) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXX() (TY, TW, TX, TX) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXY() (TY, TW, TX, TY) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXZ() (TY, TW, TX, TZ) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXW() (TY, TW, TX, TW) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXA() (TY, TW, TX, TA) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXB() (TY, TW, TX, TB) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYX() (TY, TW, TY, TX) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYY() (TY, TW, TY, TY) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYZ() (TY, TW, TY, TZ) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYW() (TY, TW, TY, TW) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYA() (TY, TW, TY, TA) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYB() (TY, TW, TY, TB) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZX() (TY, TW, TZ, TX) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZY() (TY, TW, TZ, TY) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZZ() (TY, TW, TZ, TZ) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZW() (TY, TW, TZ, TW) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZA() (TY, TW, TZ, TA) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZB() (TY, TW, TZ, TB) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWX() (TY, TW, TW, TX) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWY() (TY, TW, TW, TY) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWZ() (TY, TW, TW, TZ) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWW() (TY, TW, TW, TW) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWA() (TY, TW, TW, TA) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWB() (TY, TW, TW, TB) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAX() (TY, TW, TA, TX) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAY() (TY, TW, TA, TY) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAZ() (TY, TW, TA, TZ) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAW() (TY, TW, TA, TW) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAA() (TY, TW, TA, TA) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAB() (TY, TW, TA, TB) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBX() (TY, TW, TB, TX) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBY() (TY, TW, TB, TY) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBZ() (TY, TW, TB, TZ) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBW() (TY, TW, TB, TW) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBA() (TY, TW, TB, TA) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBB() (TY, TW, TB, TB) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXX() (TY, TA, TX, TX) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXY() (TY, TA, TX, TY) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXZ() (TY, TA, TX, TZ) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXW() (TY, TA, TX, TW) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXA() (TY, TA, TX, TA) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXB() (TY, TA, TX, TB) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYX() (TY, TA, TY, TX) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYY() (TY, TA, TY, TY) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYZ() (TY, TA, TY, TZ) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYW() (TY, TA, TY, TW) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYA() (TY, TA, TY, TA) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYB() (TY, TA, TY, TB) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZX() (TY, TA, TZ, TX) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZY() (TY, TA, TZ, TY) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZZ() (TY, TA, TZ, TZ) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZW() (TY, TA, TZ, TW) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZA() (TY, TA, TZ, TA) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZB() (TY, TA, TZ, TB) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWX() (TY, TA, TW, TX) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWY() (TY, TA, TW, TY) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWZ() (TY, TA, TW, TZ) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWW() (TY, TA, TW, TW) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWA() (TY, TA, TW, TA) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWB() (TY, TA, TW, TB) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAX() (TY, TA, TA, TX) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAY() (TY, TA, TA, TY) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAZ() (TY, TA, TA, TZ) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAW() (TY, TA, TA, TW) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAA() (TY, TA, TA, TA) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAB() (TY, TA, TA, TB) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABX() (TY, TA, TB, TX) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABY() (TY, TA, TB, TY) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABZ() (TY, TA, TB, TZ) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABW() (TY, TA, TB, TW) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABA() (TY, TA, TB, TA) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABB() (TY, TA, TB, TB) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXX() (TY, TB, TX, TX) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXY() (TY, TB, TX, TY) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXZ() (TY, TB, TX, TZ) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXW() (TY, TB, TX, TW) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXA() (TY, TB, TX, TA) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXB() (TY, TB, TX, TB) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYX() (TY, TB, TY, TX) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYY() (TY, TB, TY, TY) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYZ() (TY, TB, TY, TZ) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYW() (TY, TB, TY, TW) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYA() (TY, TB, TY, TA) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYB() (TY, TB, TY, TB) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZX() (TY, TB, TZ, TX) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZY() (TY, TB, TZ, TY) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZZ() (TY, TB, TZ, TZ) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZW() (TY, TB, TZ, TW) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZA() (TY, TB, TZ, TA) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZB() (TY, TB, TZ, TB) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWX() (TY, TB, TW, TX) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWY() (TY, TB, TW, TY) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWZ() (TY, TB, TW, TZ) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWW() (TY, TB, TW, TW) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWA() (TY, TB, TW, TA) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWB() (TY, TB, TW, TB) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAX() (TY, TB, TA, TX) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAY() (TY, TB, TA, TY) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAZ() (TY, TB, TA, TZ) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAW() (TY, TB, TA, TW) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAA() (TY, TB, TA, TA) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAB() (TY, TB, TA, TB) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBX() (TY, TB, TB, TX) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBY() (TY, TB, TB, TY) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBZ() (TY, TB, TB, TZ) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBW() (TY, TB, TB, TW) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBA() (TY, TB, TB, TA) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBB() (TY, TB, TB, TB) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXX() (TZ, TX, TX, TX) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXY() (TZ, TX, TX, TY) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXZ() (TZ, TX, TX, TZ) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXW() (TZ, TX, TX, TW) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXA() (TZ, TX, TX, TA) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXB() (TZ, TX, TX, TB) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYX() (TZ, TX, TY, TX) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYY() (TZ, TX, TY, TY) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYZ() (TZ, TX, TY, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYW() (TZ, TX, TY, TW) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYA() (TZ, TX, TY, TA) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYB() (TZ, TX, TY, TB) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZX() (TZ, TX, TZ, TX) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZY() (TZ, TX, TZ, TY) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZZ() (TZ, TX, TZ, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZW() (TZ, TX, TZ, TW) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZA() (TZ, TX, TZ, TA) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZB() (TZ, TX, TZ, TB) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWX() (TZ, TX, TW, TX) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWY() (TZ, TX, TW, TY) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWZ() (TZ, TX, TW, TZ) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWW() (TZ, TX, TW, TW) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWA() (TZ, TX, TW, TA) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWB() (TZ, TX, TW, TB) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAX() (TZ, TX, TA, TX) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAY() (TZ, TX, TA, TY) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAZ() (TZ, TX, TA, TZ) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAW() (TZ, TX, TA, TW) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAA() (TZ, TX, TA, TA) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAB() (TZ, TX, TA, TB) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBX() (TZ, TX, TB, TX) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBY() (TZ, TX, TB, TY) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBZ() (TZ, TX, TB, TZ) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBW() (TZ, TX, TB, TW) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBA() (TZ, TX, TB, TA) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBB() (TZ, TX, TB, TB) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXX() (TZ, TY, TX, TX) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXY() (TZ, TY, TX, TY) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXZ() (TZ, TY, TX, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXW() (TZ, TY, TX, TW) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXA() (TZ, TY, TX, TA) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXB() (TZ, TY, TX, TB) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYX() (TZ, TY, TY, TX) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYY() (TZ, TY, TY, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYZ() (TZ, TY, TY, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYW() (TZ, TY, TY, TW) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYA() (TZ, TY, TY, TA) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYB() (TZ, TY, TY, TB) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZX() (TZ, TY, TZ, TX) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZY() (TZ, TY, TZ, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZZ() (TZ, TY, TZ, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZW() (TZ, TY, TZ, TW) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZA() (TZ, TY, TZ, TA) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZB() (TZ, TY, TZ, TB) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWX() (TZ, TY, TW, TX) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWY() (TZ, TY, TW, TY) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWZ() (TZ, TY, TW, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWW() (TZ, TY, TW, TW) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWA() (TZ, TY, TW, TA) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWB() (TZ, TY, TW, TB) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAX() (TZ, TY, TA, TX) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAY() (TZ, TY, TA, TY) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAZ() (TZ, TY, TA, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAW() (TZ, TY, TA, TW) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAA() (TZ, TY, TA, TA) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAB() (TZ, TY, TA, TB) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBX() (TZ, TY, TB, TX) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBY() (TZ, TY, TB, TY) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBZ() (TZ, TY, TB, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBW() (TZ, TY, TB, TW) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBA() (TZ, TY, TB, TA) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBB() (TZ, TY, TB, TB) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXX() (TZ, TZ, TX, TX) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXY() (TZ, TZ, TX, TY) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXZ() (TZ, TZ, TX, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXW() (TZ, TZ, TX, TW) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXA() (TZ, TZ, TX, TA) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXB() (TZ, TZ, TX, TB) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYX() (TZ, TZ, TY, TX) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYY() (TZ, TZ, TY, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYZ() (TZ, TZ, TY, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYW() (TZ, TZ, TY, TW) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYA() (TZ, TZ, TY, TA) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYB() (TZ, TZ, TY, TB) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZX() (TZ, TZ, TZ, TX) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZY() (TZ, TZ, TZ, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZZ() (TZ, TZ, TZ, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZW() (TZ, TZ, TZ, TW) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZA() (TZ, TZ, TZ, TA) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZB() (TZ, TZ, TZ, TB) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWX() (TZ, TZ, TW, TX) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWY() (TZ, TZ, TW, TY) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWZ() (TZ, TZ, TW, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWW() (TZ, TZ, TW, TW) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWA() (TZ, TZ, TW, TA) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWB() (TZ, TZ, TW, TB) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAX() (TZ, TZ, TA, TX) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAY() (TZ, TZ, TA, TY) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAZ() (TZ, TZ, TA, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAW() (TZ, TZ, TA, TW) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAA() (TZ, TZ, TA, TA) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAB() (TZ, TZ, TA, TB) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBX() (TZ, TZ, TB, TX) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBY() (TZ, TZ, TB, TY) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBZ() (TZ, TZ, TB, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBW() (TZ, TZ, TB, TW) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBA() (TZ, TZ, TB, TA) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBB() (TZ, TZ, TB, TB) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXX() (TZ, TW, TX, TX) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXY() (TZ, TW, TX, TY) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXZ() (TZ, TW, TX, TZ) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXW() (TZ, TW, TX, TW) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXA() (TZ, TW, TX, TA) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXB() (TZ, TW, TX, TB) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYX() (TZ, TW, TY, TX) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYY() (TZ, TW, TY, TY) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYZ() (TZ, TW, TY, TZ) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYW() (TZ, TW, TY, TW) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYA() (TZ, TW, TY, TA) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYB() (TZ, TW, TY, TB) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZX() (TZ, TW, TZ, TX) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZY() (TZ, TW, TZ, TY) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZZ() (TZ, TW, TZ, TZ) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZW() (TZ, TW, TZ, TW) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZA() (TZ, TW, TZ, TA) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZB() (TZ, TW, TZ, TB) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWX() (TZ, TW, TW, TX) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWY() (TZ, TW, TW, TY) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWZ() (TZ, TW, TW, TZ) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWW() (TZ, TW, TW, TW) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWA() (TZ, TW, TW, TA) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWB() (TZ, TW, TW, TB) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAX() (TZ, TW, TA, TX) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAY() (TZ, TW, TA, TY) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAZ() (TZ, TW, TA, TZ) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAW() (TZ, TW, TA, TW) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAA() (TZ, TW, TA, TA) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAB() (TZ, TW, TA, TB) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBX() (TZ, TW, TB, TX) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBY() (TZ, TW, TB, TY) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBZ() (TZ, TW, TB, TZ) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBW() (TZ, TW, TB, TW) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBA() (TZ, TW, TB, TA) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBB() (TZ, TW, TB, TB) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXX() (TZ, TA, TX, TX) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXY() (TZ, TA, TX, TY) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXZ() (TZ, TA, TX, TZ) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXW() (TZ, TA, TX, TW) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXA() (TZ, TA, TX, TA) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXB() (TZ, TA, TX, TB) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYX() (TZ, TA, TY, TX) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYY() (TZ, TA, TY, TY) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYZ() (TZ, TA, TY, TZ) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYW() (TZ, TA, TY, TW) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYA() (TZ, TA, TY, TA) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYB() (TZ, TA, TY, TB) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZX() (TZ, TA, TZ, TX) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZY() (TZ, TA, TZ, TY) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZZ() (TZ, TA, TZ, TZ) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZW() (TZ, TA, TZ, TW) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZA() (TZ, TA, TZ, TA) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZB() (TZ, TA, TZ, TB) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWX() (TZ, TA, TW, TX) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWY() (TZ, TA, TW, TY) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWZ() (TZ, TA, TW, TZ) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWW() (TZ, TA, TW, TW) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWA() (TZ, TA, TW, TA) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWB() (TZ, TA, TW, TB) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAX() (TZ, TA, TA, TX) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAY() (TZ, TA, TA, TY) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAZ() (TZ, TA, TA, TZ) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAW() (TZ, TA, TA, TW) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAA() (TZ, TA, TA, TA) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAB() (TZ, TA, TA, TB) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABX() (TZ, TA, TB, TX) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABY() (TZ, TA, TB, TY) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABZ() (TZ, TA, TB, TZ) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABW() (TZ, TA, TB, TW) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABA() (TZ, TA, TB, TA) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABB() (TZ, TA, TB, TB) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXX() (TZ, TB, TX, TX) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXY() (TZ, TB, TX, TY) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXZ() (TZ, TB, TX, TZ) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXW() (TZ, TB, TX, TW) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXA() (TZ, TB, TX, TA) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXB() (TZ, TB, TX, TB) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYX() (TZ, TB, TY, TX) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYY() (TZ, TB, TY, TY) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYZ() (TZ, TB, TY, TZ) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYW() (TZ, TB, TY, TW) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYA() (TZ, TB, TY, TA) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYB() (TZ, TB, TY, TB) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZX() (TZ, TB, TZ, TX) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZY() (TZ, TB, TZ, TY) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZZ() (TZ, TB, TZ, TZ) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZW() (TZ, TB, TZ, TW) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZA() (TZ, TB, TZ, TA) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZB() (TZ, TB, TZ, TB) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWX() (TZ, TB, TW, TX) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWY() (TZ, TB, TW, TY) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWZ() (TZ, TB, TW, TZ) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWW() (TZ, TB, TW, TW) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWA() (TZ, TB, TW, TA) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWB() (TZ, TB, TW, TB) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAX() (TZ, TB, TA, TX) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAY() (TZ, TB, TA, TY) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAZ() (TZ, TB, TA, TZ) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAW() (TZ, TB, TA, TW) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAA() (TZ, TB, TA, TA) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAB() (TZ, TB, TA, TB) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBX() (TZ, TB, TB, TX) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBY() (TZ, TB, TB, TY) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBZ() (TZ, TB, TB, TZ) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBW() (TZ, TB, TB, TW) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBA() (TZ, TB, TB, TA) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBB() (TZ, TB, TB, TB) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXX() (TW, TX, TX, TX) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXY() (TW, TX, TX, TY) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXZ() (TW, TX, TX, TZ) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXW() (TW, TX, TX, TW) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXA() (TW, TX, TX, TA) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXB() (TW, TX, TX, TB) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYX() (TW, TX, TY, TX) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYY() (TW, TX, TY, TY) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYZ() (TW, TX, TY, TZ) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYW() (TW, TX, TY, TW) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYA() (TW, TX, TY, TA) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYB() (TW, TX, TY, TB) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZX() (TW, TX, TZ, TX) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZY() (TW, TX, TZ, TY) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZZ() (TW, TX, TZ, TZ) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZW() (TW, TX, TZ, TW) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZA() (TW, TX, TZ, TA) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZB() (TW, TX, TZ, TB) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWX() (TW, TX, TW, TX) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWY() (TW, TX, TW, TY) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWZ() (TW, TX, TW, TZ) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWW() (TW, TX, TW, TW) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWA() (TW, TX, TW, TA) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWB() (TW, TX, TW, TB) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAX() (TW, TX, TA, TX) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAY() (TW, TX, TA, TY) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAZ() (TW, TX, TA, TZ) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAW() (TW, TX, TA, TW) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAA() (TW, TX, TA, TA) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAB() (TW, TX, TA, TB) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBX() (TW, TX, TB, TX) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBY() (TW, TX, TB, TY) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBZ() (TW, TX, TB, TZ) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBW() (TW, TX, TB, TW) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBA() (TW, TX, TB, TA) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBB() (TW, TX, TB, TB) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXX() (TW, TY, TX, TX) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXY() (TW, TY, TX, TY) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXZ() (TW, TY, TX, TZ) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXW() (TW, TY, TX, TW) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXA() (TW, TY, TX, TA) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXB() (TW, TY, TX, TB) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYX() (TW, TY, TY, TX) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYY() (TW, TY, TY, TY) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYZ() (TW, TY, TY, TZ) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYW() (TW, TY, TY, TW) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYA() (TW, TY, TY, TA) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYB() (TW, TY, TY, TB) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZX() (TW, TY, TZ, TX) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZY() (TW, TY, TZ, TY) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZZ() (TW, TY, TZ, TZ) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZW() (TW, TY, TZ, TW) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZA() (TW, TY, TZ, TA) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZB() (TW, TY, TZ, TB) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWX() (TW, TY, TW, TX) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWY() (TW, TY, TW, TY) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWZ() (TW, TY, TW, TZ) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWW() (TW, TY, TW, TW) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWA() (TW, TY, TW, TA) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWB() (TW, TY, TW, TB) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAX() (TW, TY, TA, TX) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAY() (TW, TY, TA, TY) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAZ() (TW, TY, TA, TZ) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAW() (TW, TY, TA, TW) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAA() (TW, TY, TA, TA) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAB() (TW, TY, TA, TB) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBX() (TW, TY, TB, TX) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBY() (TW, TY, TB, TY) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBZ() (TW, TY, TB, TZ) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBW() (TW, TY, TB, TW) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBA() (TW, TY, TB, TA) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBB() (TW, TY, TB, TB) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXX() (TW, TZ, TX, TX) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXY() (TW, TZ, TX, TY) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXZ() (TW, TZ, TX, TZ) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXW() (TW, TZ, TX, TW) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXA() (TW, TZ, TX, TA) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXB() (TW, TZ, TX, TB) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYX() (TW, TZ, TY, TX) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYY() (TW, TZ, TY, TY) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYZ() (TW, TZ, TY, TZ) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYW() (TW, TZ, TY, TW) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYA() (TW, TZ, TY, TA) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYB() (TW, TZ, TY, TB) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZX() (TW, TZ, TZ, TX) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZY() (TW, TZ, TZ, TY) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZZ() (TW, TZ, TZ, TZ) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZW() (TW, TZ, TZ, TW) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZA() (TW, TZ, TZ, TA) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZB() (TW, TZ, TZ, TB) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWX() (TW, TZ, TW, TX) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWY() (TW, TZ, TW, TY) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWZ() (TW, TZ, TW, TZ) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWW() (TW, TZ, TW, TW) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWA() (TW, TZ, TW, TA) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWB() (TW, TZ, TW, TB) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAX() (TW, TZ, TA, TX) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAY() (TW, TZ, TA, TY) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAZ() (TW, TZ, TA, TZ) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAW() (TW, TZ, TA, TW) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAA() (TW, TZ, TA, TA) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAB() (TW, TZ, TA, TB) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBX() (TW, TZ, TB, TX) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBY() (TW, TZ, TB, TY) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBZ() (TW, TZ, TB, TZ) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBW() (TW, TZ, TB, TW) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBA() (TW, TZ, TB, TA) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBB() (TW, TZ, TB, TB) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXX() (TW, TW, TX, TX) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXY() (TW, TW, TX, TY) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXZ() (TW, TW, TX, TZ) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXW() (TW, TW, TX, TW) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXA() (TW, TW, TX, TA) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXB() (TW, TW, TX, TB) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYX() (TW, TW, TY, TX) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYY() (TW, TW, TY, TY) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYZ() (TW, TW, TY, TZ) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYW() (TW, TW, TY, TW) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYA() (TW, TW, TY, TA) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYB() (TW, TW, TY, TB) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZX() (TW, TW, TZ, TX) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZY() (TW, TW, TZ, TY) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZZ() (TW, TW, TZ, TZ) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZW() (TW, TW, TZ, TW) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZA() (TW, TW, TZ, TA) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZB() (TW, TW, TZ, TB) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWX() (TW, TW, TW, TX) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWY() (TW, TW, TW, TY) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWZ() (TW, TW, TW, TZ) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWW() (TW, TW, TW, TW) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWA() (TW, TW, TW, TA) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWB() (TW, TW, TW, TB) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAX() (TW, TW, TA, TX) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAY() (TW, TW, TA, TY) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAZ() (TW, TW, TA, TZ) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAW() (TW, TW, TA, TW) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAA() (TW, TW, TA, TA) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAB() (TW, TW, TA, TB) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBX() (TW, TW, TB, TX) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBY() (TW, TW, TB, TY) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBZ() (TW, TW, TB, TZ) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBW() (TW, TW, TB, TW) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBA() (TW, TW, TB, TA) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBB() (TW, TW, TB, TB) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXX() (TW, TA, TX, TX) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXY() (TW, TA, TX, TY) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXZ() (TW, TA, TX, TZ) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXW() (TW, TA, TX, TW) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXA() (TW, TA, TX, TA) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXB() (TW, TA, TX, TB) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYX() (TW, TA, TY, TX) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYY() (TW, TA, TY, TY) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYZ() (TW, TA, TY, TZ) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYW() (TW, TA, TY, TW) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYA() (TW, TA, TY, TA) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYB() (TW, TA, TY, TB) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZX() (TW, TA, TZ, TX) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZY() (TW, TA, TZ, TY) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZZ() (TW, TA, TZ, TZ) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZW() (TW, TA, TZ, TW) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZA() (TW, TA, TZ, TA) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZB() (TW, TA, TZ, TB) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWX() (TW, TA, TW, TX) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWY() (TW, TA, TW, TY) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWZ() (TW, TA, TW, TZ) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWW() (TW, TA, TW, TW) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWA() (TW, TA, TW, TA) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWB() (TW, TA, TW, TB) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAX() (TW, TA, TA, TX) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAY() (TW, TA, TA, TY) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAZ() (TW, TA, TA, TZ) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAW() (TW, TA, TA, TW) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAA() (TW, TA, TA, TA) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAB() (TW, TA, TA, TB) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABX() (TW, TA, TB, TX) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABY() (TW, TA, TB, TY) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABZ() (TW, TA, TB, TZ) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABW() (TW, TA, TB, TW) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABA() (TW, TA, TB, TA) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABB() (TW, TA, TB, TB) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXX() (TW, TB, TX, TX) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXY() (TW, TB, TX, TY) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXZ() (TW, TB, TX, TZ) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXW() (TW, TB, TX, TW) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXA() (TW, TB, TX, TA) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXB() (TW, TB, TX, TB) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYX() (TW, TB, TY, TX) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYY() (TW, TB, TY, TY) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYZ() (TW, TB, TY, TZ) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYW() (TW, TB, TY, TW) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYA() (TW, TB, TY, TA) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYB() (TW, TB, TY, TB) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZX() (TW, TB, TZ, TX) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZY() (TW, TB, TZ, TY) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZZ() (TW, TB, TZ, TZ) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZW() (TW, TB, TZ, TW) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZA() (TW, TB, TZ, TA) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZB() (TW, TB, TZ, TB) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWX() (TW, TB, TW, TX) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWY() (TW, TB, TW, TY) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWZ() (TW, TB, TW, TZ) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWW() (TW, TB, TW, TW) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWA() (TW, TB, TW, TA) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWB() (TW, TB, TW, TB) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAX() (TW, TB, TA, TX) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAY() (TW, TB, TA, TY) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAZ() (TW, TB, TA, TZ) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAW() (TW, TB, TA, TW) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAA() (TW, TB, TA, TA) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAB() (TW, TB, TA, TB) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBX() (TW, TB, TB, TX) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBY() (TW, TB, TB, TY) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBZ() (TW, TB, TB, TZ) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBW() (TW, TB, TB, TW) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBA() (TW, TB, TB, TA) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBB() (TW, TB, TB, TB) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXX() (TA, TX, TX, TX) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXY() (TA, TX, TX, TY) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXZ() (TA, TX, TX, TZ) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXW() (TA, TX, TX, TW) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXA() (TA, TX, TX, TA) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXB() (TA, TX, TX, TB) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYX() (TA, TX, TY, TX) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYY() (TA, TX, TY, TY) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYZ() (TA, TX, TY, TZ) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYW() (TA, TX, TY, TW) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYA() (TA, TX, TY, TA) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYB() (TA, TX, TY, TB) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZX() (TA, TX, TZ, TX) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZY() (TA, TX, TZ, TY) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZZ() (TA, TX, TZ, TZ) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZW() (TA, TX, TZ, TW) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZA() (TA, TX, TZ, TA) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZB() (TA, TX, TZ, TB) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWX() (TA, TX, TW, TX) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWY() (TA, TX, TW, TY) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWZ() (TA, TX, TW, TZ) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWW() (TA, TX, TW, TW) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWA() (TA, TX, TW, TA) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWB() (TA, TX, TW, TB) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAX() (TA, TX, TA, TX) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAY() (TA, TX, TA, TY) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAZ() (TA, TX, TA, TZ) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAW() (TA, TX, TA, TW) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAA() (TA, TX, TA, TA) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAB() (TA, TX, TA, TB) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBX() (TA, TX, TB, TX) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBY() (TA, TX, TB, TY) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBZ() (TA, TX, TB, TZ) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBW() (TA, TX, TB, TW) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBA() (TA, TX, TB, TA) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBB() (TA, TX, TB, TB) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXX() (TA, TY, TX, TX) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXY() (TA, TY, TX, TY) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXZ() (TA, TY, TX, TZ) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXW() (TA, TY, TX, TW) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXA() (TA, TY, TX, TA) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXB() (TA, TY, TX, TB) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYX() (TA, TY, TY, TX) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYY() (TA, TY, TY, TY) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYZ() (TA, TY, TY, TZ) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYW() (TA, TY, TY, TW) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYA() (TA, TY, TY, TA) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYB() (TA, TY, TY, TB) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZX() (TA, TY, TZ, TX) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZY() (TA, TY, TZ, TY) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZZ() (TA, TY, TZ, TZ) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZW() (TA, TY, TZ, TW) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZA() (TA, TY, TZ, TA) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZB() (TA, TY, TZ, TB) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWX() (TA, TY, TW, TX) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWY() (TA, TY, TW, TY) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWZ() (TA, TY, TW, TZ) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWW() (TA, TY, TW, TW) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWA() (TA, TY, TW, TA) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWB() (TA, TY, TW, TB) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAX() (TA, TY, TA, TX) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAY() (TA, TY, TA, TY) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAZ() (TA, TY, TA, TZ) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAW() (TA, TY, TA, TW) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAA() (TA, TY, TA, TA) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAB() (TA, TY, TA, TB) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBX() (TA, TY, TB, TX) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBY() (TA, TY, TB, TY) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBZ() (TA, TY, TB, TZ) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBW() (TA, TY, TB, TW) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBA() (TA, TY, TB, TA) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBB() (TA, TY, TB, TB) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXX() (TA, TZ, TX, TX) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXY() (TA, TZ, TX, TY) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXZ() (TA, TZ, TX, TZ) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXW() (TA, TZ, TX, TW) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXA() (TA, TZ, TX, TA) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXB() (TA, TZ, TX, TB) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYX() (TA, TZ, TY, TX) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYY() (TA, TZ, TY, TY) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYZ() (TA, TZ, TY, TZ) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYW() (TA, TZ, TY, TW) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYA() (TA, TZ, TY, TA) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYB() (TA, TZ, TY, TB) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZX() (TA, TZ, TZ, TX) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZY() (TA, TZ, TZ, TY) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZZ() (TA, TZ, TZ, TZ) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZW() (TA, TZ, TZ, TW) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZA() (TA, TZ, TZ, TA) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZB() (TA, TZ, TZ, TB) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWX() (TA, TZ, TW, TX) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWY() (TA, TZ, TW, TY) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWZ() (TA, TZ, TW, TZ) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWW() (TA, TZ, TW, TW) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWA() (TA, TZ, TW, TA) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWB() (TA, TZ, TW, TB) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAX() (TA, TZ, TA, TX) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAY() (TA, TZ, TA, TY) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAZ() (TA, TZ, TA, TZ) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAW() (TA, TZ, TA, TW) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAA() (TA, TZ, TA, TA) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAB() (TA, TZ, TA, TB) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBX() (TA, TZ, TB, TX) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBY() (TA, TZ, TB, TY) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBZ() (TA, TZ, TB, TZ) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBW() (TA, TZ, TB, TW) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBA() (TA, TZ, TB, TA) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBB() (TA, TZ, TB, TB) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXX() (TA, TW, TX, TX) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXY() (TA, TW, TX, TY) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXZ() (TA, TW, TX, TZ) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXW() (TA, TW, TX, TW) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXA() (TA, TW, TX, TA) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXB() (TA, TW, TX, TB) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYX() (TA, TW, TY, TX) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYY() (TA, TW, TY, TY) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYZ() (TA, TW, TY, TZ) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYW() (TA, TW, TY, TW) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYA() (TA, TW, TY, TA) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYB() (TA, TW, TY, TB) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZX() (TA, TW, TZ, TX) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZY() (TA, TW, TZ, TY) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZZ() (TA, TW, TZ, TZ) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZW() (TA, TW, TZ, TW) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZA() (TA, TW, TZ, TA) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZB() (TA, TW, TZ, TB) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWX() (TA, TW, TW, TX) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWY() (TA, TW, TW, TY) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWZ() (TA, TW, TW, TZ) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWW() (TA, TW, TW, TW) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWA() (TA, TW, TW, TA) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWB() (TA, TW, TW, TB) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAX() (TA, TW, TA, TX) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAY() (TA, TW, TA, TY) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAZ() (TA, TW, TA, TZ) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAW() (TA, TW, TA, TW) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAA() (TA, TW, TA, TA) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAB() (TA, TW, TA, TB) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBX() (TA, TW, TB, TX) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBY() (TA, TW, TB, TY) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBZ() (TA, TW, TB, TZ) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBW() (TA, TW, TB, TW) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBA() (TA, TW, TB, TA) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBB() (TA, TW, TB, TB) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXX() (TA, TA, TX, TX) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXY() (TA, TA, TX, TY) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXZ() (TA, TA, TX, TZ) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXW() (TA, TA, TX, TW) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXA() (TA, TA, TX, TA) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXB() (TA, TA, TX, TB) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYX() (TA, TA, TY, TX) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYY() (TA, TA, TY, TY) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYZ() (TA, TA, TY, TZ) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYW() (TA, TA, TY, TW) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYA() (TA, TA, TY, TA) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYB() (TA, TA, TY, TB) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZX() (TA, TA, TZ, TX) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZY() (TA, TA, TZ, TY) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZZ() (TA, TA, TZ, TZ) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZW() (TA, TA, TZ, TW) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZA() (TA, TA, TZ, TA) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZB() (TA, TA, TZ, TB) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWX() (TA, TA, TW, TX) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWY() (TA, TA, TW, TY) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWZ() (TA, TA, TW, TZ) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWW() (TA, TA, TW, TW) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWA() (TA, TA, TW, TA) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWB() (TA, TA, TW, TB) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAX() (TA, TA, TA, TX) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAY() (TA, TA, TA, TY) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAZ() (TA, TA, TA, TZ) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAW() (TA, TA, TA, TW) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAA() (TA, TA, TA, TA) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAB() (TA, TA, TA, TB) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABX() (TA, TA, TB, TX) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABY() (TA, TA, TB, TY) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABZ() (TA, TA, TB, TZ) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABW() (TA, TA, TB, TW) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABA() (TA, TA, TB, TA) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABB() (TA, TA, TB, TB) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXX() (TA, TB, TX, TX) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXY() (TA, TB, TX, TY) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXZ() (TA, TB, TX, TZ) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXW() (TA, TB, TX, TW) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXA() (TA, TB, TX, TA) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXB() (TA, TB, TX, TB) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYX() (TA, TB, TY, TX) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYY() (TA, TB, TY, TY) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYZ() (TA, TB, TY, TZ) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYW() (TA, TB, TY, TW) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYA() (TA, TB, TY, TA) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYB() (TA, TB, TY, TB) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZX() (TA, TB, TZ, TX) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZY() (TA, TB, TZ, TY) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZZ() (TA, TB, TZ, TZ) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZW() (TA, TB, TZ, TW) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZA() (TA, TB, TZ, TA) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZB() (TA, TB, TZ, TB) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWX() (TA, TB, TW, TX) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWY() (TA, TB, TW, TY) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWZ() (TA, TB, TW, TZ) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWW() (TA, TB, TW, TW) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWA() (TA, TB, TW, TA) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWB() (TA, TB, TW, TB) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAX() (TA, TB, TA, TX) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAY() (TA, TB, TA, TY) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAZ() (TA, TB, TA, TZ) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAW() (TA, TB, TA, TW) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAA() (TA, TB, TA, TA) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAB() (TA, TB, TA, TB) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBX() (TA, TB, TB, TX) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBY() (TA, TB, TB, TY) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBZ() (TA, TB, TB, TZ) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBW() (TA, TB, TB, TW) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBA() (TA, TB, TB, TA) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBB() (TA, TB, TB, TB) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXX() (TB, TX, TX, TX) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXY() (TB, TX, TX, TY) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXZ() (TB, TX, TX, TZ) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXW() (TB, TX, TX, TW) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXA() (TB, TX, TX, TA) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXB() (TB, TX, TX, TB) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYX() (TB, TX, TY, TX) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYY() (TB, TX, TY, TY) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYZ() (TB, TX, TY, TZ) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYW() (TB, TX, TY, TW) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYA() (TB, TX, TY, TA) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYB() (TB, TX, TY, TB) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZX() (TB, TX, TZ, TX) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZY() (TB, TX, TZ, TY) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZZ() (TB, TX, TZ, TZ) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZW() (TB, TX, TZ, TW) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZA() (TB, TX, TZ, TA) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZB() (TB, TX, TZ, TB) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWX() (TB, TX, TW, TX) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWY() (TB, TX, TW, TY) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWZ() (TB, TX, TW, TZ) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWW() (TB, TX, TW, TW) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWA() (TB, TX, TW, TA) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWB() (TB, TX, TW, TB) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAX() (TB, TX, TA, TX) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAY() (TB, TX, TA, TY) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAZ() (TB, TX, TA, TZ) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAW() (TB, TX, TA, TW) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAA() (TB, TX, TA, TA) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAB() (TB, TX, TA, TB) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBX() (TB, TX, TB, TX) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBY() (TB, TX, TB, TY) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBZ() (TB, TX, TB, TZ) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBW() (TB, TX, TB, TW) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBA() (TB, TX, TB, TA) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBB() (TB, TX, TB, TB) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXX() (TB, TY, TX, TX) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXY() (TB, TY, TX, TY) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXZ() (TB, TY, TX, TZ) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXW() (TB, TY, TX, TW) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXA() (TB, TY, TX, TA) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXB() (TB, TY, TX, TB) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYX() (TB, TY, TY, TX) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYY() (TB, TY, TY, TY) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYZ() (TB, TY, TY, TZ) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYW() (TB, TY, TY, TW) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYA() (TB, TY, TY, TA) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYB() (TB, TY, TY, TB) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZX() (TB, TY, TZ, TX) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZY() (TB, TY, TZ, TY) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZZ() (TB, TY, TZ, TZ) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZW() (TB, TY, TZ, TW) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZA() (TB, TY, TZ, TA) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZB() (TB, TY, TZ, TB) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWX() (TB, TY, TW, TX) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWY() (TB, TY, TW, TY) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWZ() (TB, TY, TW, TZ) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWW() (TB, TY, TW, TW) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWA() (TB, TY, TW, TA) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWB() (TB, TY, TW, TB) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAX() (TB, TY, TA, TX) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAY() (TB, TY, TA, TY) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAZ() (TB, TY, TA, TZ) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAW() (TB, TY, TA, TW) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAA() (TB, TY, TA, TA) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAB() (TB, TY, TA, TB) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBX() (TB, TY, TB, TX) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBY() (TB, TY, TB, TY) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBZ() (TB, TY, TB, TZ) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBW() (TB, TY, TB, TW) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBA() (TB, TY, TB, TA) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBB() (TB, TY, TB, TB) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXX() (TB, TZ, TX, TX) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXY() (TB, TZ, TX, TY) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXZ() (TB, TZ, TX, TZ) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXW() (TB, TZ, TX, TW) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXA() (TB, TZ, TX, TA) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXB() (TB, TZ, TX, TB) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYX() (TB, TZ, TY, TX) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYY() (TB, TZ, TY, TY) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYZ() (TB, TZ, TY, TZ) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYW() (TB, TZ, TY, TW) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYA() (TB, TZ, TY, TA) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYB() (TB, TZ, TY, TB) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZX() (TB, TZ, TZ, TX) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZY() (TB, TZ, TZ, TY) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZZ() (TB, TZ, TZ, TZ) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZW() (TB, TZ, TZ, TW) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZA() (TB, TZ, TZ, TA) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZB() (TB, TZ, TZ, TB) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWX() (TB, TZ, TW, TX) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWY() (TB, TZ, TW, TY) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWZ() (TB, TZ, TW, TZ) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWW() (TB, TZ, TW, TW) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWA() (TB, TZ, TW, TA) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWB() (TB, TZ, TW, TB) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAX() (TB, TZ, TA, TX) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAY() (TB, TZ, TA, TY) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAZ() (TB, TZ, TA, TZ) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAW() (TB, TZ, TA, TW) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAA() (TB, TZ, TA, TA) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAB() (TB, TZ, TA, TB) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBX() (TB, TZ, TB, TX) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBY() (TB, TZ, TB, TY) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBZ() (TB, TZ, TB, TZ) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBW() (TB, TZ, TB, TW) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBA() (TB, TZ, TB, TA) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBB() (TB, TZ, TB, TB) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXX() (TB, TW, TX, TX) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXY() (TB, TW, TX, TY) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXZ() (TB, TW, TX, TZ) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXW() (TB, TW, TX, TW) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXA() (TB, TW, TX, TA) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXB() (TB, TW, TX, TB) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYX() (TB, TW, TY, TX) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYY() (TB, TW, TY, TY) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYZ() (TB, TW, TY, TZ) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYW() (TB, TW, TY, TW) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYA() (TB, TW, TY, TA) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYB() (TB, TW, TY, TB) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZX() (TB, TW, TZ, TX) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZY() (TB, TW, TZ, TY) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZZ() (TB, TW, TZ, TZ) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZW() (TB, TW, TZ, TW) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZA() (TB, TW, TZ, TA) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZB() (TB, TW, TZ, TB) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWX() (TB, TW, TW, TX) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWY() (TB, TW, TW, TY) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWZ() (TB, TW, TW, TZ) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWW() (TB, TW, TW, TW) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWA() (TB, TW, TW, TA) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWB() (TB, TW, TW, TB) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAX() (TB, TW, TA, TX) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAY() (TB, TW, TA, TY) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAZ() (TB, TW, TA, TZ) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAW() (TB, TW, TA, TW) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAA() (TB, TW, TA, TA) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAB() (TB, TW, TA, TB) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBX() (TB, TW, TB, TX) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBY() (TB, TW, TB, TY) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBZ() (TB, TW, TB, TZ) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBW() (TB, TW, TB, TW) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBA() (TB, TW, TB, TA) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBB() (TB, TW, TB, TB) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXX() (TB, TA, TX, TX) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXY() (TB, TA, TX, TY) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXZ() (TB, TA, TX, TZ) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXW() (TB, TA, TX, TW) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXA() (TB, TA, TX, TA) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXB() (TB, TA, TX, TB) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYX() (TB, TA, TY, TX) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYY() (TB, TA, TY, TY) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYZ() (TB, TA, TY, TZ) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYW() (TB, TA, TY, TW) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYA() (TB, TA, TY, TA) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYB() (TB, TA, TY, TB) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZX() (TB, TA, TZ, TX) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZY() (TB, TA, TZ, TY) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZZ() (TB, TA, TZ, TZ) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZW() (TB, TA, TZ, TW) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZA() (TB, TA, TZ, TA) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZB() (TB, TA, TZ, TB) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWX() (TB, TA, TW, TX) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWY() (TB, TA, TW, TY) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWZ() (TB, TA, TW, TZ) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWW() (TB, TA, TW, TW) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWA() (TB, TA, TW, TA) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWB() (TB, TA, TW, TB) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAX() (TB, TA, TA, TX) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAY() (TB, TA, TA, TY) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAZ() (TB, TA, TA, TZ) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAW() (TB, TA, TA, TW) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAA() (TB, TA, TA, TA) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAB() (TB, TA, TA, TB) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABX() (TB, TA, TB, TX) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABY() (TB, TA, TB, TY) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABZ() (TB, TA, TB, TZ) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABW() (TB, TA, TB, TW) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABA() (TB, TA, TB, TA) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABB() (TB, TA, TB, TB) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXX() (TB, TB, TX, TX) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXY() (TB, TB, TX, TY) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXZ() (TB, TB, TX, TZ) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXW() (TB, TB, TX, TW) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXA() (TB, TB, TX, TA) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXB() (TB, TB, TX, TB) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYX() (TB, TB, TY, TX) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYY() (TB, TB, TY, TY) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYZ() (TB, TB, TY, TZ) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYW() (TB, TB, TY, TW) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYA() (TB, TB, TY, TA) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYB() (TB, TB, TY, TB) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZX() (TB, TB, TZ, TX) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZY() (TB, TB, TZ, TY) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZZ() (TB, TB, TZ, TZ) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZW() (TB, TB, TZ, TW) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZA() (TB, TB, TZ, TA) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZB() (TB, TB, TZ, TB) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWX() (TB, TB, TW, TX) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWY() (TB, TB, TW, TY) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWZ() (TB, TB, TW, TZ) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWW() (TB, TB, TW, TW) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWA() (TB, TB, TW, TA) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWB() (TB, TB, TW, TB) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAX() (TB, TB, TA, TX) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAY() (TB, TB, TA, TY) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAZ() (TB, TB, TA, TZ) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAW() (TB, TB, TA, TW) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAA() (TB, TB, TA, TA) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAB() (TB, TB, TA, TB) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBX() (TB, TB, TB, TX) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBY() (TB, TB, TB, TY) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBZ() (TB, TB, TB, TZ) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBW() (TB, TB, TB, TW) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBA() (TB, TB, TB, TA) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v *XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBB() (TB, TB, TB, TB) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
