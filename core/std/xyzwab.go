// Code generated by 'internal/generators/letter'; DO NOT EDIT.
//go:generate go run ./internal/generators/letter -pkg std -name XYZWAB -nameL xyzwab -cmpts X,Y,Z,W,A,B -cmptsL x,y,z,w,a,b -out xyzwab.go
package std

import (
	"core/sys/name/format"
	"core/sys/num"
	"core/sys/num/bounded"
	"core/sys/support"
	"fmt"
)

// XYZWAB is a 6D vector of like-typed bounded.Number components.
//
// NOTE: If you'd like asymmetric types, please see XYZWABTyped.
type XYZWAB[T num.Primitive] = XYZWABTyped[T, T, T, T, T, T]

// XYZWABTyped is a 6D vector of asymmetrically typed bounded.Number components.
//
// NOTE: If you'd like symmetric types, please see XYZWAB.
type XYZWABTyped[TX num.Primitive, TY num.Primitive, TZ num.Primitive, TW num.Primitive, TA num.Primitive, TB num.Primitive] struct {
	Entity
	X bounded.Number[TX]
	Y bounded.Number[TY]
	Z bounded.Number[TZ]
	W bounded.Number[TW]
	A bounded.Number[TA]
	B bounded.Number[TB]
}

func NewXYZWAB[T num.Primitive]() XYZWAB[T] {
	return XYZWAB[T](NewXYZWABTyped[T, T, T, T, T, T]())
}

func NewXYZWABTyped[TX num.Primitive, TY num.Primitive, TZ num.Primitive, TW num.Primitive, TA num.Primitive, TB num.Primitive]() XYZWABTyped[TX, TY, TZ, TW, TA, TB] {
	minX := num.MinValue[TX]()
	maxX := num.MaxValue[TX]()
	minY := num.MinValue[TY]()
	maxY := num.MaxValue[TY]()
	minZ := num.MinValue[TZ]()
	maxZ := num.MaxValue[TZ]()
	minW := num.MinValue[TW]()
	maxW := num.MaxValue[TW]()
	minA := num.MinValue[TA]()
	maxA := num.MaxValue[TA]()
	minB := num.MinValue[TB]()
	maxB := num.MaxValue[TB]()

	c := XYZWABTyped[TX, TY, TZ, TW, TA, TB]{}
	c.Entity = NewEntity[format.Default]()
	c.SetBoundaries(minX, maxX, minY, maxY, minZ, maxZ, minW, maxW, minA, maxA, minB, maxB)
	return c
}

func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) String() string {
	if support.AllSameTypes(TX(0), TY(0), TZ(0), TW(0), TA(0), TB(0)) {
		return fmt.Sprintf("xyzwab[%T].{%v, %v, %v, %v, %v, %v}(%v)", TX(0), _v.X.ValueString(), _v.Y.ValueString(), _v.Z.ValueString(), _v.W.ValueString(), _v.A.ValueString(), _v.B.ValueString(), _v.GivenName.Name)
	}
	return fmt.Sprintf("xyzwab[%T, %T, %T, %T, %T, %T].{%v, %v, %v, %v, %v, %v}(%v)", TX(0), TY(0), TZ(0), TW(0), TA(0), TB(0), _v.X.ValueString(), _v.Y.ValueString(), _v.Z.ValueString(), _v.W.ValueString(), _v.A.ValueString(), _v.B.ValueString(), _v.GivenName.Name)
}

func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) Set(x TX, y TY, z TZ, w TW, a TA, b TB) XYZWABTyped[TX, TY, TZ, TW, TA, TB] {
	_ = _v.X.Set(x)
	_ = _v.Y.Set(y)
	_ = _v.Z.Set(z)
	_ = _v.W.Set(w)
	_ = _v.A.Set(a)
	_ = _v.B.Set(b)
	return _v
}

func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) SetClamp(clamp bool) XYZWABTyped[TX, TY, TZ, TW, TA, TB] {
	_v.X.Clamp = clamp
	_v.Y.Clamp = clamp
	_v.Z.Clamp = clamp
	_v.W.Clamp = clamp
	_v.A.Clamp = clamp
	_v.B.Clamp = clamp
	return _v
}

func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) SetBoundaries(minX, maxX TX, minY, maxY TY, minZ, maxZ TZ, minW, maxW TW, minA, maxA TA, minB, maxB TB) XYZWABTyped[TX, TY, TZ, TW, TA, TB] {
	_ = _v.X.SetBoundaries(minX, maxX)
	_ = _v.Y.SetBoundaries(minY, maxY)
	_ = _v.Z.SetBoundaries(minZ, maxZ)
	_ = _v.W.SetBoundaries(minW, maxW)
	_ = _v.A.SetBoundaries(minA, maxA)
	_ = _v.B.SetBoundaries(minB, maxB)
	return _v
}

/**
Swizzling

	NOTE: This is a regular expression to find and replace swizzle functions into a one-liner if the auto formatter ever kicks in

	Find -
	func \((.*?)\) ([A-Z]{2,4})\(\) \((.*?)\)[ ]*\{[\n\t ]*return(.*?)[\n\t ]*\}

	Replace -
	func ($1) $2() ($3) { return$4 }
*/

func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XX() (TX, TX) { return _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XY() (TX, TY) { return _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZ() (TX, TZ) { return _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XW() (TX, TW) { return _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XA() (TX, TA) { return _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XB() (TX, TB) { return _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YX() (TY, TX) { return _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YY() (TY, TY) { return _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZ() (TY, TZ) { return _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YW() (TY, TW) { return _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YA() (TY, TA) { return _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YB() (TY, TB) { return _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZX() (TZ, TX) { return _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZY() (TZ, TY) { return _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZ() (TZ, TZ) { return _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZW() (TZ, TW) { return _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZA() (TZ, TA) { return _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZB() (TZ, TB) { return _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WX() (TW, TX) { return _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WY() (TW, TY) { return _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZ() (TW, TZ) { return _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WW() (TW, TW) { return _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WA() (TW, TA) { return _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WB() (TW, TB) { return _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AX() (TA, TX) { return _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AY() (TA, TY) { return _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZ() (TA, TZ) { return _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AW() (TA, TW) { return _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AA() (TA, TA) { return _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AB() (TA, TB) { return _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BX() (TB, TX) { return _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BY() (TB, TY) { return _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZ() (TB, TZ) { return _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BW() (TB, TW) { return _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BA() (TB, TA) { return _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BB() (TB, TB) { return _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXX() (TX, TX, TX) { return _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXY() (TX, TX, TY) { return _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZ() (TX, TX, TZ) { return _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXW() (TX, TX, TW) { return _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXA() (TX, TX, TA) { return _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXB() (TX, TX, TB) { return _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYX() (TX, TY, TX) { return _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYY() (TX, TY, TY) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZ() (TX, TY, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYW() (TX, TY, TW) { return _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYA() (TX, TY, TA) { return _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYB() (TX, TY, TB) { return _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZX() (TX, TZ, TX) { return _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZY() (TX, TZ, TY) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZ() (TX, TZ, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZW() (TX, TZ, TW) { return _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZA() (TX, TZ, TA) { return _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZB() (TX, TZ, TB) { return _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWX() (TX, TW, TX) { return _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWY() (TX, TW, TY) { return _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZ() (TX, TW, TZ) { return _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWW() (TX, TW, TW) { return _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWA() (TX, TW, TA) { return _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWB() (TX, TW, TB) { return _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAX() (TX, TA, TX) { return _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAY() (TX, TA, TY) { return _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZ() (TX, TA, TZ) { return _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAW() (TX, TA, TW) { return _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAA() (TX, TA, TA) { return _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAB() (TX, TA, TB) { return _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBX() (TX, TB, TX) { return _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBY() (TX, TB, TY) { return _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZ() (TX, TB, TZ) { return _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBW() (TX, TB, TW) { return _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBA() (TX, TB, TA) { return _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBB() (TX, TB, TB) { return _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXX() (TY, TX, TX) { return _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXY() (TY, TX, TY) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZ() (TY, TX, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXW() (TY, TX, TW) { return _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXA() (TY, TX, TA) { return _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXB() (TY, TX, TB) { return _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYX() (TY, TY, TX) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYY() (TY, TY, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZ() (TY, TY, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYW() (TY, TY, TW) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYA() (TY, TY, TA) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYB() (TY, TY, TB) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZX() (TY, TZ, TX) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZY() (TY, TZ, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZ() (TY, TZ, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZW() (TY, TZ, TW) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZA() (TY, TZ, TA) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZB() (TY, TZ, TB) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWX() (TY, TW, TX) { return _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWY() (TY, TW, TY) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZ() (TY, TW, TZ) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWW() (TY, TW, TW) { return _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWA() (TY, TW, TA) { return _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWB() (TY, TW, TB) { return _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAX() (TY, TA, TX) { return _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAY() (TY, TA, TY) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZ() (TY, TA, TZ) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAW() (TY, TA, TW) { return _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAA() (TY, TA, TA) { return _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAB() (TY, TA, TB) { return _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBX() (TY, TB, TX) { return _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBY() (TY, TB, TY) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZ() (TY, TB, TZ) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBW() (TY, TB, TW) { return _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBA() (TY, TB, TA) { return _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBB() (TY, TB, TB) { return _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXX() (TZ, TX, TX) { return _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXY() (TZ, TX, TY) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZ() (TZ, TX, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXW() (TZ, TX, TW) { return _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXA() (TZ, TX, TA) { return _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXB() (TZ, TX, TB) { return _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYX() (TZ, TY, TX) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYY() (TZ, TY, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZ() (TZ, TY, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYW() (TZ, TY, TW) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYA() (TZ, TY, TA) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYB() (TZ, TY, TB) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZX() (TZ, TZ, TX) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZY() (TZ, TZ, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZ() (TZ, TZ, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZW() (TZ, TZ, TW) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZA() (TZ, TZ, TA) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZB() (TZ, TZ, TB) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWX() (TZ, TW, TX) { return _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWY() (TZ, TW, TY) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZ() (TZ, TW, TZ) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWW() (TZ, TW, TW) { return _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWA() (TZ, TW, TA) { return _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWB() (TZ, TW, TB) { return _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAX() (TZ, TA, TX) { return _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAY() (TZ, TA, TY) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZ() (TZ, TA, TZ) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAW() (TZ, TA, TW) { return _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAA() (TZ, TA, TA) { return _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAB() (TZ, TA, TB) { return _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBX() (TZ, TB, TX) { return _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBY() (TZ, TB, TY) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZ() (TZ, TB, TZ) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBW() (TZ, TB, TW) { return _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBA() (TZ, TB, TA) { return _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBB() (TZ, TB, TB) { return _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXX() (TW, TX, TX) { return _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXY() (TW, TX, TY) { return _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZ() (TW, TX, TZ) { return _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXW() (TW, TX, TW) { return _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXA() (TW, TX, TA) { return _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXB() (TW, TX, TB) { return _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYX() (TW, TY, TX) { return _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYY() (TW, TY, TY) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZ() (TW, TY, TZ) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYW() (TW, TY, TW) { return _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYA() (TW, TY, TA) { return _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYB() (TW, TY, TB) { return _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZX() (TW, TZ, TX) { return _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZY() (TW, TZ, TY) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZ() (TW, TZ, TZ) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZW() (TW, TZ, TW) { return _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZA() (TW, TZ, TA) { return _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZB() (TW, TZ, TB) { return _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWX() (TW, TW, TX) { return _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWY() (TW, TW, TY) { return _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZ() (TW, TW, TZ) { return _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWW() (TW, TW, TW) { return _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWA() (TW, TW, TA) { return _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWB() (TW, TW, TB) { return _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAX() (TW, TA, TX) { return _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAY() (TW, TA, TY) { return _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZ() (TW, TA, TZ) { return _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAW() (TW, TA, TW) { return _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAA() (TW, TA, TA) { return _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAB() (TW, TA, TB) { return _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBX() (TW, TB, TX) { return _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBY() (TW, TB, TY) { return _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZ() (TW, TB, TZ) { return _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBW() (TW, TB, TW) { return _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBA() (TW, TB, TA) { return _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBB() (TW, TB, TB) { return _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXX() (TA, TX, TX) { return _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXY() (TA, TX, TY) { return _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZ() (TA, TX, TZ) { return _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXW() (TA, TX, TW) { return _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXA() (TA, TX, TA) { return _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXB() (TA, TX, TB) { return _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYX() (TA, TY, TX) { return _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYY() (TA, TY, TY) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZ() (TA, TY, TZ) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYW() (TA, TY, TW) { return _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYA() (TA, TY, TA) { return _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYB() (TA, TY, TB) { return _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZX() (TA, TZ, TX) { return _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZY() (TA, TZ, TY) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZ() (TA, TZ, TZ) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZW() (TA, TZ, TW) { return _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZA() (TA, TZ, TA) { return _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZB() (TA, TZ, TB) { return _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWX() (TA, TW, TX) { return _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWY() (TA, TW, TY) { return _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZ() (TA, TW, TZ) { return _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWW() (TA, TW, TW) { return _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWA() (TA, TW, TA) { return _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWB() (TA, TW, TB) { return _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAX() (TA, TA, TX) { return _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAY() (TA, TA, TY) { return _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZ() (TA, TA, TZ) { return _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAW() (TA, TA, TW) { return _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAA() (TA, TA, TA) { return _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAB() (TA, TA, TB) { return _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABX() (TA, TB, TX) { return _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABY() (TA, TB, TY) { return _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZ() (TA, TB, TZ) { return _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABW() (TA, TB, TW) { return _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABA() (TA, TB, TA) { return _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABB() (TA, TB, TB) { return _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXX() (TB, TX, TX) { return _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXY() (TB, TX, TY) { return _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZ() (TB, TX, TZ) { return _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXW() (TB, TX, TW) { return _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXA() (TB, TX, TA) { return _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXB() (TB, TX, TB) { return _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYX() (TB, TY, TX) { return _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYY() (TB, TY, TY) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZ() (TB, TY, TZ) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYW() (TB, TY, TW) { return _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYA() (TB, TY, TA) { return _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYB() (TB, TY, TB) { return _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZX() (TB, TZ, TX) { return _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZY() (TB, TZ, TY) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZ() (TB, TZ, TZ) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZW() (TB, TZ, TW) { return _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZA() (TB, TZ, TA) { return _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZB() (TB, TZ, TB) { return _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWX() (TB, TW, TX) { return _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWY() (TB, TW, TY) { return _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZ() (TB, TW, TZ) { return _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWW() (TB, TW, TW) { return _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWA() (TB, TW, TA) { return _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWB() (TB, TW, TB) { return _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAX() (TB, TA, TX) { return _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAY() (TB, TA, TY) { return _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZ() (TB, TA, TZ) { return _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAW() (TB, TA, TW) { return _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAA() (TB, TA, TA) { return _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAB() (TB, TA, TB) { return _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBX() (TB, TB, TX) { return _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBY() (TB, TB, TY) { return _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZ() (TB, TB, TZ) { return _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBW() (TB, TB, TW) { return _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBA() (TB, TB, TA) { return _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBB() (TB, TB, TB) { return _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXX() (TX, TX, TX, TX) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXY() (TX, TX, TX, TY) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXZ() (TX, TX, TX, TZ) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXW() (TX, TX, TX, TW) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXA() (TX, TX, TX, TA) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXB() (TX, TX, TX, TB) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYX() (TX, TX, TY, TX) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYY() (TX, TX, TY, TY) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYZ() (TX, TX, TY, TZ) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYW() (TX, TX, TY, TW) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYA() (TX, TX, TY, TA) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYB() (TX, TX, TY, TB) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZX() (TX, TX, TZ, TX) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZY() (TX, TX, TZ, TY) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZZ() (TX, TX, TZ, TZ) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZW() (TX, TX, TZ, TW) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZA() (TX, TX, TZ, TA) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZB() (TX, TX, TZ, TB) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWX() (TX, TX, TW, TX) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWY() (TX, TX, TW, TY) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWZ() (TX, TX, TW, TZ) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWW() (TX, TX, TW, TW) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWA() (TX, TX, TW, TA) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWB() (TX, TX, TW, TB) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAX() (TX, TX, TA, TX) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAY() (TX, TX, TA, TY) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAZ() (TX, TX, TA, TZ) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAW() (TX, TX, TA, TW) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAA() (TX, TX, TA, TA) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAB() (TX, TX, TA, TB) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBX() (TX, TX, TB, TX) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBY() (TX, TX, TB, TY) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBZ() (TX, TX, TB, TZ) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBW() (TX, TX, TB, TW) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBA() (TX, TX, TB, TA) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBB() (TX, TX, TB, TB) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXX() (TX, TY, TX, TX) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXY() (TX, TY, TX, TY) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXZ() (TX, TY, TX, TZ) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXW() (TX, TY, TX, TW) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXA() (TX, TY, TX, TA) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXB() (TX, TY, TX, TB) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYX() (TX, TY, TY, TX) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYY() (TX, TY, TY, TY) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYZ() (TX, TY, TY, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYW() (TX, TY, TY, TW) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYA() (TX, TY, TY, TA) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYB() (TX, TY, TY, TB) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZX() (TX, TY, TZ, TX) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZY() (TX, TY, TZ, TY) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZZ() (TX, TY, TZ, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZW() (TX, TY, TZ, TW) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZA() (TX, TY, TZ, TA) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZB() (TX, TY, TZ, TB) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWX() (TX, TY, TW, TX) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWY() (TX, TY, TW, TY) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWZ() (TX, TY, TW, TZ) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWW() (TX, TY, TW, TW) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWA() (TX, TY, TW, TA) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWB() (TX, TY, TW, TB) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAX() (TX, TY, TA, TX) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAY() (TX, TY, TA, TY) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAZ() (TX, TY, TA, TZ) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAW() (TX, TY, TA, TW) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAA() (TX, TY, TA, TA) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAB() (TX, TY, TA, TB) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBX() (TX, TY, TB, TX) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBY() (TX, TY, TB, TY) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBZ() (TX, TY, TB, TZ) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBW() (TX, TY, TB, TW) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBA() (TX, TY, TB, TA) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBB() (TX, TY, TB, TB) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXX() (TX, TZ, TX, TX) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXY() (TX, TZ, TX, TY) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXZ() (TX, TZ, TX, TZ) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXW() (TX, TZ, TX, TW) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXA() (TX, TZ, TX, TA) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXB() (TX, TZ, TX, TB) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYX() (TX, TZ, TY, TX) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYY() (TX, TZ, TY, TY) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYZ() (TX, TZ, TY, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYW() (TX, TZ, TY, TW) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYA() (TX, TZ, TY, TA) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYB() (TX, TZ, TY, TB) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZX() (TX, TZ, TZ, TX) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZY() (TX, TZ, TZ, TY) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZZ() (TX, TZ, TZ, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZW() (TX, TZ, TZ, TW) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZA() (TX, TZ, TZ, TA) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZB() (TX, TZ, TZ, TB) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWX() (TX, TZ, TW, TX) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWY() (TX, TZ, TW, TY) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWZ() (TX, TZ, TW, TZ) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWW() (TX, TZ, TW, TW) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWA() (TX, TZ, TW, TA) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWB() (TX, TZ, TW, TB) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAX() (TX, TZ, TA, TX) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAY() (TX, TZ, TA, TY) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAZ() (TX, TZ, TA, TZ) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAW() (TX, TZ, TA, TW) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAA() (TX, TZ, TA, TA) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAB() (TX, TZ, TA, TB) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBX() (TX, TZ, TB, TX) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBY() (TX, TZ, TB, TY) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBZ() (TX, TZ, TB, TZ) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBW() (TX, TZ, TB, TW) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBA() (TX, TZ, TB, TA) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBB() (TX, TZ, TB, TB) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXX() (TX, TW, TX, TX) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXY() (TX, TW, TX, TY) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXZ() (TX, TW, TX, TZ) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXW() (TX, TW, TX, TW) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXA() (TX, TW, TX, TA) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXB() (TX, TW, TX, TB) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYX() (TX, TW, TY, TX) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYY() (TX, TW, TY, TY) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYZ() (TX, TW, TY, TZ) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYW() (TX, TW, TY, TW) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYA() (TX, TW, TY, TA) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYB() (TX, TW, TY, TB) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZX() (TX, TW, TZ, TX) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZY() (TX, TW, TZ, TY) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZZ() (TX, TW, TZ, TZ) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZW() (TX, TW, TZ, TW) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZA() (TX, TW, TZ, TA) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZB() (TX, TW, TZ, TB) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWX() (TX, TW, TW, TX) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWY() (TX, TW, TW, TY) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWZ() (TX, TW, TW, TZ) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWW() (TX, TW, TW, TW) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWA() (TX, TW, TW, TA) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWB() (TX, TW, TW, TB) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAX() (TX, TW, TA, TX) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAY() (TX, TW, TA, TY) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAZ() (TX, TW, TA, TZ) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAW() (TX, TW, TA, TW) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAA() (TX, TW, TA, TA) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAB() (TX, TW, TA, TB) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBX() (TX, TW, TB, TX) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBY() (TX, TW, TB, TY) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBZ() (TX, TW, TB, TZ) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBW() (TX, TW, TB, TW) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBA() (TX, TW, TB, TA) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBB() (TX, TW, TB, TB) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXX() (TX, TA, TX, TX) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXY() (TX, TA, TX, TY) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXZ() (TX, TA, TX, TZ) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXW() (TX, TA, TX, TW) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXA() (TX, TA, TX, TA) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXB() (TX, TA, TX, TB) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYX() (TX, TA, TY, TX) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYY() (TX, TA, TY, TY) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYZ() (TX, TA, TY, TZ) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYW() (TX, TA, TY, TW) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYA() (TX, TA, TY, TA) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYB() (TX, TA, TY, TB) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZX() (TX, TA, TZ, TX) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZY() (TX, TA, TZ, TY) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZZ() (TX, TA, TZ, TZ) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZW() (TX, TA, TZ, TW) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZA() (TX, TA, TZ, TA) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZB() (TX, TA, TZ, TB) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWX() (TX, TA, TW, TX) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWY() (TX, TA, TW, TY) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWZ() (TX, TA, TW, TZ) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWW() (TX, TA, TW, TW) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWA() (TX, TA, TW, TA) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWB() (TX, TA, TW, TB) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAX() (TX, TA, TA, TX) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAY() (TX, TA, TA, TY) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAZ() (TX, TA, TA, TZ) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAW() (TX, TA, TA, TW) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAA() (TX, TA, TA, TA) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAB() (TX, TA, TA, TB) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABX() (TX, TA, TB, TX) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABY() (TX, TA, TB, TY) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABZ() (TX, TA, TB, TZ) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABW() (TX, TA, TB, TW) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABA() (TX, TA, TB, TA) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABB() (TX, TA, TB, TB) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXX() (TX, TB, TX, TX) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXY() (TX, TB, TX, TY) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXZ() (TX, TB, TX, TZ) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXW() (TX, TB, TX, TW) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXA() (TX, TB, TX, TA) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXB() (TX, TB, TX, TB) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYX() (TX, TB, TY, TX) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYY() (TX, TB, TY, TY) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYZ() (TX, TB, TY, TZ) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYW() (TX, TB, TY, TW) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYA() (TX, TB, TY, TA) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYB() (TX, TB, TY, TB) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZX() (TX, TB, TZ, TX) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZY() (TX, TB, TZ, TY) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZZ() (TX, TB, TZ, TZ) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZW() (TX, TB, TZ, TW) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZA() (TX, TB, TZ, TA) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZB() (TX, TB, TZ, TB) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWX() (TX, TB, TW, TX) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWY() (TX, TB, TW, TY) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWZ() (TX, TB, TW, TZ) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWW() (TX, TB, TW, TW) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWA() (TX, TB, TW, TA) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWB() (TX, TB, TW, TB) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAX() (TX, TB, TA, TX) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAY() (TX, TB, TA, TY) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAZ() (TX, TB, TA, TZ) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAW() (TX, TB, TA, TW) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAA() (TX, TB, TA, TA) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAB() (TX, TB, TA, TB) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBX() (TX, TB, TB, TX) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBY() (TX, TB, TB, TY) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBZ() (TX, TB, TB, TZ) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBW() (TX, TB, TB, TW) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBA() (TX, TB, TB, TA) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBB() (TX, TB, TB, TB) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXX() (TY, TX, TX, TX) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXY() (TY, TX, TX, TY) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXZ() (TY, TX, TX, TZ) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXW() (TY, TX, TX, TW) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXA() (TY, TX, TX, TA) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXB() (TY, TX, TX, TB) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYX() (TY, TX, TY, TX) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYY() (TY, TX, TY, TY) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYZ() (TY, TX, TY, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYW() (TY, TX, TY, TW) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYA() (TY, TX, TY, TA) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYB() (TY, TX, TY, TB) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZX() (TY, TX, TZ, TX) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZY() (TY, TX, TZ, TY) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZZ() (TY, TX, TZ, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZW() (TY, TX, TZ, TW) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZA() (TY, TX, TZ, TA) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZB() (TY, TX, TZ, TB) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWX() (TY, TX, TW, TX) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWY() (TY, TX, TW, TY) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWZ() (TY, TX, TW, TZ) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWW() (TY, TX, TW, TW) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWA() (TY, TX, TW, TA) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWB() (TY, TX, TW, TB) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAX() (TY, TX, TA, TX) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAY() (TY, TX, TA, TY) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAZ() (TY, TX, TA, TZ) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAW() (TY, TX, TA, TW) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAA() (TY, TX, TA, TA) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAB() (TY, TX, TA, TB) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBX() (TY, TX, TB, TX) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBY() (TY, TX, TB, TY) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBZ() (TY, TX, TB, TZ) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBW() (TY, TX, TB, TW) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBA() (TY, TX, TB, TA) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBB() (TY, TX, TB, TB) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXX() (TY, TY, TX, TX) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXY() (TY, TY, TX, TY) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXZ() (TY, TY, TX, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXW() (TY, TY, TX, TW) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXA() (TY, TY, TX, TA) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXB() (TY, TY, TX, TB) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYX() (TY, TY, TY, TX) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYY() (TY, TY, TY, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYZ() (TY, TY, TY, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYW() (TY, TY, TY, TW) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYA() (TY, TY, TY, TA) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYB() (TY, TY, TY, TB) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZX() (TY, TY, TZ, TX) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZY() (TY, TY, TZ, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZZ() (TY, TY, TZ, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZW() (TY, TY, TZ, TW) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZA() (TY, TY, TZ, TA) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZB() (TY, TY, TZ, TB) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWX() (TY, TY, TW, TX) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWY() (TY, TY, TW, TY) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWZ() (TY, TY, TW, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWW() (TY, TY, TW, TW) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWA() (TY, TY, TW, TA) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWB() (TY, TY, TW, TB) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAX() (TY, TY, TA, TX) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAY() (TY, TY, TA, TY) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAZ() (TY, TY, TA, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAW() (TY, TY, TA, TW) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAA() (TY, TY, TA, TA) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAB() (TY, TY, TA, TB) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBX() (TY, TY, TB, TX) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBY() (TY, TY, TB, TY) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBZ() (TY, TY, TB, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBW() (TY, TY, TB, TW) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBA() (TY, TY, TB, TA) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBB() (TY, TY, TB, TB) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXX() (TY, TZ, TX, TX) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXY() (TY, TZ, TX, TY) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXZ() (TY, TZ, TX, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXW() (TY, TZ, TX, TW) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXA() (TY, TZ, TX, TA) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXB() (TY, TZ, TX, TB) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYX() (TY, TZ, TY, TX) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYY() (TY, TZ, TY, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYZ() (TY, TZ, TY, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYW() (TY, TZ, TY, TW) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYA() (TY, TZ, TY, TA) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYB() (TY, TZ, TY, TB) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZX() (TY, TZ, TZ, TX) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZY() (TY, TZ, TZ, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZZ() (TY, TZ, TZ, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZW() (TY, TZ, TZ, TW) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZA() (TY, TZ, TZ, TA) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZB() (TY, TZ, TZ, TB) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWX() (TY, TZ, TW, TX) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWY() (TY, TZ, TW, TY) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWZ() (TY, TZ, TW, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWW() (TY, TZ, TW, TW) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWA() (TY, TZ, TW, TA) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWB() (TY, TZ, TW, TB) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAX() (TY, TZ, TA, TX) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAY() (TY, TZ, TA, TY) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAZ() (TY, TZ, TA, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAW() (TY, TZ, TA, TW) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAA() (TY, TZ, TA, TA) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAB() (TY, TZ, TA, TB) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBX() (TY, TZ, TB, TX) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBY() (TY, TZ, TB, TY) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBZ() (TY, TZ, TB, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBW() (TY, TZ, TB, TW) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBA() (TY, TZ, TB, TA) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBB() (TY, TZ, TB, TB) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXX() (TY, TW, TX, TX) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXY() (TY, TW, TX, TY) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXZ() (TY, TW, TX, TZ) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXW() (TY, TW, TX, TW) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXA() (TY, TW, TX, TA) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXB() (TY, TW, TX, TB) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYX() (TY, TW, TY, TX) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYY() (TY, TW, TY, TY) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYZ() (TY, TW, TY, TZ) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYW() (TY, TW, TY, TW) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYA() (TY, TW, TY, TA) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYB() (TY, TW, TY, TB) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZX() (TY, TW, TZ, TX) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZY() (TY, TW, TZ, TY) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZZ() (TY, TW, TZ, TZ) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZW() (TY, TW, TZ, TW) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZA() (TY, TW, TZ, TA) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZB() (TY, TW, TZ, TB) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWX() (TY, TW, TW, TX) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWY() (TY, TW, TW, TY) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWZ() (TY, TW, TW, TZ) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWW() (TY, TW, TW, TW) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWA() (TY, TW, TW, TA) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWB() (TY, TW, TW, TB) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAX() (TY, TW, TA, TX) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAY() (TY, TW, TA, TY) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAZ() (TY, TW, TA, TZ) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAW() (TY, TW, TA, TW) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAA() (TY, TW, TA, TA) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAB() (TY, TW, TA, TB) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBX() (TY, TW, TB, TX) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBY() (TY, TW, TB, TY) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBZ() (TY, TW, TB, TZ) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBW() (TY, TW, TB, TW) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBA() (TY, TW, TB, TA) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBB() (TY, TW, TB, TB) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXX() (TY, TA, TX, TX) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXY() (TY, TA, TX, TY) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXZ() (TY, TA, TX, TZ) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXW() (TY, TA, TX, TW) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXA() (TY, TA, TX, TA) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXB() (TY, TA, TX, TB) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYX() (TY, TA, TY, TX) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYY() (TY, TA, TY, TY) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYZ() (TY, TA, TY, TZ) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYW() (TY, TA, TY, TW) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYA() (TY, TA, TY, TA) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYB() (TY, TA, TY, TB) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZX() (TY, TA, TZ, TX) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZY() (TY, TA, TZ, TY) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZZ() (TY, TA, TZ, TZ) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZW() (TY, TA, TZ, TW) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZA() (TY, TA, TZ, TA) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZB() (TY, TA, TZ, TB) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWX() (TY, TA, TW, TX) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWY() (TY, TA, TW, TY) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWZ() (TY, TA, TW, TZ) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWW() (TY, TA, TW, TW) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWA() (TY, TA, TW, TA) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWB() (TY, TA, TW, TB) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAX() (TY, TA, TA, TX) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAY() (TY, TA, TA, TY) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAZ() (TY, TA, TA, TZ) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAW() (TY, TA, TA, TW) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAA() (TY, TA, TA, TA) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAB() (TY, TA, TA, TB) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABX() (TY, TA, TB, TX) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABY() (TY, TA, TB, TY) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABZ() (TY, TA, TB, TZ) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABW() (TY, TA, TB, TW) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABA() (TY, TA, TB, TA) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABB() (TY, TA, TB, TB) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXX() (TY, TB, TX, TX) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXY() (TY, TB, TX, TY) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXZ() (TY, TB, TX, TZ) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXW() (TY, TB, TX, TW) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXA() (TY, TB, TX, TA) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXB() (TY, TB, TX, TB) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYX() (TY, TB, TY, TX) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYY() (TY, TB, TY, TY) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYZ() (TY, TB, TY, TZ) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYW() (TY, TB, TY, TW) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYA() (TY, TB, TY, TA) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYB() (TY, TB, TY, TB) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZX() (TY, TB, TZ, TX) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZY() (TY, TB, TZ, TY) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZZ() (TY, TB, TZ, TZ) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZW() (TY, TB, TZ, TW) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZA() (TY, TB, TZ, TA) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZB() (TY, TB, TZ, TB) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWX() (TY, TB, TW, TX) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWY() (TY, TB, TW, TY) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWZ() (TY, TB, TW, TZ) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWW() (TY, TB, TW, TW) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWA() (TY, TB, TW, TA) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWB() (TY, TB, TW, TB) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAX() (TY, TB, TA, TX) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAY() (TY, TB, TA, TY) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAZ() (TY, TB, TA, TZ) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAW() (TY, TB, TA, TW) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAA() (TY, TB, TA, TA) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAB() (TY, TB, TA, TB) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBX() (TY, TB, TB, TX) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBY() (TY, TB, TB, TY) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBZ() (TY, TB, TB, TZ) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBW() (TY, TB, TB, TW) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBA() (TY, TB, TB, TA) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBB() (TY, TB, TB, TB) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXX() (TZ, TX, TX, TX) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXY() (TZ, TX, TX, TY) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXZ() (TZ, TX, TX, TZ) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXW() (TZ, TX, TX, TW) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXA() (TZ, TX, TX, TA) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXB() (TZ, TX, TX, TB) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYX() (TZ, TX, TY, TX) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYY() (TZ, TX, TY, TY) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYZ() (TZ, TX, TY, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYW() (TZ, TX, TY, TW) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYA() (TZ, TX, TY, TA) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYB() (TZ, TX, TY, TB) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZX() (TZ, TX, TZ, TX) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZY() (TZ, TX, TZ, TY) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZZ() (TZ, TX, TZ, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZW() (TZ, TX, TZ, TW) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZA() (TZ, TX, TZ, TA) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZB() (TZ, TX, TZ, TB) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWX() (TZ, TX, TW, TX) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWY() (TZ, TX, TW, TY) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWZ() (TZ, TX, TW, TZ) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWW() (TZ, TX, TW, TW) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWA() (TZ, TX, TW, TA) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWB() (TZ, TX, TW, TB) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAX() (TZ, TX, TA, TX) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAY() (TZ, TX, TA, TY) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAZ() (TZ, TX, TA, TZ) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAW() (TZ, TX, TA, TW) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAA() (TZ, TX, TA, TA) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAB() (TZ, TX, TA, TB) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBX() (TZ, TX, TB, TX) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBY() (TZ, TX, TB, TY) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBZ() (TZ, TX, TB, TZ) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBW() (TZ, TX, TB, TW) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBA() (TZ, TX, TB, TA) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBB() (TZ, TX, TB, TB) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXX() (TZ, TY, TX, TX) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXY() (TZ, TY, TX, TY) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXZ() (TZ, TY, TX, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXW() (TZ, TY, TX, TW) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXA() (TZ, TY, TX, TA) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXB() (TZ, TY, TX, TB) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYX() (TZ, TY, TY, TX) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYY() (TZ, TY, TY, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYZ() (TZ, TY, TY, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYW() (TZ, TY, TY, TW) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYA() (TZ, TY, TY, TA) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYB() (TZ, TY, TY, TB) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZX() (TZ, TY, TZ, TX) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZY() (TZ, TY, TZ, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZZ() (TZ, TY, TZ, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZW() (TZ, TY, TZ, TW) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZA() (TZ, TY, TZ, TA) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZB() (TZ, TY, TZ, TB) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWX() (TZ, TY, TW, TX) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWY() (TZ, TY, TW, TY) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWZ() (TZ, TY, TW, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWW() (TZ, TY, TW, TW) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWA() (TZ, TY, TW, TA) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWB() (TZ, TY, TW, TB) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAX() (TZ, TY, TA, TX) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAY() (TZ, TY, TA, TY) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAZ() (TZ, TY, TA, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAW() (TZ, TY, TA, TW) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAA() (TZ, TY, TA, TA) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAB() (TZ, TY, TA, TB) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBX() (TZ, TY, TB, TX) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBY() (TZ, TY, TB, TY) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBZ() (TZ, TY, TB, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBW() (TZ, TY, TB, TW) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBA() (TZ, TY, TB, TA) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBB() (TZ, TY, TB, TB) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXX() (TZ, TZ, TX, TX) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXY() (TZ, TZ, TX, TY) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXZ() (TZ, TZ, TX, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXW() (TZ, TZ, TX, TW) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXA() (TZ, TZ, TX, TA) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXB() (TZ, TZ, TX, TB) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYX() (TZ, TZ, TY, TX) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYY() (TZ, TZ, TY, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYZ() (TZ, TZ, TY, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYW() (TZ, TZ, TY, TW) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYA() (TZ, TZ, TY, TA) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYB() (TZ, TZ, TY, TB) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZX() (TZ, TZ, TZ, TX) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZY() (TZ, TZ, TZ, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZZ() (TZ, TZ, TZ, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZW() (TZ, TZ, TZ, TW) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZA() (TZ, TZ, TZ, TA) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZB() (TZ, TZ, TZ, TB) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWX() (TZ, TZ, TW, TX) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWY() (TZ, TZ, TW, TY) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWZ() (TZ, TZ, TW, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWW() (TZ, TZ, TW, TW) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWA() (TZ, TZ, TW, TA) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWB() (TZ, TZ, TW, TB) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAX() (TZ, TZ, TA, TX) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAY() (TZ, TZ, TA, TY) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAZ() (TZ, TZ, TA, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAW() (TZ, TZ, TA, TW) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAA() (TZ, TZ, TA, TA) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAB() (TZ, TZ, TA, TB) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBX() (TZ, TZ, TB, TX) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBY() (TZ, TZ, TB, TY) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBZ() (TZ, TZ, TB, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBW() (TZ, TZ, TB, TW) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBA() (TZ, TZ, TB, TA) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBB() (TZ, TZ, TB, TB) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXX() (TZ, TW, TX, TX) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXY() (TZ, TW, TX, TY) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXZ() (TZ, TW, TX, TZ) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXW() (TZ, TW, TX, TW) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXA() (TZ, TW, TX, TA) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXB() (TZ, TW, TX, TB) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYX() (TZ, TW, TY, TX) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYY() (TZ, TW, TY, TY) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYZ() (TZ, TW, TY, TZ) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYW() (TZ, TW, TY, TW) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYA() (TZ, TW, TY, TA) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYB() (TZ, TW, TY, TB) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZX() (TZ, TW, TZ, TX) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZY() (TZ, TW, TZ, TY) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZZ() (TZ, TW, TZ, TZ) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZW() (TZ, TW, TZ, TW) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZA() (TZ, TW, TZ, TA) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZB() (TZ, TW, TZ, TB) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWX() (TZ, TW, TW, TX) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWY() (TZ, TW, TW, TY) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWZ() (TZ, TW, TW, TZ) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWW() (TZ, TW, TW, TW) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWA() (TZ, TW, TW, TA) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWB() (TZ, TW, TW, TB) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAX() (TZ, TW, TA, TX) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAY() (TZ, TW, TA, TY) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAZ() (TZ, TW, TA, TZ) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAW() (TZ, TW, TA, TW) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAA() (TZ, TW, TA, TA) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAB() (TZ, TW, TA, TB) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBX() (TZ, TW, TB, TX) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBY() (TZ, TW, TB, TY) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBZ() (TZ, TW, TB, TZ) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBW() (TZ, TW, TB, TW) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBA() (TZ, TW, TB, TA) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBB() (TZ, TW, TB, TB) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXX() (TZ, TA, TX, TX) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXY() (TZ, TA, TX, TY) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXZ() (TZ, TA, TX, TZ) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXW() (TZ, TA, TX, TW) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXA() (TZ, TA, TX, TA) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXB() (TZ, TA, TX, TB) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYX() (TZ, TA, TY, TX) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYY() (TZ, TA, TY, TY) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYZ() (TZ, TA, TY, TZ) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYW() (TZ, TA, TY, TW) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYA() (TZ, TA, TY, TA) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYB() (TZ, TA, TY, TB) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZX() (TZ, TA, TZ, TX) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZY() (TZ, TA, TZ, TY) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZZ() (TZ, TA, TZ, TZ) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZW() (TZ, TA, TZ, TW) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZA() (TZ, TA, TZ, TA) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZB() (TZ, TA, TZ, TB) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWX() (TZ, TA, TW, TX) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWY() (TZ, TA, TW, TY) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWZ() (TZ, TA, TW, TZ) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWW() (TZ, TA, TW, TW) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWA() (TZ, TA, TW, TA) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWB() (TZ, TA, TW, TB) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAX() (TZ, TA, TA, TX) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAY() (TZ, TA, TA, TY) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAZ() (TZ, TA, TA, TZ) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAW() (TZ, TA, TA, TW) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAA() (TZ, TA, TA, TA) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAB() (TZ, TA, TA, TB) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABX() (TZ, TA, TB, TX) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABY() (TZ, TA, TB, TY) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABZ() (TZ, TA, TB, TZ) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABW() (TZ, TA, TB, TW) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABA() (TZ, TA, TB, TA) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABB() (TZ, TA, TB, TB) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXX() (TZ, TB, TX, TX) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXY() (TZ, TB, TX, TY) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXZ() (TZ, TB, TX, TZ) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXW() (TZ, TB, TX, TW) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXA() (TZ, TB, TX, TA) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXB() (TZ, TB, TX, TB) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYX() (TZ, TB, TY, TX) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYY() (TZ, TB, TY, TY) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYZ() (TZ, TB, TY, TZ) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYW() (TZ, TB, TY, TW) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYA() (TZ, TB, TY, TA) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYB() (TZ, TB, TY, TB) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZX() (TZ, TB, TZ, TX) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZY() (TZ, TB, TZ, TY) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZZ() (TZ, TB, TZ, TZ) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZW() (TZ, TB, TZ, TW) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZA() (TZ, TB, TZ, TA) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZB() (TZ, TB, TZ, TB) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWX() (TZ, TB, TW, TX) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWY() (TZ, TB, TW, TY) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWZ() (TZ, TB, TW, TZ) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWW() (TZ, TB, TW, TW) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWA() (TZ, TB, TW, TA) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWB() (TZ, TB, TW, TB) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAX() (TZ, TB, TA, TX) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAY() (TZ, TB, TA, TY) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAZ() (TZ, TB, TA, TZ) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAW() (TZ, TB, TA, TW) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAA() (TZ, TB, TA, TA) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAB() (TZ, TB, TA, TB) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBX() (TZ, TB, TB, TX) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBY() (TZ, TB, TB, TY) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBZ() (TZ, TB, TB, TZ) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBW() (TZ, TB, TB, TW) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBA() (TZ, TB, TB, TA) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBB() (TZ, TB, TB, TB) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXX() (TW, TX, TX, TX) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXY() (TW, TX, TX, TY) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXZ() (TW, TX, TX, TZ) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXW() (TW, TX, TX, TW) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXA() (TW, TX, TX, TA) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXB() (TW, TX, TX, TB) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYX() (TW, TX, TY, TX) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYY() (TW, TX, TY, TY) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYZ() (TW, TX, TY, TZ) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYW() (TW, TX, TY, TW) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYA() (TW, TX, TY, TA) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYB() (TW, TX, TY, TB) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZX() (TW, TX, TZ, TX) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZY() (TW, TX, TZ, TY) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZZ() (TW, TX, TZ, TZ) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZW() (TW, TX, TZ, TW) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZA() (TW, TX, TZ, TA) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZB() (TW, TX, TZ, TB) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWX() (TW, TX, TW, TX) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWY() (TW, TX, TW, TY) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWZ() (TW, TX, TW, TZ) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWW() (TW, TX, TW, TW) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWA() (TW, TX, TW, TA) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWB() (TW, TX, TW, TB) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAX() (TW, TX, TA, TX) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAY() (TW, TX, TA, TY) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAZ() (TW, TX, TA, TZ) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAW() (TW, TX, TA, TW) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAA() (TW, TX, TA, TA) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAB() (TW, TX, TA, TB) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBX() (TW, TX, TB, TX) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBY() (TW, TX, TB, TY) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBZ() (TW, TX, TB, TZ) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBW() (TW, TX, TB, TW) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBA() (TW, TX, TB, TA) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBB() (TW, TX, TB, TB) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXX() (TW, TY, TX, TX) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXY() (TW, TY, TX, TY) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXZ() (TW, TY, TX, TZ) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXW() (TW, TY, TX, TW) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXA() (TW, TY, TX, TA) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXB() (TW, TY, TX, TB) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYX() (TW, TY, TY, TX) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYY() (TW, TY, TY, TY) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYZ() (TW, TY, TY, TZ) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYW() (TW, TY, TY, TW) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYA() (TW, TY, TY, TA) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYB() (TW, TY, TY, TB) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZX() (TW, TY, TZ, TX) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZY() (TW, TY, TZ, TY) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZZ() (TW, TY, TZ, TZ) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZW() (TW, TY, TZ, TW) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZA() (TW, TY, TZ, TA) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZB() (TW, TY, TZ, TB) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWX() (TW, TY, TW, TX) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWY() (TW, TY, TW, TY) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWZ() (TW, TY, TW, TZ) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWW() (TW, TY, TW, TW) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWA() (TW, TY, TW, TA) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWB() (TW, TY, TW, TB) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAX() (TW, TY, TA, TX) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAY() (TW, TY, TA, TY) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAZ() (TW, TY, TA, TZ) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAW() (TW, TY, TA, TW) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAA() (TW, TY, TA, TA) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAB() (TW, TY, TA, TB) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBX() (TW, TY, TB, TX) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBY() (TW, TY, TB, TY) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBZ() (TW, TY, TB, TZ) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBW() (TW, TY, TB, TW) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBA() (TW, TY, TB, TA) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBB() (TW, TY, TB, TB) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXX() (TW, TZ, TX, TX) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXY() (TW, TZ, TX, TY) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXZ() (TW, TZ, TX, TZ) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXW() (TW, TZ, TX, TW) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXA() (TW, TZ, TX, TA) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXB() (TW, TZ, TX, TB) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYX() (TW, TZ, TY, TX) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYY() (TW, TZ, TY, TY) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYZ() (TW, TZ, TY, TZ) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYW() (TW, TZ, TY, TW) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYA() (TW, TZ, TY, TA) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYB() (TW, TZ, TY, TB) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZX() (TW, TZ, TZ, TX) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZY() (TW, TZ, TZ, TY) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZZ() (TW, TZ, TZ, TZ) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZW() (TW, TZ, TZ, TW) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZA() (TW, TZ, TZ, TA) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZB() (TW, TZ, TZ, TB) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWX() (TW, TZ, TW, TX) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWY() (TW, TZ, TW, TY) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWZ() (TW, TZ, TW, TZ) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWW() (TW, TZ, TW, TW) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWA() (TW, TZ, TW, TA) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWB() (TW, TZ, TW, TB) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAX() (TW, TZ, TA, TX) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAY() (TW, TZ, TA, TY) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAZ() (TW, TZ, TA, TZ) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAW() (TW, TZ, TA, TW) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAA() (TW, TZ, TA, TA) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAB() (TW, TZ, TA, TB) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBX() (TW, TZ, TB, TX) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBY() (TW, TZ, TB, TY) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBZ() (TW, TZ, TB, TZ) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBW() (TW, TZ, TB, TW) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBA() (TW, TZ, TB, TA) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBB() (TW, TZ, TB, TB) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXX() (TW, TW, TX, TX) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXY() (TW, TW, TX, TY) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXZ() (TW, TW, TX, TZ) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXW() (TW, TW, TX, TW) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXA() (TW, TW, TX, TA) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXB() (TW, TW, TX, TB) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYX() (TW, TW, TY, TX) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYY() (TW, TW, TY, TY) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYZ() (TW, TW, TY, TZ) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYW() (TW, TW, TY, TW) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYA() (TW, TW, TY, TA) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYB() (TW, TW, TY, TB) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZX() (TW, TW, TZ, TX) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZY() (TW, TW, TZ, TY) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZZ() (TW, TW, TZ, TZ) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZW() (TW, TW, TZ, TW) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZA() (TW, TW, TZ, TA) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZB() (TW, TW, TZ, TB) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWX() (TW, TW, TW, TX) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWY() (TW, TW, TW, TY) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWZ() (TW, TW, TW, TZ) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWW() (TW, TW, TW, TW) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWA() (TW, TW, TW, TA) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWB() (TW, TW, TW, TB) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAX() (TW, TW, TA, TX) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAY() (TW, TW, TA, TY) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAZ() (TW, TW, TA, TZ) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAW() (TW, TW, TA, TW) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAA() (TW, TW, TA, TA) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAB() (TW, TW, TA, TB) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBX() (TW, TW, TB, TX) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBY() (TW, TW, TB, TY) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBZ() (TW, TW, TB, TZ) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBW() (TW, TW, TB, TW) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBA() (TW, TW, TB, TA) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBB() (TW, TW, TB, TB) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXX() (TW, TA, TX, TX) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXY() (TW, TA, TX, TY) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXZ() (TW, TA, TX, TZ) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXW() (TW, TA, TX, TW) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXA() (TW, TA, TX, TA) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXB() (TW, TA, TX, TB) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYX() (TW, TA, TY, TX) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYY() (TW, TA, TY, TY) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYZ() (TW, TA, TY, TZ) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYW() (TW, TA, TY, TW) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYA() (TW, TA, TY, TA) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYB() (TW, TA, TY, TB) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZX() (TW, TA, TZ, TX) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZY() (TW, TA, TZ, TY) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZZ() (TW, TA, TZ, TZ) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZW() (TW, TA, TZ, TW) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZA() (TW, TA, TZ, TA) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZB() (TW, TA, TZ, TB) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWX() (TW, TA, TW, TX) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWY() (TW, TA, TW, TY) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWZ() (TW, TA, TW, TZ) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWW() (TW, TA, TW, TW) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWA() (TW, TA, TW, TA) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWB() (TW, TA, TW, TB) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAX() (TW, TA, TA, TX) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAY() (TW, TA, TA, TY) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAZ() (TW, TA, TA, TZ) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAW() (TW, TA, TA, TW) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAA() (TW, TA, TA, TA) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAB() (TW, TA, TA, TB) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABX() (TW, TA, TB, TX) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABY() (TW, TA, TB, TY) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABZ() (TW, TA, TB, TZ) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABW() (TW, TA, TB, TW) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABA() (TW, TA, TB, TA) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABB() (TW, TA, TB, TB) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXX() (TW, TB, TX, TX) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXY() (TW, TB, TX, TY) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXZ() (TW, TB, TX, TZ) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXW() (TW, TB, TX, TW) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXA() (TW, TB, TX, TA) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXB() (TW, TB, TX, TB) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYX() (TW, TB, TY, TX) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYY() (TW, TB, TY, TY) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYZ() (TW, TB, TY, TZ) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYW() (TW, TB, TY, TW) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYA() (TW, TB, TY, TA) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYB() (TW, TB, TY, TB) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZX() (TW, TB, TZ, TX) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZY() (TW, TB, TZ, TY) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZZ() (TW, TB, TZ, TZ) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZW() (TW, TB, TZ, TW) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZA() (TW, TB, TZ, TA) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZB() (TW, TB, TZ, TB) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWX() (TW, TB, TW, TX) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWY() (TW, TB, TW, TY) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWZ() (TW, TB, TW, TZ) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWW() (TW, TB, TW, TW) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWA() (TW, TB, TW, TA) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWB() (TW, TB, TW, TB) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAX() (TW, TB, TA, TX) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAY() (TW, TB, TA, TY) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAZ() (TW, TB, TA, TZ) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAW() (TW, TB, TA, TW) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAA() (TW, TB, TA, TA) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAB() (TW, TB, TA, TB) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBX() (TW, TB, TB, TX) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBY() (TW, TB, TB, TY) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBZ() (TW, TB, TB, TZ) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBW() (TW, TB, TB, TW) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBA() (TW, TB, TB, TA) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBB() (TW, TB, TB, TB) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXX() (TA, TX, TX, TX) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXY() (TA, TX, TX, TY) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXZ() (TA, TX, TX, TZ) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXW() (TA, TX, TX, TW) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXA() (TA, TX, TX, TA) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXB() (TA, TX, TX, TB) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYX() (TA, TX, TY, TX) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYY() (TA, TX, TY, TY) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYZ() (TA, TX, TY, TZ) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYW() (TA, TX, TY, TW) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYA() (TA, TX, TY, TA) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYB() (TA, TX, TY, TB) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZX() (TA, TX, TZ, TX) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZY() (TA, TX, TZ, TY) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZZ() (TA, TX, TZ, TZ) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZW() (TA, TX, TZ, TW) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZA() (TA, TX, TZ, TA) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZB() (TA, TX, TZ, TB) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWX() (TA, TX, TW, TX) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWY() (TA, TX, TW, TY) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWZ() (TA, TX, TW, TZ) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWW() (TA, TX, TW, TW) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWA() (TA, TX, TW, TA) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWB() (TA, TX, TW, TB) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAX() (TA, TX, TA, TX) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAY() (TA, TX, TA, TY) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAZ() (TA, TX, TA, TZ) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAW() (TA, TX, TA, TW) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAA() (TA, TX, TA, TA) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAB() (TA, TX, TA, TB) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBX() (TA, TX, TB, TX) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBY() (TA, TX, TB, TY) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBZ() (TA, TX, TB, TZ) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBW() (TA, TX, TB, TW) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBA() (TA, TX, TB, TA) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBB() (TA, TX, TB, TB) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXX() (TA, TY, TX, TX) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXY() (TA, TY, TX, TY) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXZ() (TA, TY, TX, TZ) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXW() (TA, TY, TX, TW) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXA() (TA, TY, TX, TA) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXB() (TA, TY, TX, TB) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYX() (TA, TY, TY, TX) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYY() (TA, TY, TY, TY) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYZ() (TA, TY, TY, TZ) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYW() (TA, TY, TY, TW) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYA() (TA, TY, TY, TA) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYB() (TA, TY, TY, TB) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZX() (TA, TY, TZ, TX) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZY() (TA, TY, TZ, TY) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZZ() (TA, TY, TZ, TZ) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZW() (TA, TY, TZ, TW) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZA() (TA, TY, TZ, TA) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZB() (TA, TY, TZ, TB) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWX() (TA, TY, TW, TX) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWY() (TA, TY, TW, TY) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWZ() (TA, TY, TW, TZ) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWW() (TA, TY, TW, TW) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWA() (TA, TY, TW, TA) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWB() (TA, TY, TW, TB) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAX() (TA, TY, TA, TX) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAY() (TA, TY, TA, TY) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAZ() (TA, TY, TA, TZ) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAW() (TA, TY, TA, TW) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAA() (TA, TY, TA, TA) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAB() (TA, TY, TA, TB) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBX() (TA, TY, TB, TX) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBY() (TA, TY, TB, TY) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBZ() (TA, TY, TB, TZ) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBW() (TA, TY, TB, TW) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBA() (TA, TY, TB, TA) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBB() (TA, TY, TB, TB) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXX() (TA, TZ, TX, TX) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXY() (TA, TZ, TX, TY) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXZ() (TA, TZ, TX, TZ) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXW() (TA, TZ, TX, TW) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXA() (TA, TZ, TX, TA) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXB() (TA, TZ, TX, TB) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYX() (TA, TZ, TY, TX) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYY() (TA, TZ, TY, TY) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYZ() (TA, TZ, TY, TZ) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYW() (TA, TZ, TY, TW) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYA() (TA, TZ, TY, TA) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYB() (TA, TZ, TY, TB) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZX() (TA, TZ, TZ, TX) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZY() (TA, TZ, TZ, TY) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZZ() (TA, TZ, TZ, TZ) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZW() (TA, TZ, TZ, TW) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZA() (TA, TZ, TZ, TA) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZB() (TA, TZ, TZ, TB) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWX() (TA, TZ, TW, TX) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWY() (TA, TZ, TW, TY) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWZ() (TA, TZ, TW, TZ) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWW() (TA, TZ, TW, TW) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWA() (TA, TZ, TW, TA) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWB() (TA, TZ, TW, TB) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAX() (TA, TZ, TA, TX) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAY() (TA, TZ, TA, TY) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAZ() (TA, TZ, TA, TZ) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAW() (TA, TZ, TA, TW) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAA() (TA, TZ, TA, TA) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAB() (TA, TZ, TA, TB) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBX() (TA, TZ, TB, TX) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBY() (TA, TZ, TB, TY) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBZ() (TA, TZ, TB, TZ) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBW() (TA, TZ, TB, TW) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBA() (TA, TZ, TB, TA) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBB() (TA, TZ, TB, TB) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXX() (TA, TW, TX, TX) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXY() (TA, TW, TX, TY) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXZ() (TA, TW, TX, TZ) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXW() (TA, TW, TX, TW) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXA() (TA, TW, TX, TA) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXB() (TA, TW, TX, TB) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYX() (TA, TW, TY, TX) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYY() (TA, TW, TY, TY) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYZ() (TA, TW, TY, TZ) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYW() (TA, TW, TY, TW) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYA() (TA, TW, TY, TA) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYB() (TA, TW, TY, TB) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZX() (TA, TW, TZ, TX) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZY() (TA, TW, TZ, TY) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZZ() (TA, TW, TZ, TZ) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZW() (TA, TW, TZ, TW) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZA() (TA, TW, TZ, TA) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZB() (TA, TW, TZ, TB) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWX() (TA, TW, TW, TX) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWY() (TA, TW, TW, TY) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWZ() (TA, TW, TW, TZ) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWW() (TA, TW, TW, TW) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWA() (TA, TW, TW, TA) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWB() (TA, TW, TW, TB) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAX() (TA, TW, TA, TX) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAY() (TA, TW, TA, TY) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAZ() (TA, TW, TA, TZ) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAW() (TA, TW, TA, TW) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAA() (TA, TW, TA, TA) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAB() (TA, TW, TA, TB) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBX() (TA, TW, TB, TX) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBY() (TA, TW, TB, TY) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBZ() (TA, TW, TB, TZ) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBW() (TA, TW, TB, TW) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBA() (TA, TW, TB, TA) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBB() (TA, TW, TB, TB) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXX() (TA, TA, TX, TX) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXY() (TA, TA, TX, TY) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXZ() (TA, TA, TX, TZ) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXW() (TA, TA, TX, TW) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXA() (TA, TA, TX, TA) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXB() (TA, TA, TX, TB) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYX() (TA, TA, TY, TX) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYY() (TA, TA, TY, TY) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYZ() (TA, TA, TY, TZ) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYW() (TA, TA, TY, TW) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYA() (TA, TA, TY, TA) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYB() (TA, TA, TY, TB) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZX() (TA, TA, TZ, TX) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZY() (TA, TA, TZ, TY) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZZ() (TA, TA, TZ, TZ) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZW() (TA, TA, TZ, TW) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZA() (TA, TA, TZ, TA) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZB() (TA, TA, TZ, TB) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWX() (TA, TA, TW, TX) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWY() (TA, TA, TW, TY) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWZ() (TA, TA, TW, TZ) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWW() (TA, TA, TW, TW) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWA() (TA, TA, TW, TA) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWB() (TA, TA, TW, TB) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAX() (TA, TA, TA, TX) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAY() (TA, TA, TA, TY) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAZ() (TA, TA, TA, TZ) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAW() (TA, TA, TA, TW) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAA() (TA, TA, TA, TA) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAB() (TA, TA, TA, TB) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABX() (TA, TA, TB, TX) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABY() (TA, TA, TB, TY) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABZ() (TA, TA, TB, TZ) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABW() (TA, TA, TB, TW) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABA() (TA, TA, TB, TA) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABB() (TA, TA, TB, TB) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXX() (TA, TB, TX, TX) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXY() (TA, TB, TX, TY) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXZ() (TA, TB, TX, TZ) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXW() (TA, TB, TX, TW) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXA() (TA, TB, TX, TA) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXB() (TA, TB, TX, TB) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYX() (TA, TB, TY, TX) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYY() (TA, TB, TY, TY) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYZ() (TA, TB, TY, TZ) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYW() (TA, TB, TY, TW) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYA() (TA, TB, TY, TA) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYB() (TA, TB, TY, TB) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZX() (TA, TB, TZ, TX) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZY() (TA, TB, TZ, TY) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZZ() (TA, TB, TZ, TZ) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZW() (TA, TB, TZ, TW) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZA() (TA, TB, TZ, TA) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZB() (TA, TB, TZ, TB) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWX() (TA, TB, TW, TX) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWY() (TA, TB, TW, TY) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWZ() (TA, TB, TW, TZ) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWW() (TA, TB, TW, TW) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWA() (TA, TB, TW, TA) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWB() (TA, TB, TW, TB) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAX() (TA, TB, TA, TX) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAY() (TA, TB, TA, TY) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAZ() (TA, TB, TA, TZ) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAW() (TA, TB, TA, TW) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAA() (TA, TB, TA, TA) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAB() (TA, TB, TA, TB) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBX() (TA, TB, TB, TX) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBY() (TA, TB, TB, TY) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBZ() (TA, TB, TB, TZ) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBW() (TA, TB, TB, TW) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBA() (TA, TB, TB, TA) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBB() (TA, TB, TB, TB) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXX() (TB, TX, TX, TX) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXY() (TB, TX, TX, TY) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXZ() (TB, TX, TX, TZ) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXW() (TB, TX, TX, TW) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXA() (TB, TX, TX, TA) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXB() (TB, TX, TX, TB) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYX() (TB, TX, TY, TX) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYY() (TB, TX, TY, TY) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYZ() (TB, TX, TY, TZ) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYW() (TB, TX, TY, TW) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYA() (TB, TX, TY, TA) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYB() (TB, TX, TY, TB) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZX() (TB, TX, TZ, TX) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZY() (TB, TX, TZ, TY) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZZ() (TB, TX, TZ, TZ) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZW() (TB, TX, TZ, TW) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZA() (TB, TX, TZ, TA) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZB() (TB, TX, TZ, TB) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWX() (TB, TX, TW, TX) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWY() (TB, TX, TW, TY) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWZ() (TB, TX, TW, TZ) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWW() (TB, TX, TW, TW) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWA() (TB, TX, TW, TA) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWB() (TB, TX, TW, TB) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAX() (TB, TX, TA, TX) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAY() (TB, TX, TA, TY) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAZ() (TB, TX, TA, TZ) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAW() (TB, TX, TA, TW) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAA() (TB, TX, TA, TA) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAB() (TB, TX, TA, TB) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBX() (TB, TX, TB, TX) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBY() (TB, TX, TB, TY) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBZ() (TB, TX, TB, TZ) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBW() (TB, TX, TB, TW) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBA() (TB, TX, TB, TA) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBB() (TB, TX, TB, TB) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXX() (TB, TY, TX, TX) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXY() (TB, TY, TX, TY) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXZ() (TB, TY, TX, TZ) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXW() (TB, TY, TX, TW) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXA() (TB, TY, TX, TA) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXB() (TB, TY, TX, TB) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYX() (TB, TY, TY, TX) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYY() (TB, TY, TY, TY) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYZ() (TB, TY, TY, TZ) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYW() (TB, TY, TY, TW) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYA() (TB, TY, TY, TA) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYB() (TB, TY, TY, TB) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZX() (TB, TY, TZ, TX) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZY() (TB, TY, TZ, TY) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZZ() (TB, TY, TZ, TZ) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZW() (TB, TY, TZ, TW) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZA() (TB, TY, TZ, TA) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZB() (TB, TY, TZ, TB) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWX() (TB, TY, TW, TX) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWY() (TB, TY, TW, TY) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWZ() (TB, TY, TW, TZ) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWW() (TB, TY, TW, TW) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWA() (TB, TY, TW, TA) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWB() (TB, TY, TW, TB) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAX() (TB, TY, TA, TX) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAY() (TB, TY, TA, TY) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAZ() (TB, TY, TA, TZ) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAW() (TB, TY, TA, TW) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAA() (TB, TY, TA, TA) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAB() (TB, TY, TA, TB) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBX() (TB, TY, TB, TX) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBY() (TB, TY, TB, TY) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBZ() (TB, TY, TB, TZ) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBW() (TB, TY, TB, TW) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBA() (TB, TY, TB, TA) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBB() (TB, TY, TB, TB) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXX() (TB, TZ, TX, TX) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXY() (TB, TZ, TX, TY) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXZ() (TB, TZ, TX, TZ) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXW() (TB, TZ, TX, TW) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXA() (TB, TZ, TX, TA) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXB() (TB, TZ, TX, TB) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYX() (TB, TZ, TY, TX) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYY() (TB, TZ, TY, TY) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYZ() (TB, TZ, TY, TZ) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYW() (TB, TZ, TY, TW) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYA() (TB, TZ, TY, TA) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYB() (TB, TZ, TY, TB) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZX() (TB, TZ, TZ, TX) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZY() (TB, TZ, TZ, TY) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZZ() (TB, TZ, TZ, TZ) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZW() (TB, TZ, TZ, TW) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZA() (TB, TZ, TZ, TA) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZB() (TB, TZ, TZ, TB) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWX() (TB, TZ, TW, TX) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWY() (TB, TZ, TW, TY) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWZ() (TB, TZ, TW, TZ) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWW() (TB, TZ, TW, TW) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWA() (TB, TZ, TW, TA) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWB() (TB, TZ, TW, TB) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAX() (TB, TZ, TA, TX) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAY() (TB, TZ, TA, TY) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAZ() (TB, TZ, TA, TZ) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAW() (TB, TZ, TA, TW) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAA() (TB, TZ, TA, TA) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAB() (TB, TZ, TA, TB) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBX() (TB, TZ, TB, TX) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBY() (TB, TZ, TB, TY) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBZ() (TB, TZ, TB, TZ) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBW() (TB, TZ, TB, TW) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBA() (TB, TZ, TB, TA) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBB() (TB, TZ, TB, TB) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXX() (TB, TW, TX, TX) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXY() (TB, TW, TX, TY) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXZ() (TB, TW, TX, TZ) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXW() (TB, TW, TX, TW) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXA() (TB, TW, TX, TA) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXB() (TB, TW, TX, TB) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYX() (TB, TW, TY, TX) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYY() (TB, TW, TY, TY) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYZ() (TB, TW, TY, TZ) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYW() (TB, TW, TY, TW) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYA() (TB, TW, TY, TA) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYB() (TB, TW, TY, TB) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZX() (TB, TW, TZ, TX) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZY() (TB, TW, TZ, TY) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZZ() (TB, TW, TZ, TZ) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZW() (TB, TW, TZ, TW) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZA() (TB, TW, TZ, TA) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZB() (TB, TW, TZ, TB) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWX() (TB, TW, TW, TX) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWY() (TB, TW, TW, TY) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWZ() (TB, TW, TW, TZ) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWW() (TB, TW, TW, TW) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWA() (TB, TW, TW, TA) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWB() (TB, TW, TW, TB) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAX() (TB, TW, TA, TX) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAY() (TB, TW, TA, TY) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAZ() (TB, TW, TA, TZ) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAW() (TB, TW, TA, TW) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAA() (TB, TW, TA, TA) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAB() (TB, TW, TA, TB) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBX() (TB, TW, TB, TX) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBY() (TB, TW, TB, TY) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBZ() (TB, TW, TB, TZ) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBW() (TB, TW, TB, TW) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBA() (TB, TW, TB, TA) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBB() (TB, TW, TB, TB) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXX() (TB, TA, TX, TX) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXY() (TB, TA, TX, TY) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXZ() (TB, TA, TX, TZ) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXW() (TB, TA, TX, TW) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXA() (TB, TA, TX, TA) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXB() (TB, TA, TX, TB) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYX() (TB, TA, TY, TX) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYY() (TB, TA, TY, TY) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYZ() (TB, TA, TY, TZ) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYW() (TB, TA, TY, TW) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYA() (TB, TA, TY, TA) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYB() (TB, TA, TY, TB) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZX() (TB, TA, TZ, TX) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZY() (TB, TA, TZ, TY) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZZ() (TB, TA, TZ, TZ) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZW() (TB, TA, TZ, TW) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZA() (TB, TA, TZ, TA) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZB() (TB, TA, TZ, TB) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWX() (TB, TA, TW, TX) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWY() (TB, TA, TW, TY) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWZ() (TB, TA, TW, TZ) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWW() (TB, TA, TW, TW) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWA() (TB, TA, TW, TA) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWB() (TB, TA, TW, TB) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAX() (TB, TA, TA, TX) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAY() (TB, TA, TA, TY) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAZ() (TB, TA, TA, TZ) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAW() (TB, TA, TA, TW) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAA() (TB, TA, TA, TA) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAB() (TB, TA, TA, TB) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABX() (TB, TA, TB, TX) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABY() (TB, TA, TB, TY) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABZ() (TB, TA, TB, TZ) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABW() (TB, TA, TB, TW) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABA() (TB, TA, TB, TA) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABB() (TB, TA, TB, TB) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXX() (TB, TB, TX, TX) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXY() (TB, TB, TX, TY) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXZ() (TB, TB, TX, TZ) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXW() (TB, TB, TX, TW) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXA() (TB, TB, TX, TA) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXB() (TB, TB, TX, TB) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYX() (TB, TB, TY, TX) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYY() (TB, TB, TY, TY) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYZ() (TB, TB, TY, TZ) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYW() (TB, TB, TY, TW) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYA() (TB, TB, TY, TA) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYB() (TB, TB, TY, TB) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZX() (TB, TB, TZ, TX) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZY() (TB, TB, TZ, TY) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZZ() (TB, TB, TZ, TZ) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZW() (TB, TB, TZ, TW) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZA() (TB, TB, TZ, TA) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZB() (TB, TB, TZ, TB) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWX() (TB, TB, TW, TX) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWY() (TB, TB, TW, TY) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWZ() (TB, TB, TW, TZ) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWW() (TB, TB, TW, TW) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWA() (TB, TB, TW, TA) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWB() (TB, TB, TW, TB) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAX() (TB, TB, TA, TX) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAY() (TB, TB, TA, TY) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAZ() (TB, TB, TA, TZ) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAW() (TB, TB, TA, TW) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAA() (TB, TB, TA, TA) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAB() (TB, TB, TA, TB) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBX() (TB, TB, TB, TX) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBY() (TB, TB, TB, TY) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBZ() (TB, TB, TB, TZ) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBW() (TB, TB, TB, TW) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBA() (TB, TB, TB, TA) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBB() (TB, TB, TB, TB) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXXX() (TX, TX, TX, TX, TX) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXXY() (TX, TX, TX, TX, TY) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXXZ() (TX, TX, TX, TX, TZ) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXXW() (TX, TX, TX, TX, TW) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXXA() (TX, TX, TX, TX, TA) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXXB() (TX, TX, TX, TX, TB) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXYX() (TX, TX, TX, TY, TX) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXYY() (TX, TX, TX, TY, TY) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXYZ() (TX, TX, TX, TY, TZ) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXYW() (TX, TX, TX, TY, TW) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXYA() (TX, TX, TX, TY, TA) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXYB() (TX, TX, TX, TY, TB) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXZX() (TX, TX, TX, TZ, TX) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXZY() (TX, TX, TX, TZ, TY) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXZZ() (TX, TX, TX, TZ, TZ) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXZW() (TX, TX, TX, TZ, TW) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXZA() (TX, TX, TX, TZ, TA) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXZB() (TX, TX, TX, TZ, TB) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXWX() (TX, TX, TX, TW, TX) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXWY() (TX, TX, TX, TW, TY) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXWZ() (TX, TX, TX, TW, TZ) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXWW() (TX, TX, TX, TW, TW) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXWA() (TX, TX, TX, TW, TA) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXWB() (TX, TX, TX, TW, TB) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXAX() (TX, TX, TX, TA, TX) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXAY() (TX, TX, TX, TA, TY) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXAZ() (TX, TX, TX, TA, TZ) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXAW() (TX, TX, TX, TA, TW) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXAA() (TX, TX, TX, TA, TA) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXAB() (TX, TX, TX, TA, TB) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXBX() (TX, TX, TX, TB, TX) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXBY() (TX, TX, TX, TB, TY) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXBZ() (TX, TX, TX, TB, TZ) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXBW() (TX, TX, TX, TB, TW) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXBA() (TX, TX, TX, TB, TA) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXXBB() (TX, TX, TX, TB, TB) { return _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYXX() (TX, TX, TY, TX, TX) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYXY() (TX, TX, TY, TX, TY) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYXZ() (TX, TX, TY, TX, TZ) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYXW() (TX, TX, TY, TX, TW) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYXA() (TX, TX, TY, TX, TA) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYXB() (TX, TX, TY, TX, TB) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYYX() (TX, TX, TY, TY, TX) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYYY() (TX, TX, TY, TY, TY) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYYZ() (TX, TX, TY, TY, TZ) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYYW() (TX, TX, TY, TY, TW) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYYA() (TX, TX, TY, TY, TA) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYYB() (TX, TX, TY, TY, TB) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYZX() (TX, TX, TY, TZ, TX) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYZY() (TX, TX, TY, TZ, TY) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYZZ() (TX, TX, TY, TZ, TZ) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYZW() (TX, TX, TY, TZ, TW) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYZA() (TX, TX, TY, TZ, TA) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYZB() (TX, TX, TY, TZ, TB) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYWX() (TX, TX, TY, TW, TX) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYWY() (TX, TX, TY, TW, TY) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYWZ() (TX, TX, TY, TW, TZ) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYWW() (TX, TX, TY, TW, TW) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYWA() (TX, TX, TY, TW, TA) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYWB() (TX, TX, TY, TW, TB) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYAX() (TX, TX, TY, TA, TX) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYAY() (TX, TX, TY, TA, TY) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYAZ() (TX, TX, TY, TA, TZ) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYAW() (TX, TX, TY, TA, TW) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYAA() (TX, TX, TY, TA, TA) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYAB() (TX, TX, TY, TA, TB) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYBX() (TX, TX, TY, TB, TX) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYBY() (TX, TX, TY, TB, TY) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYBZ() (TX, TX, TY, TB, TZ) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYBW() (TX, TX, TY, TB, TW) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYBA() (TX, TX, TY, TB, TA) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXYBB() (TX, TX, TY, TB, TB) { return _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZXX() (TX, TX, TZ, TX, TX) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZXY() (TX, TX, TZ, TX, TY) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZXZ() (TX, TX, TZ, TX, TZ) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZXW() (TX, TX, TZ, TX, TW) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZXA() (TX, TX, TZ, TX, TA) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZXB() (TX, TX, TZ, TX, TB) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZYX() (TX, TX, TZ, TY, TX) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZYY() (TX, TX, TZ, TY, TY) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZYZ() (TX, TX, TZ, TY, TZ) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZYW() (TX, TX, TZ, TY, TW) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZYA() (TX, TX, TZ, TY, TA) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZYB() (TX, TX, TZ, TY, TB) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZZX() (TX, TX, TZ, TZ, TX) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZZY() (TX, TX, TZ, TZ, TY) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZZZ() (TX, TX, TZ, TZ, TZ) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZZW() (TX, TX, TZ, TZ, TW) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZZA() (TX, TX, TZ, TZ, TA) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZZB() (TX, TX, TZ, TZ, TB) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZWX() (TX, TX, TZ, TW, TX) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZWY() (TX, TX, TZ, TW, TY) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZWZ() (TX, TX, TZ, TW, TZ) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZWW() (TX, TX, TZ, TW, TW) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZWA() (TX, TX, TZ, TW, TA) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZWB() (TX, TX, TZ, TW, TB) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZAX() (TX, TX, TZ, TA, TX) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZAY() (TX, TX, TZ, TA, TY) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZAZ() (TX, TX, TZ, TA, TZ) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZAW() (TX, TX, TZ, TA, TW) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZAA() (TX, TX, TZ, TA, TA) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZAB() (TX, TX, TZ, TA, TB) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZBX() (TX, TX, TZ, TB, TX) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZBY() (TX, TX, TZ, TB, TY) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZBZ() (TX, TX, TZ, TB, TZ) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZBW() (TX, TX, TZ, TB, TW) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZBA() (TX, TX, TZ, TB, TA) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXZBB() (TX, TX, TZ, TB, TB) { return _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWXX() (TX, TX, TW, TX, TX) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWXY() (TX, TX, TW, TX, TY) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWXZ() (TX, TX, TW, TX, TZ) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWXW() (TX, TX, TW, TX, TW) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWXA() (TX, TX, TW, TX, TA) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWXB() (TX, TX, TW, TX, TB) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWYX() (TX, TX, TW, TY, TX) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWYY() (TX, TX, TW, TY, TY) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWYZ() (TX, TX, TW, TY, TZ) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWYW() (TX, TX, TW, TY, TW) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWYA() (TX, TX, TW, TY, TA) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWYB() (TX, TX, TW, TY, TB) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWZX() (TX, TX, TW, TZ, TX) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWZY() (TX, TX, TW, TZ, TY) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWZZ() (TX, TX, TW, TZ, TZ) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWZW() (TX, TX, TW, TZ, TW) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWZA() (TX, TX, TW, TZ, TA) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWZB() (TX, TX, TW, TZ, TB) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWWX() (TX, TX, TW, TW, TX) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWWY() (TX, TX, TW, TW, TY) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWWZ() (TX, TX, TW, TW, TZ) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWWW() (TX, TX, TW, TW, TW) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWWA() (TX, TX, TW, TW, TA) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWWB() (TX, TX, TW, TW, TB) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWAX() (TX, TX, TW, TA, TX) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWAY() (TX, TX, TW, TA, TY) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWAZ() (TX, TX, TW, TA, TZ) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWAW() (TX, TX, TW, TA, TW) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWAA() (TX, TX, TW, TA, TA) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWAB() (TX, TX, TW, TA, TB) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWBX() (TX, TX, TW, TB, TX) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWBY() (TX, TX, TW, TB, TY) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWBZ() (TX, TX, TW, TB, TZ) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWBW() (TX, TX, TW, TB, TW) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWBA() (TX, TX, TW, TB, TA) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXWBB() (TX, TX, TW, TB, TB) { return _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAXX() (TX, TX, TA, TX, TX) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAXY() (TX, TX, TA, TX, TY) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAXZ() (TX, TX, TA, TX, TZ) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAXW() (TX, TX, TA, TX, TW) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAXA() (TX, TX, TA, TX, TA) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAXB() (TX, TX, TA, TX, TB) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAYX() (TX, TX, TA, TY, TX) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAYY() (TX, TX, TA, TY, TY) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAYZ() (TX, TX, TA, TY, TZ) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAYW() (TX, TX, TA, TY, TW) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAYA() (TX, TX, TA, TY, TA) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAYB() (TX, TX, TA, TY, TB) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAZX() (TX, TX, TA, TZ, TX) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAZY() (TX, TX, TA, TZ, TY) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAZZ() (TX, TX, TA, TZ, TZ) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAZW() (TX, TX, TA, TZ, TW) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAZA() (TX, TX, TA, TZ, TA) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAZB() (TX, TX, TA, TZ, TB) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAWX() (TX, TX, TA, TW, TX) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAWY() (TX, TX, TA, TW, TY) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAWZ() (TX, TX, TA, TW, TZ) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAWW() (TX, TX, TA, TW, TW) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAWA() (TX, TX, TA, TW, TA) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAWB() (TX, TX, TA, TW, TB) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAAX() (TX, TX, TA, TA, TX) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAAY() (TX, TX, TA, TA, TY) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAAZ() (TX, TX, TA, TA, TZ) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAAW() (TX, TX, TA, TA, TW) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAAA() (TX, TX, TA, TA, TA) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXAAB() (TX, TX, TA, TA, TB) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXABX() (TX, TX, TA, TB, TX) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXABY() (TX, TX, TA, TB, TY) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXABZ() (TX, TX, TA, TB, TZ) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXABW() (TX, TX, TA, TB, TW) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXABA() (TX, TX, TA, TB, TA) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXABB() (TX, TX, TA, TB, TB) { return _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBXX() (TX, TX, TB, TX, TX) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBXY() (TX, TX, TB, TX, TY) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBXZ() (TX, TX, TB, TX, TZ) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBXW() (TX, TX, TB, TX, TW) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBXA() (TX, TX, TB, TX, TA) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBXB() (TX, TX, TB, TX, TB) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBYX() (TX, TX, TB, TY, TX) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBYY() (TX, TX, TB, TY, TY) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBYZ() (TX, TX, TB, TY, TZ) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBYW() (TX, TX, TB, TY, TW) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBYA() (TX, TX, TB, TY, TA) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBYB() (TX, TX, TB, TY, TB) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBZX() (TX, TX, TB, TZ, TX) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBZY() (TX, TX, TB, TZ, TY) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBZZ() (TX, TX, TB, TZ, TZ) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBZW() (TX, TX, TB, TZ, TW) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBZA() (TX, TX, TB, TZ, TA) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBZB() (TX, TX, TB, TZ, TB) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBWX() (TX, TX, TB, TW, TX) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBWY() (TX, TX, TB, TW, TY) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBWZ() (TX, TX, TB, TW, TZ) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBWW() (TX, TX, TB, TW, TW) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBWA() (TX, TX, TB, TW, TA) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBWB() (TX, TX, TB, TW, TB) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBAX() (TX, TX, TB, TA, TX) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBAY() (TX, TX, TB, TA, TY) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBAZ() (TX, TX, TB, TA, TZ) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBAW() (TX, TX, TB, TA, TW) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBAA() (TX, TX, TB, TA, TA) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBAB() (TX, TX, TB, TA, TB) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBBX() (TX, TX, TB, TB, TX) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBBY() (TX, TX, TB, TB, TY) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBBZ() (TX, TX, TB, TB, TZ) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBBW() (TX, TX, TB, TB, TW) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBBA() (TX, TX, TB, TB, TA) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XXBBB() (TX, TX, TB, TB, TB) { return _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXXX() (TX, TY, TX, TX, TX) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXXY() (TX, TY, TX, TX, TY) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXXZ() (TX, TY, TX, TX, TZ) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXXW() (TX, TY, TX, TX, TW) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXXA() (TX, TY, TX, TX, TA) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXXB() (TX, TY, TX, TX, TB) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXYX() (TX, TY, TX, TY, TX) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXYY() (TX, TY, TX, TY, TY) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXYZ() (TX, TY, TX, TY, TZ) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXYW() (TX, TY, TX, TY, TW) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXYA() (TX, TY, TX, TY, TA) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXYB() (TX, TY, TX, TY, TB) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXZX() (TX, TY, TX, TZ, TX) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXZY() (TX, TY, TX, TZ, TY) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXZZ() (TX, TY, TX, TZ, TZ) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXZW() (TX, TY, TX, TZ, TW) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXZA() (TX, TY, TX, TZ, TA) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXZB() (TX, TY, TX, TZ, TB) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXWX() (TX, TY, TX, TW, TX) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXWY() (TX, TY, TX, TW, TY) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXWZ() (TX, TY, TX, TW, TZ) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXWW() (TX, TY, TX, TW, TW) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXWA() (TX, TY, TX, TW, TA) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXWB() (TX, TY, TX, TW, TB) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXAX() (TX, TY, TX, TA, TX) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXAY() (TX, TY, TX, TA, TY) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXAZ() (TX, TY, TX, TA, TZ) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXAW() (TX, TY, TX, TA, TW) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXAA() (TX, TY, TX, TA, TA) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXAB() (TX, TY, TX, TA, TB) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXBX() (TX, TY, TX, TB, TX) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXBY() (TX, TY, TX, TB, TY) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXBZ() (TX, TY, TX, TB, TZ) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXBW() (TX, TY, TX, TB, TW) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXBA() (TX, TY, TX, TB, TA) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYXBB() (TX, TY, TX, TB, TB) { return _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYXX() (TX, TY, TY, TX, TX) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYXY() (TX, TY, TY, TX, TY) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYXZ() (TX, TY, TY, TX, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYXW() (TX, TY, TY, TX, TW) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYXA() (TX, TY, TY, TX, TA) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYXB() (TX, TY, TY, TX, TB) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYYX() (TX, TY, TY, TY, TX) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYYY() (TX, TY, TY, TY, TY) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYYZ() (TX, TY, TY, TY, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYYW() (TX, TY, TY, TY, TW) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYYA() (TX, TY, TY, TY, TA) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYYB() (TX, TY, TY, TY, TB) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYZX() (TX, TY, TY, TZ, TX) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYZY() (TX, TY, TY, TZ, TY) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYZZ() (TX, TY, TY, TZ, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYZW() (TX, TY, TY, TZ, TW) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYZA() (TX, TY, TY, TZ, TA) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYZB() (TX, TY, TY, TZ, TB) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYWX() (TX, TY, TY, TW, TX) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYWY() (TX, TY, TY, TW, TY) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYWZ() (TX, TY, TY, TW, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYWW() (TX, TY, TY, TW, TW) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYWA() (TX, TY, TY, TW, TA) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYWB() (TX, TY, TY, TW, TB) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYAX() (TX, TY, TY, TA, TX) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYAY() (TX, TY, TY, TA, TY) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYAZ() (TX, TY, TY, TA, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYAW() (TX, TY, TY, TA, TW) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYAA() (TX, TY, TY, TA, TA) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYAB() (TX, TY, TY, TA, TB) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYBX() (TX, TY, TY, TB, TX) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYBY() (TX, TY, TY, TB, TY) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYBZ() (TX, TY, TY, TB, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYBW() (TX, TY, TY, TB, TW) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYBA() (TX, TY, TY, TB, TA) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYYBB() (TX, TY, TY, TB, TB) { return _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZXX() (TX, TY, TZ, TX, TX) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZXY() (TX, TY, TZ, TX, TY) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZXZ() (TX, TY, TZ, TX, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZXW() (TX, TY, TZ, TX, TW) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZXA() (TX, TY, TZ, TX, TA) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZXB() (TX, TY, TZ, TX, TB) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZYX() (TX, TY, TZ, TY, TX) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZYY() (TX, TY, TZ, TY, TY) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZYZ() (TX, TY, TZ, TY, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZYW() (TX, TY, TZ, TY, TW) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZYA() (TX, TY, TZ, TY, TA) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZYB() (TX, TY, TZ, TY, TB) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZZX() (TX, TY, TZ, TZ, TX) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZZY() (TX, TY, TZ, TZ, TY) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZZZ() (TX, TY, TZ, TZ, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZZW() (TX, TY, TZ, TZ, TW) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZZA() (TX, TY, TZ, TZ, TA) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZZB() (TX, TY, TZ, TZ, TB) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZWX() (TX, TY, TZ, TW, TX) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZWY() (TX, TY, TZ, TW, TY) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZWZ() (TX, TY, TZ, TW, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZWW() (TX, TY, TZ, TW, TW) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZWA() (TX, TY, TZ, TW, TA) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZWB() (TX, TY, TZ, TW, TB) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZAX() (TX, TY, TZ, TA, TX) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZAY() (TX, TY, TZ, TA, TY) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZAZ() (TX, TY, TZ, TA, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZAW() (TX, TY, TZ, TA, TW) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZAA() (TX, TY, TZ, TA, TA) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZAB() (TX, TY, TZ, TA, TB) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZBX() (TX, TY, TZ, TB, TX) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZBY() (TX, TY, TZ, TB, TY) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZBZ() (TX, TY, TZ, TB, TZ) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZBW() (TX, TY, TZ, TB, TW) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZBA() (TX, TY, TZ, TB, TA) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYZBB() (TX, TY, TZ, TB, TB) { return _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWXX() (TX, TY, TW, TX, TX) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWXY() (TX, TY, TW, TX, TY) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWXZ() (TX, TY, TW, TX, TZ) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWXW() (TX, TY, TW, TX, TW) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWXA() (TX, TY, TW, TX, TA) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWXB() (TX, TY, TW, TX, TB) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWYX() (TX, TY, TW, TY, TX) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWYY() (TX, TY, TW, TY, TY) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWYZ() (TX, TY, TW, TY, TZ) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWYW() (TX, TY, TW, TY, TW) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWYA() (TX, TY, TW, TY, TA) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWYB() (TX, TY, TW, TY, TB) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWZX() (TX, TY, TW, TZ, TX) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWZY() (TX, TY, TW, TZ, TY) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWZZ() (TX, TY, TW, TZ, TZ) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWZW() (TX, TY, TW, TZ, TW) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWZA() (TX, TY, TW, TZ, TA) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWZB() (TX, TY, TW, TZ, TB) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWWX() (TX, TY, TW, TW, TX) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWWY() (TX, TY, TW, TW, TY) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWWZ() (TX, TY, TW, TW, TZ) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWWW() (TX, TY, TW, TW, TW) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWWA() (TX, TY, TW, TW, TA) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWWB() (TX, TY, TW, TW, TB) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWAX() (TX, TY, TW, TA, TX) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWAY() (TX, TY, TW, TA, TY) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWAZ() (TX, TY, TW, TA, TZ) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWAW() (TX, TY, TW, TA, TW) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWAA() (TX, TY, TW, TA, TA) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWAB() (TX, TY, TW, TA, TB) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWBX() (TX, TY, TW, TB, TX) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWBY() (TX, TY, TW, TB, TY) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWBZ() (TX, TY, TW, TB, TZ) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWBW() (TX, TY, TW, TB, TW) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWBA() (TX, TY, TW, TB, TA) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYWBB() (TX, TY, TW, TB, TB) { return _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAXX() (TX, TY, TA, TX, TX) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAXY() (TX, TY, TA, TX, TY) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAXZ() (TX, TY, TA, TX, TZ) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAXW() (TX, TY, TA, TX, TW) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAXA() (TX, TY, TA, TX, TA) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAXB() (TX, TY, TA, TX, TB) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAYX() (TX, TY, TA, TY, TX) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAYY() (TX, TY, TA, TY, TY) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAYZ() (TX, TY, TA, TY, TZ) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAYW() (TX, TY, TA, TY, TW) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAYA() (TX, TY, TA, TY, TA) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAYB() (TX, TY, TA, TY, TB) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAZX() (TX, TY, TA, TZ, TX) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAZY() (TX, TY, TA, TZ, TY) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAZZ() (TX, TY, TA, TZ, TZ) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAZW() (TX, TY, TA, TZ, TW) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAZA() (TX, TY, TA, TZ, TA) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAZB() (TX, TY, TA, TZ, TB) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAWX() (TX, TY, TA, TW, TX) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAWY() (TX, TY, TA, TW, TY) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAWZ() (TX, TY, TA, TW, TZ) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAWW() (TX, TY, TA, TW, TW) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAWA() (TX, TY, TA, TW, TA) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAWB() (TX, TY, TA, TW, TB) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAAX() (TX, TY, TA, TA, TX) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAAY() (TX, TY, TA, TA, TY) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAAZ() (TX, TY, TA, TA, TZ) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAAW() (TX, TY, TA, TA, TW) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAAA() (TX, TY, TA, TA, TA) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYAAB() (TX, TY, TA, TA, TB) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYABX() (TX, TY, TA, TB, TX) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYABY() (TX, TY, TA, TB, TY) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYABZ() (TX, TY, TA, TB, TZ) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYABW() (TX, TY, TA, TB, TW) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYABA() (TX, TY, TA, TB, TA) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYABB() (TX, TY, TA, TB, TB) { return _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBXX() (TX, TY, TB, TX, TX) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBXY() (TX, TY, TB, TX, TY) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBXZ() (TX, TY, TB, TX, TZ) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBXW() (TX, TY, TB, TX, TW) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBXA() (TX, TY, TB, TX, TA) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBXB() (TX, TY, TB, TX, TB) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBYX() (TX, TY, TB, TY, TX) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBYY() (TX, TY, TB, TY, TY) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBYZ() (TX, TY, TB, TY, TZ) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBYW() (TX, TY, TB, TY, TW) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBYA() (TX, TY, TB, TY, TA) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBYB() (TX, TY, TB, TY, TB) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBZX() (TX, TY, TB, TZ, TX) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBZY() (TX, TY, TB, TZ, TY) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBZZ() (TX, TY, TB, TZ, TZ) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBZW() (TX, TY, TB, TZ, TW) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBZA() (TX, TY, TB, TZ, TA) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBZB() (TX, TY, TB, TZ, TB) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBWX() (TX, TY, TB, TW, TX) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBWY() (TX, TY, TB, TW, TY) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBWZ() (TX, TY, TB, TW, TZ) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBWW() (TX, TY, TB, TW, TW) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBWA() (TX, TY, TB, TW, TA) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBWB() (TX, TY, TB, TW, TB) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBAX() (TX, TY, TB, TA, TX) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBAY() (TX, TY, TB, TA, TY) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBAZ() (TX, TY, TB, TA, TZ) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBAW() (TX, TY, TB, TA, TW) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBAA() (TX, TY, TB, TA, TA) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBAB() (TX, TY, TB, TA, TB) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBBX() (TX, TY, TB, TB, TX) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBBY() (TX, TY, TB, TB, TY) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBBZ() (TX, TY, TB, TB, TZ) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBBW() (TX, TY, TB, TB, TW) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBBA() (TX, TY, TB, TB, TA) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XYBBB() (TX, TY, TB, TB, TB) { return _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXXX() (TX, TZ, TX, TX, TX) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXXY() (TX, TZ, TX, TX, TY) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXXZ() (TX, TZ, TX, TX, TZ) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXXW() (TX, TZ, TX, TX, TW) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXXA() (TX, TZ, TX, TX, TA) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXXB() (TX, TZ, TX, TX, TB) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXYX() (TX, TZ, TX, TY, TX) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXYY() (TX, TZ, TX, TY, TY) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXYZ() (TX, TZ, TX, TY, TZ) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXYW() (TX, TZ, TX, TY, TW) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXYA() (TX, TZ, TX, TY, TA) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXYB() (TX, TZ, TX, TY, TB) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXZX() (TX, TZ, TX, TZ, TX) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXZY() (TX, TZ, TX, TZ, TY) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXZZ() (TX, TZ, TX, TZ, TZ) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXZW() (TX, TZ, TX, TZ, TW) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXZA() (TX, TZ, TX, TZ, TA) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXZB() (TX, TZ, TX, TZ, TB) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXWX() (TX, TZ, TX, TW, TX) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXWY() (TX, TZ, TX, TW, TY) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXWZ() (TX, TZ, TX, TW, TZ) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXWW() (TX, TZ, TX, TW, TW) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXWA() (TX, TZ, TX, TW, TA) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXWB() (TX, TZ, TX, TW, TB) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXAX() (TX, TZ, TX, TA, TX) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXAY() (TX, TZ, TX, TA, TY) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXAZ() (TX, TZ, TX, TA, TZ) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXAW() (TX, TZ, TX, TA, TW) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXAA() (TX, TZ, TX, TA, TA) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXAB() (TX, TZ, TX, TA, TB) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXBX() (TX, TZ, TX, TB, TX) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXBY() (TX, TZ, TX, TB, TY) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXBZ() (TX, TZ, TX, TB, TZ) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXBW() (TX, TZ, TX, TB, TW) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXBA() (TX, TZ, TX, TB, TA) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZXBB() (TX, TZ, TX, TB, TB) { return _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYXX() (TX, TZ, TY, TX, TX) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYXY() (TX, TZ, TY, TX, TY) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYXZ() (TX, TZ, TY, TX, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYXW() (TX, TZ, TY, TX, TW) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYXA() (TX, TZ, TY, TX, TA) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYXB() (TX, TZ, TY, TX, TB) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYYX() (TX, TZ, TY, TY, TX) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYYY() (TX, TZ, TY, TY, TY) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYYZ() (TX, TZ, TY, TY, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYYW() (TX, TZ, TY, TY, TW) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYYA() (TX, TZ, TY, TY, TA) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYYB() (TX, TZ, TY, TY, TB) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYZX() (TX, TZ, TY, TZ, TX) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYZY() (TX, TZ, TY, TZ, TY) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYZZ() (TX, TZ, TY, TZ, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYZW() (TX, TZ, TY, TZ, TW) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYZA() (TX, TZ, TY, TZ, TA) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYZB() (TX, TZ, TY, TZ, TB) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYWX() (TX, TZ, TY, TW, TX) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYWY() (TX, TZ, TY, TW, TY) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYWZ() (TX, TZ, TY, TW, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYWW() (TX, TZ, TY, TW, TW) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYWA() (TX, TZ, TY, TW, TA) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYWB() (TX, TZ, TY, TW, TB) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYAX() (TX, TZ, TY, TA, TX) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYAY() (TX, TZ, TY, TA, TY) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYAZ() (TX, TZ, TY, TA, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYAW() (TX, TZ, TY, TA, TW) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYAA() (TX, TZ, TY, TA, TA) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYAB() (TX, TZ, TY, TA, TB) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYBX() (TX, TZ, TY, TB, TX) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYBY() (TX, TZ, TY, TB, TY) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYBZ() (TX, TZ, TY, TB, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYBW() (TX, TZ, TY, TB, TW) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYBA() (TX, TZ, TY, TB, TA) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZYBB() (TX, TZ, TY, TB, TB) { return _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZXX() (TX, TZ, TZ, TX, TX) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZXY() (TX, TZ, TZ, TX, TY) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZXZ() (TX, TZ, TZ, TX, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZXW() (TX, TZ, TZ, TX, TW) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZXA() (TX, TZ, TZ, TX, TA) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZXB() (TX, TZ, TZ, TX, TB) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZYX() (TX, TZ, TZ, TY, TX) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZYY() (TX, TZ, TZ, TY, TY) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZYZ() (TX, TZ, TZ, TY, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZYW() (TX, TZ, TZ, TY, TW) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZYA() (TX, TZ, TZ, TY, TA) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZYB() (TX, TZ, TZ, TY, TB) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZZX() (TX, TZ, TZ, TZ, TX) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZZY() (TX, TZ, TZ, TZ, TY) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZZZ() (TX, TZ, TZ, TZ, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZZW() (TX, TZ, TZ, TZ, TW) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZZA() (TX, TZ, TZ, TZ, TA) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZZB() (TX, TZ, TZ, TZ, TB) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZWX() (TX, TZ, TZ, TW, TX) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZWY() (TX, TZ, TZ, TW, TY) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZWZ() (TX, TZ, TZ, TW, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZWW() (TX, TZ, TZ, TW, TW) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZWA() (TX, TZ, TZ, TW, TA) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZWB() (TX, TZ, TZ, TW, TB) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZAX() (TX, TZ, TZ, TA, TX) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZAY() (TX, TZ, TZ, TA, TY) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZAZ() (TX, TZ, TZ, TA, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZAW() (TX, TZ, TZ, TA, TW) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZAA() (TX, TZ, TZ, TA, TA) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZAB() (TX, TZ, TZ, TA, TB) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZBX() (TX, TZ, TZ, TB, TX) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZBY() (TX, TZ, TZ, TB, TY) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZBZ() (TX, TZ, TZ, TB, TZ) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZBW() (TX, TZ, TZ, TB, TW) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZBA() (TX, TZ, TZ, TB, TA) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZZBB() (TX, TZ, TZ, TB, TB) { return _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWXX() (TX, TZ, TW, TX, TX) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWXY() (TX, TZ, TW, TX, TY) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWXZ() (TX, TZ, TW, TX, TZ) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWXW() (TX, TZ, TW, TX, TW) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWXA() (TX, TZ, TW, TX, TA) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWXB() (TX, TZ, TW, TX, TB) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWYX() (TX, TZ, TW, TY, TX) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWYY() (TX, TZ, TW, TY, TY) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWYZ() (TX, TZ, TW, TY, TZ) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWYW() (TX, TZ, TW, TY, TW) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWYA() (TX, TZ, TW, TY, TA) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWYB() (TX, TZ, TW, TY, TB) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWZX() (TX, TZ, TW, TZ, TX) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWZY() (TX, TZ, TW, TZ, TY) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWZZ() (TX, TZ, TW, TZ, TZ) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWZW() (TX, TZ, TW, TZ, TW) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWZA() (TX, TZ, TW, TZ, TA) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWZB() (TX, TZ, TW, TZ, TB) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWWX() (TX, TZ, TW, TW, TX) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWWY() (TX, TZ, TW, TW, TY) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWWZ() (TX, TZ, TW, TW, TZ) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWWW() (TX, TZ, TW, TW, TW) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWWA() (TX, TZ, TW, TW, TA) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWWB() (TX, TZ, TW, TW, TB) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWAX() (TX, TZ, TW, TA, TX) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWAY() (TX, TZ, TW, TA, TY) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWAZ() (TX, TZ, TW, TA, TZ) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWAW() (TX, TZ, TW, TA, TW) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWAA() (TX, TZ, TW, TA, TA) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWAB() (TX, TZ, TW, TA, TB) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWBX() (TX, TZ, TW, TB, TX) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWBY() (TX, TZ, TW, TB, TY) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWBZ() (TX, TZ, TW, TB, TZ) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWBW() (TX, TZ, TW, TB, TW) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWBA() (TX, TZ, TW, TB, TA) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZWBB() (TX, TZ, TW, TB, TB) { return _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAXX() (TX, TZ, TA, TX, TX) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAXY() (TX, TZ, TA, TX, TY) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAXZ() (TX, TZ, TA, TX, TZ) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAXW() (TX, TZ, TA, TX, TW) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAXA() (TX, TZ, TA, TX, TA) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAXB() (TX, TZ, TA, TX, TB) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAYX() (TX, TZ, TA, TY, TX) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAYY() (TX, TZ, TA, TY, TY) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAYZ() (TX, TZ, TA, TY, TZ) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAYW() (TX, TZ, TA, TY, TW) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAYA() (TX, TZ, TA, TY, TA) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAYB() (TX, TZ, TA, TY, TB) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAZX() (TX, TZ, TA, TZ, TX) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAZY() (TX, TZ, TA, TZ, TY) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAZZ() (TX, TZ, TA, TZ, TZ) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAZW() (TX, TZ, TA, TZ, TW) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAZA() (TX, TZ, TA, TZ, TA) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAZB() (TX, TZ, TA, TZ, TB) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAWX() (TX, TZ, TA, TW, TX) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAWY() (TX, TZ, TA, TW, TY) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAWZ() (TX, TZ, TA, TW, TZ) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAWW() (TX, TZ, TA, TW, TW) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAWA() (TX, TZ, TA, TW, TA) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAWB() (TX, TZ, TA, TW, TB) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAAX() (TX, TZ, TA, TA, TX) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAAY() (TX, TZ, TA, TA, TY) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAAZ() (TX, TZ, TA, TA, TZ) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAAW() (TX, TZ, TA, TA, TW) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAAA() (TX, TZ, TA, TA, TA) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZAAB() (TX, TZ, TA, TA, TB) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZABX() (TX, TZ, TA, TB, TX) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZABY() (TX, TZ, TA, TB, TY) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZABZ() (TX, TZ, TA, TB, TZ) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZABW() (TX, TZ, TA, TB, TW) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZABA() (TX, TZ, TA, TB, TA) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZABB() (TX, TZ, TA, TB, TB) { return _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBXX() (TX, TZ, TB, TX, TX) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBXY() (TX, TZ, TB, TX, TY) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBXZ() (TX, TZ, TB, TX, TZ) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBXW() (TX, TZ, TB, TX, TW) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBXA() (TX, TZ, TB, TX, TA) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBXB() (TX, TZ, TB, TX, TB) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBYX() (TX, TZ, TB, TY, TX) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBYY() (TX, TZ, TB, TY, TY) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBYZ() (TX, TZ, TB, TY, TZ) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBYW() (TX, TZ, TB, TY, TW) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBYA() (TX, TZ, TB, TY, TA) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBYB() (TX, TZ, TB, TY, TB) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBZX() (TX, TZ, TB, TZ, TX) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBZY() (TX, TZ, TB, TZ, TY) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBZZ() (TX, TZ, TB, TZ, TZ) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBZW() (TX, TZ, TB, TZ, TW) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBZA() (TX, TZ, TB, TZ, TA) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBZB() (TX, TZ, TB, TZ, TB) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBWX() (TX, TZ, TB, TW, TX) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBWY() (TX, TZ, TB, TW, TY) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBWZ() (TX, TZ, TB, TW, TZ) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBWW() (TX, TZ, TB, TW, TW) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBWA() (TX, TZ, TB, TW, TA) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBWB() (TX, TZ, TB, TW, TB) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBAX() (TX, TZ, TB, TA, TX) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBAY() (TX, TZ, TB, TA, TY) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBAZ() (TX, TZ, TB, TA, TZ) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBAW() (TX, TZ, TB, TA, TW) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBAA() (TX, TZ, TB, TA, TA) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBAB() (TX, TZ, TB, TA, TB) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBBX() (TX, TZ, TB, TB, TX) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBBY() (TX, TZ, TB, TB, TY) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBBZ() (TX, TZ, TB, TB, TZ) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBBW() (TX, TZ, TB, TB, TW) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBBA() (TX, TZ, TB, TB, TA) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XZBBB() (TX, TZ, TB, TB, TB) { return _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXXX() (TX, TW, TX, TX, TX) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXXY() (TX, TW, TX, TX, TY) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXXZ() (TX, TW, TX, TX, TZ) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXXW() (TX, TW, TX, TX, TW) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXXA() (TX, TW, TX, TX, TA) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXXB() (TX, TW, TX, TX, TB) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXYX() (TX, TW, TX, TY, TX) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXYY() (TX, TW, TX, TY, TY) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXYZ() (TX, TW, TX, TY, TZ) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXYW() (TX, TW, TX, TY, TW) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXYA() (TX, TW, TX, TY, TA) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXYB() (TX, TW, TX, TY, TB) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXZX() (TX, TW, TX, TZ, TX) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXZY() (TX, TW, TX, TZ, TY) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXZZ() (TX, TW, TX, TZ, TZ) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXZW() (TX, TW, TX, TZ, TW) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXZA() (TX, TW, TX, TZ, TA) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXZB() (TX, TW, TX, TZ, TB) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXWX() (TX, TW, TX, TW, TX) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXWY() (TX, TW, TX, TW, TY) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXWZ() (TX, TW, TX, TW, TZ) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXWW() (TX, TW, TX, TW, TW) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXWA() (TX, TW, TX, TW, TA) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXWB() (TX, TW, TX, TW, TB) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXAX() (TX, TW, TX, TA, TX) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXAY() (TX, TW, TX, TA, TY) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXAZ() (TX, TW, TX, TA, TZ) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXAW() (TX, TW, TX, TA, TW) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXAA() (TX, TW, TX, TA, TA) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXAB() (TX, TW, TX, TA, TB) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXBX() (TX, TW, TX, TB, TX) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXBY() (TX, TW, TX, TB, TY) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXBZ() (TX, TW, TX, TB, TZ) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXBW() (TX, TW, TX, TB, TW) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXBA() (TX, TW, TX, TB, TA) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWXBB() (TX, TW, TX, TB, TB) { return _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYXX() (TX, TW, TY, TX, TX) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYXY() (TX, TW, TY, TX, TY) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYXZ() (TX, TW, TY, TX, TZ) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYXW() (TX, TW, TY, TX, TW) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYXA() (TX, TW, TY, TX, TA) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYXB() (TX, TW, TY, TX, TB) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYYX() (TX, TW, TY, TY, TX) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYYY() (TX, TW, TY, TY, TY) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYYZ() (TX, TW, TY, TY, TZ) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYYW() (TX, TW, TY, TY, TW) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYYA() (TX, TW, TY, TY, TA) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYYB() (TX, TW, TY, TY, TB) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYZX() (TX, TW, TY, TZ, TX) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYZY() (TX, TW, TY, TZ, TY) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYZZ() (TX, TW, TY, TZ, TZ) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYZW() (TX, TW, TY, TZ, TW) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYZA() (TX, TW, TY, TZ, TA) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYZB() (TX, TW, TY, TZ, TB) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYWX() (TX, TW, TY, TW, TX) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYWY() (TX, TW, TY, TW, TY) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYWZ() (TX, TW, TY, TW, TZ) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYWW() (TX, TW, TY, TW, TW) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYWA() (TX, TW, TY, TW, TA) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYWB() (TX, TW, TY, TW, TB) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYAX() (TX, TW, TY, TA, TX) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYAY() (TX, TW, TY, TA, TY) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYAZ() (TX, TW, TY, TA, TZ) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYAW() (TX, TW, TY, TA, TW) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYAA() (TX, TW, TY, TA, TA) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYAB() (TX, TW, TY, TA, TB) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYBX() (TX, TW, TY, TB, TX) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYBY() (TX, TW, TY, TB, TY) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYBZ() (TX, TW, TY, TB, TZ) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYBW() (TX, TW, TY, TB, TW) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYBA() (TX, TW, TY, TB, TA) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWYBB() (TX, TW, TY, TB, TB) { return _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZXX() (TX, TW, TZ, TX, TX) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZXY() (TX, TW, TZ, TX, TY) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZXZ() (TX, TW, TZ, TX, TZ) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZXW() (TX, TW, TZ, TX, TW) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZXA() (TX, TW, TZ, TX, TA) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZXB() (TX, TW, TZ, TX, TB) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZYX() (TX, TW, TZ, TY, TX) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZYY() (TX, TW, TZ, TY, TY) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZYZ() (TX, TW, TZ, TY, TZ) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZYW() (TX, TW, TZ, TY, TW) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZYA() (TX, TW, TZ, TY, TA) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZYB() (TX, TW, TZ, TY, TB) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZZX() (TX, TW, TZ, TZ, TX) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZZY() (TX, TW, TZ, TZ, TY) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZZZ() (TX, TW, TZ, TZ, TZ) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZZW() (TX, TW, TZ, TZ, TW) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZZA() (TX, TW, TZ, TZ, TA) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZZB() (TX, TW, TZ, TZ, TB) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZWX() (TX, TW, TZ, TW, TX) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZWY() (TX, TW, TZ, TW, TY) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZWZ() (TX, TW, TZ, TW, TZ) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZWW() (TX, TW, TZ, TW, TW) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZWA() (TX, TW, TZ, TW, TA) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZWB() (TX, TW, TZ, TW, TB) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZAX() (TX, TW, TZ, TA, TX) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZAY() (TX, TW, TZ, TA, TY) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZAZ() (TX, TW, TZ, TA, TZ) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZAW() (TX, TW, TZ, TA, TW) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZAA() (TX, TW, TZ, TA, TA) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZAB() (TX, TW, TZ, TA, TB) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZBX() (TX, TW, TZ, TB, TX) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZBY() (TX, TW, TZ, TB, TY) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZBZ() (TX, TW, TZ, TB, TZ) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZBW() (TX, TW, TZ, TB, TW) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZBA() (TX, TW, TZ, TB, TA) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWZBB() (TX, TW, TZ, TB, TB) { return _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWXX() (TX, TW, TW, TX, TX) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWXY() (TX, TW, TW, TX, TY) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWXZ() (TX, TW, TW, TX, TZ) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWXW() (TX, TW, TW, TX, TW) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWXA() (TX, TW, TW, TX, TA) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWXB() (TX, TW, TW, TX, TB) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWYX() (TX, TW, TW, TY, TX) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWYY() (TX, TW, TW, TY, TY) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWYZ() (TX, TW, TW, TY, TZ) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWYW() (TX, TW, TW, TY, TW) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWYA() (TX, TW, TW, TY, TA) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWYB() (TX, TW, TW, TY, TB) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWZX() (TX, TW, TW, TZ, TX) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWZY() (TX, TW, TW, TZ, TY) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWZZ() (TX, TW, TW, TZ, TZ) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWZW() (TX, TW, TW, TZ, TW) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWZA() (TX, TW, TW, TZ, TA) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWZB() (TX, TW, TW, TZ, TB) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWWX() (TX, TW, TW, TW, TX) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWWY() (TX, TW, TW, TW, TY) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWWZ() (TX, TW, TW, TW, TZ) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWWW() (TX, TW, TW, TW, TW) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWWA() (TX, TW, TW, TW, TA) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWWB() (TX, TW, TW, TW, TB) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWAX() (TX, TW, TW, TA, TX) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWAY() (TX, TW, TW, TA, TY) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWAZ() (TX, TW, TW, TA, TZ) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWAW() (TX, TW, TW, TA, TW) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWAA() (TX, TW, TW, TA, TA) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWAB() (TX, TW, TW, TA, TB) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWBX() (TX, TW, TW, TB, TX) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWBY() (TX, TW, TW, TB, TY) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWBZ() (TX, TW, TW, TB, TZ) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWBW() (TX, TW, TW, TB, TW) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWBA() (TX, TW, TW, TB, TA) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWWBB() (TX, TW, TW, TB, TB) { return _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAXX() (TX, TW, TA, TX, TX) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAXY() (TX, TW, TA, TX, TY) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAXZ() (TX, TW, TA, TX, TZ) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAXW() (TX, TW, TA, TX, TW) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAXA() (TX, TW, TA, TX, TA) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAXB() (TX, TW, TA, TX, TB) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAYX() (TX, TW, TA, TY, TX) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAYY() (TX, TW, TA, TY, TY) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAYZ() (TX, TW, TA, TY, TZ) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAYW() (TX, TW, TA, TY, TW) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAYA() (TX, TW, TA, TY, TA) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAYB() (TX, TW, TA, TY, TB) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAZX() (TX, TW, TA, TZ, TX) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAZY() (TX, TW, TA, TZ, TY) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAZZ() (TX, TW, TA, TZ, TZ) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAZW() (TX, TW, TA, TZ, TW) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAZA() (TX, TW, TA, TZ, TA) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAZB() (TX, TW, TA, TZ, TB) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAWX() (TX, TW, TA, TW, TX) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAWY() (TX, TW, TA, TW, TY) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAWZ() (TX, TW, TA, TW, TZ) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAWW() (TX, TW, TA, TW, TW) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAWA() (TX, TW, TA, TW, TA) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAWB() (TX, TW, TA, TW, TB) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAAX() (TX, TW, TA, TA, TX) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAAY() (TX, TW, TA, TA, TY) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAAZ() (TX, TW, TA, TA, TZ) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAAW() (TX, TW, TA, TA, TW) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAAA() (TX, TW, TA, TA, TA) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWAAB() (TX, TW, TA, TA, TB) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWABX() (TX, TW, TA, TB, TX) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWABY() (TX, TW, TA, TB, TY) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWABZ() (TX, TW, TA, TB, TZ) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWABW() (TX, TW, TA, TB, TW) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWABA() (TX, TW, TA, TB, TA) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWABB() (TX, TW, TA, TB, TB) { return _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBXX() (TX, TW, TB, TX, TX) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBXY() (TX, TW, TB, TX, TY) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBXZ() (TX, TW, TB, TX, TZ) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBXW() (TX, TW, TB, TX, TW) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBXA() (TX, TW, TB, TX, TA) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBXB() (TX, TW, TB, TX, TB) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBYX() (TX, TW, TB, TY, TX) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBYY() (TX, TW, TB, TY, TY) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBYZ() (TX, TW, TB, TY, TZ) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBYW() (TX, TW, TB, TY, TW) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBYA() (TX, TW, TB, TY, TA) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBYB() (TX, TW, TB, TY, TB) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBZX() (TX, TW, TB, TZ, TX) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBZY() (TX, TW, TB, TZ, TY) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBZZ() (TX, TW, TB, TZ, TZ) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBZW() (TX, TW, TB, TZ, TW) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBZA() (TX, TW, TB, TZ, TA) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBZB() (TX, TW, TB, TZ, TB) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBWX() (TX, TW, TB, TW, TX) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBWY() (TX, TW, TB, TW, TY) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBWZ() (TX, TW, TB, TW, TZ) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBWW() (TX, TW, TB, TW, TW) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBWA() (TX, TW, TB, TW, TA) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBWB() (TX, TW, TB, TW, TB) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBAX() (TX, TW, TB, TA, TX) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBAY() (TX, TW, TB, TA, TY) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBAZ() (TX, TW, TB, TA, TZ) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBAW() (TX, TW, TB, TA, TW) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBAA() (TX, TW, TB, TA, TA) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBAB() (TX, TW, TB, TA, TB) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBBX() (TX, TW, TB, TB, TX) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBBY() (TX, TW, TB, TB, TY) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBBZ() (TX, TW, TB, TB, TZ) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBBW() (TX, TW, TB, TB, TW) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBBA() (TX, TW, TB, TB, TA) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XWBBB() (TX, TW, TB, TB, TB) { return _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXXX() (TX, TA, TX, TX, TX) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXXY() (TX, TA, TX, TX, TY) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXXZ() (TX, TA, TX, TX, TZ) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXXW() (TX, TA, TX, TX, TW) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXXA() (TX, TA, TX, TX, TA) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXXB() (TX, TA, TX, TX, TB) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXYX() (TX, TA, TX, TY, TX) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXYY() (TX, TA, TX, TY, TY) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXYZ() (TX, TA, TX, TY, TZ) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXYW() (TX, TA, TX, TY, TW) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXYA() (TX, TA, TX, TY, TA) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXYB() (TX, TA, TX, TY, TB) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXZX() (TX, TA, TX, TZ, TX) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXZY() (TX, TA, TX, TZ, TY) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXZZ() (TX, TA, TX, TZ, TZ) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXZW() (TX, TA, TX, TZ, TW) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXZA() (TX, TA, TX, TZ, TA) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXZB() (TX, TA, TX, TZ, TB) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXWX() (TX, TA, TX, TW, TX) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXWY() (TX, TA, TX, TW, TY) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXWZ() (TX, TA, TX, TW, TZ) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXWW() (TX, TA, TX, TW, TW) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXWA() (TX, TA, TX, TW, TA) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXWB() (TX, TA, TX, TW, TB) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXAX() (TX, TA, TX, TA, TX) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXAY() (TX, TA, TX, TA, TY) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXAZ() (TX, TA, TX, TA, TZ) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXAW() (TX, TA, TX, TA, TW) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXAA() (TX, TA, TX, TA, TA) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXAB() (TX, TA, TX, TA, TB) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXBX() (TX, TA, TX, TB, TX) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXBY() (TX, TA, TX, TB, TY) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXBZ() (TX, TA, TX, TB, TZ) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXBW() (TX, TA, TX, TB, TW) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXBA() (TX, TA, TX, TB, TA) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAXBB() (TX, TA, TX, TB, TB) { return _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYXX() (TX, TA, TY, TX, TX) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYXY() (TX, TA, TY, TX, TY) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYXZ() (TX, TA, TY, TX, TZ) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYXW() (TX, TA, TY, TX, TW) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYXA() (TX, TA, TY, TX, TA) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYXB() (TX, TA, TY, TX, TB) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYYX() (TX, TA, TY, TY, TX) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYYY() (TX, TA, TY, TY, TY) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYYZ() (TX, TA, TY, TY, TZ) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYYW() (TX, TA, TY, TY, TW) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYYA() (TX, TA, TY, TY, TA) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYYB() (TX, TA, TY, TY, TB) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYZX() (TX, TA, TY, TZ, TX) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYZY() (TX, TA, TY, TZ, TY) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYZZ() (TX, TA, TY, TZ, TZ) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYZW() (TX, TA, TY, TZ, TW) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYZA() (TX, TA, TY, TZ, TA) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYZB() (TX, TA, TY, TZ, TB) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYWX() (TX, TA, TY, TW, TX) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYWY() (TX, TA, TY, TW, TY) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYWZ() (TX, TA, TY, TW, TZ) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYWW() (TX, TA, TY, TW, TW) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYWA() (TX, TA, TY, TW, TA) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYWB() (TX, TA, TY, TW, TB) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYAX() (TX, TA, TY, TA, TX) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYAY() (TX, TA, TY, TA, TY) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYAZ() (TX, TA, TY, TA, TZ) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYAW() (TX, TA, TY, TA, TW) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYAA() (TX, TA, TY, TA, TA) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYAB() (TX, TA, TY, TA, TB) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYBX() (TX, TA, TY, TB, TX) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYBY() (TX, TA, TY, TB, TY) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYBZ() (TX, TA, TY, TB, TZ) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYBW() (TX, TA, TY, TB, TW) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYBA() (TX, TA, TY, TB, TA) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAYBB() (TX, TA, TY, TB, TB) { return _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZXX() (TX, TA, TZ, TX, TX) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZXY() (TX, TA, TZ, TX, TY) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZXZ() (TX, TA, TZ, TX, TZ) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZXW() (TX, TA, TZ, TX, TW) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZXA() (TX, TA, TZ, TX, TA) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZXB() (TX, TA, TZ, TX, TB) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZYX() (TX, TA, TZ, TY, TX) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZYY() (TX, TA, TZ, TY, TY) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZYZ() (TX, TA, TZ, TY, TZ) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZYW() (TX, TA, TZ, TY, TW) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZYA() (TX, TA, TZ, TY, TA) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZYB() (TX, TA, TZ, TY, TB) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZZX() (TX, TA, TZ, TZ, TX) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZZY() (TX, TA, TZ, TZ, TY) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZZZ() (TX, TA, TZ, TZ, TZ) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZZW() (TX, TA, TZ, TZ, TW) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZZA() (TX, TA, TZ, TZ, TA) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZZB() (TX, TA, TZ, TZ, TB) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZWX() (TX, TA, TZ, TW, TX) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZWY() (TX, TA, TZ, TW, TY) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZWZ() (TX, TA, TZ, TW, TZ) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZWW() (TX, TA, TZ, TW, TW) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZWA() (TX, TA, TZ, TW, TA) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZWB() (TX, TA, TZ, TW, TB) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZAX() (TX, TA, TZ, TA, TX) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZAY() (TX, TA, TZ, TA, TY) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZAZ() (TX, TA, TZ, TA, TZ) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZAW() (TX, TA, TZ, TA, TW) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZAA() (TX, TA, TZ, TA, TA) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZAB() (TX, TA, TZ, TA, TB) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZBX() (TX, TA, TZ, TB, TX) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZBY() (TX, TA, TZ, TB, TY) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZBZ() (TX, TA, TZ, TB, TZ) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZBW() (TX, TA, TZ, TB, TW) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZBA() (TX, TA, TZ, TB, TA) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAZBB() (TX, TA, TZ, TB, TB) { return _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWXX() (TX, TA, TW, TX, TX) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWXY() (TX, TA, TW, TX, TY) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWXZ() (TX, TA, TW, TX, TZ) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWXW() (TX, TA, TW, TX, TW) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWXA() (TX, TA, TW, TX, TA) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWXB() (TX, TA, TW, TX, TB) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWYX() (TX, TA, TW, TY, TX) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWYY() (TX, TA, TW, TY, TY) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWYZ() (TX, TA, TW, TY, TZ) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWYW() (TX, TA, TW, TY, TW) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWYA() (TX, TA, TW, TY, TA) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWYB() (TX, TA, TW, TY, TB) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWZX() (TX, TA, TW, TZ, TX) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWZY() (TX, TA, TW, TZ, TY) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWZZ() (TX, TA, TW, TZ, TZ) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWZW() (TX, TA, TW, TZ, TW) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWZA() (TX, TA, TW, TZ, TA) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWZB() (TX, TA, TW, TZ, TB) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWWX() (TX, TA, TW, TW, TX) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWWY() (TX, TA, TW, TW, TY) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWWZ() (TX, TA, TW, TW, TZ) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWWW() (TX, TA, TW, TW, TW) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWWA() (TX, TA, TW, TW, TA) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWWB() (TX, TA, TW, TW, TB) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWAX() (TX, TA, TW, TA, TX) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWAY() (TX, TA, TW, TA, TY) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWAZ() (TX, TA, TW, TA, TZ) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWAW() (TX, TA, TW, TA, TW) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWAA() (TX, TA, TW, TA, TA) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWAB() (TX, TA, TW, TA, TB) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWBX() (TX, TA, TW, TB, TX) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWBY() (TX, TA, TW, TB, TY) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWBZ() (TX, TA, TW, TB, TZ) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWBW() (TX, TA, TW, TB, TW) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWBA() (TX, TA, TW, TB, TA) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAWBB() (TX, TA, TW, TB, TB) { return _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAXX() (TX, TA, TA, TX, TX) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAXY() (TX, TA, TA, TX, TY) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAXZ() (TX, TA, TA, TX, TZ) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAXW() (TX, TA, TA, TX, TW) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAXA() (TX, TA, TA, TX, TA) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAXB() (TX, TA, TA, TX, TB) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAYX() (TX, TA, TA, TY, TX) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAYY() (TX, TA, TA, TY, TY) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAYZ() (TX, TA, TA, TY, TZ) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAYW() (TX, TA, TA, TY, TW) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAYA() (TX, TA, TA, TY, TA) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAYB() (TX, TA, TA, TY, TB) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAZX() (TX, TA, TA, TZ, TX) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAZY() (TX, TA, TA, TZ, TY) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAZZ() (TX, TA, TA, TZ, TZ) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAZW() (TX, TA, TA, TZ, TW) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAZA() (TX, TA, TA, TZ, TA) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAZB() (TX, TA, TA, TZ, TB) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAWX() (TX, TA, TA, TW, TX) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAWY() (TX, TA, TA, TW, TY) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAWZ() (TX, TA, TA, TW, TZ) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAWW() (TX, TA, TA, TW, TW) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAWA() (TX, TA, TA, TW, TA) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAWB() (TX, TA, TA, TW, TB) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAAX() (TX, TA, TA, TA, TX) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAAY() (TX, TA, TA, TA, TY) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAAZ() (TX, TA, TA, TA, TZ) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAAW() (TX, TA, TA, TA, TW) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAAA() (TX, TA, TA, TA, TA) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAAAB() (TX, TA, TA, TA, TB) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAABX() (TX, TA, TA, TB, TX) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAABY() (TX, TA, TA, TB, TY) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAABZ() (TX, TA, TA, TB, TZ) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAABW() (TX, TA, TA, TB, TW) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAABA() (TX, TA, TA, TB, TA) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XAABB() (TX, TA, TA, TB, TB) { return _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABXX() (TX, TA, TB, TX, TX) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABXY() (TX, TA, TB, TX, TY) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABXZ() (TX, TA, TB, TX, TZ) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABXW() (TX, TA, TB, TX, TW) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABXA() (TX, TA, TB, TX, TA) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABXB() (TX, TA, TB, TX, TB) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABYX() (TX, TA, TB, TY, TX) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABYY() (TX, TA, TB, TY, TY) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABYZ() (TX, TA, TB, TY, TZ) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABYW() (TX, TA, TB, TY, TW) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABYA() (TX, TA, TB, TY, TA) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABYB() (TX, TA, TB, TY, TB) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABZX() (TX, TA, TB, TZ, TX) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABZY() (TX, TA, TB, TZ, TY) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABZZ() (TX, TA, TB, TZ, TZ) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABZW() (TX, TA, TB, TZ, TW) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABZA() (TX, TA, TB, TZ, TA) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABZB() (TX, TA, TB, TZ, TB) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABWX() (TX, TA, TB, TW, TX) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABWY() (TX, TA, TB, TW, TY) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABWZ() (TX, TA, TB, TW, TZ) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABWW() (TX, TA, TB, TW, TW) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABWA() (TX, TA, TB, TW, TA) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABWB() (TX, TA, TB, TW, TB) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABAX() (TX, TA, TB, TA, TX) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABAY() (TX, TA, TB, TA, TY) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABAZ() (TX, TA, TB, TA, TZ) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABAW() (TX, TA, TB, TA, TW) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABAA() (TX, TA, TB, TA, TA) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABAB() (TX, TA, TB, TA, TB) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABBX() (TX, TA, TB, TB, TX) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABBY() (TX, TA, TB, TB, TY) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABBZ() (TX, TA, TB, TB, TZ) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABBW() (TX, TA, TB, TB, TW) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABBA() (TX, TA, TB, TB, TA) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XABBB() (TX, TA, TB, TB, TB) { return _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXXX() (TX, TB, TX, TX, TX) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXXY() (TX, TB, TX, TX, TY) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXXZ() (TX, TB, TX, TX, TZ) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXXW() (TX, TB, TX, TX, TW) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXXA() (TX, TB, TX, TX, TA) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXXB() (TX, TB, TX, TX, TB) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXYX() (TX, TB, TX, TY, TX) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXYY() (TX, TB, TX, TY, TY) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXYZ() (TX, TB, TX, TY, TZ) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXYW() (TX, TB, TX, TY, TW) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXYA() (TX, TB, TX, TY, TA) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXYB() (TX, TB, TX, TY, TB) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXZX() (TX, TB, TX, TZ, TX) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXZY() (TX, TB, TX, TZ, TY) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXZZ() (TX, TB, TX, TZ, TZ) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXZW() (TX, TB, TX, TZ, TW) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXZA() (TX, TB, TX, TZ, TA) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXZB() (TX, TB, TX, TZ, TB) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXWX() (TX, TB, TX, TW, TX) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXWY() (TX, TB, TX, TW, TY) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXWZ() (TX, TB, TX, TW, TZ) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXWW() (TX, TB, TX, TW, TW) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXWA() (TX, TB, TX, TW, TA) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXWB() (TX, TB, TX, TW, TB) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXAX() (TX, TB, TX, TA, TX) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXAY() (TX, TB, TX, TA, TY) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXAZ() (TX, TB, TX, TA, TZ) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXAW() (TX, TB, TX, TA, TW) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXAA() (TX, TB, TX, TA, TA) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXAB() (TX, TB, TX, TA, TB) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXBX() (TX, TB, TX, TB, TX) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXBY() (TX, TB, TX, TB, TY) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXBZ() (TX, TB, TX, TB, TZ) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXBW() (TX, TB, TX, TB, TW) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXBA() (TX, TB, TX, TB, TA) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBXBB() (TX, TB, TX, TB, TB) { return _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYXX() (TX, TB, TY, TX, TX) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYXY() (TX, TB, TY, TX, TY) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYXZ() (TX, TB, TY, TX, TZ) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYXW() (TX, TB, TY, TX, TW) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYXA() (TX, TB, TY, TX, TA) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYXB() (TX, TB, TY, TX, TB) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYYX() (TX, TB, TY, TY, TX) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYYY() (TX, TB, TY, TY, TY) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYYZ() (TX, TB, TY, TY, TZ) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYYW() (TX, TB, TY, TY, TW) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYYA() (TX, TB, TY, TY, TA) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYYB() (TX, TB, TY, TY, TB) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYZX() (TX, TB, TY, TZ, TX) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYZY() (TX, TB, TY, TZ, TY) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYZZ() (TX, TB, TY, TZ, TZ) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYZW() (TX, TB, TY, TZ, TW) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYZA() (TX, TB, TY, TZ, TA) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYZB() (TX, TB, TY, TZ, TB) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYWX() (TX, TB, TY, TW, TX) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYWY() (TX, TB, TY, TW, TY) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYWZ() (TX, TB, TY, TW, TZ) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYWW() (TX, TB, TY, TW, TW) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYWA() (TX, TB, TY, TW, TA) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYWB() (TX, TB, TY, TW, TB) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYAX() (TX, TB, TY, TA, TX) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYAY() (TX, TB, TY, TA, TY) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYAZ() (TX, TB, TY, TA, TZ) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYAW() (TX, TB, TY, TA, TW) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYAA() (TX, TB, TY, TA, TA) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYAB() (TX, TB, TY, TA, TB) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYBX() (TX, TB, TY, TB, TX) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYBY() (TX, TB, TY, TB, TY) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYBZ() (TX, TB, TY, TB, TZ) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYBW() (TX, TB, TY, TB, TW) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYBA() (TX, TB, TY, TB, TA) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBYBB() (TX, TB, TY, TB, TB) { return _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZXX() (TX, TB, TZ, TX, TX) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZXY() (TX, TB, TZ, TX, TY) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZXZ() (TX, TB, TZ, TX, TZ) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZXW() (TX, TB, TZ, TX, TW) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZXA() (TX, TB, TZ, TX, TA) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZXB() (TX, TB, TZ, TX, TB) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZYX() (TX, TB, TZ, TY, TX) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZYY() (TX, TB, TZ, TY, TY) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZYZ() (TX, TB, TZ, TY, TZ) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZYW() (TX, TB, TZ, TY, TW) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZYA() (TX, TB, TZ, TY, TA) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZYB() (TX, TB, TZ, TY, TB) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZZX() (TX, TB, TZ, TZ, TX) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZZY() (TX, TB, TZ, TZ, TY) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZZZ() (TX, TB, TZ, TZ, TZ) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZZW() (TX, TB, TZ, TZ, TW) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZZA() (TX, TB, TZ, TZ, TA) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZZB() (TX, TB, TZ, TZ, TB) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZWX() (TX, TB, TZ, TW, TX) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZWY() (TX, TB, TZ, TW, TY) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZWZ() (TX, TB, TZ, TW, TZ) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZWW() (TX, TB, TZ, TW, TW) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZWA() (TX, TB, TZ, TW, TA) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZWB() (TX, TB, TZ, TW, TB) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZAX() (TX, TB, TZ, TA, TX) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZAY() (TX, TB, TZ, TA, TY) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZAZ() (TX, TB, TZ, TA, TZ) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZAW() (TX, TB, TZ, TA, TW) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZAA() (TX, TB, TZ, TA, TA) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZAB() (TX, TB, TZ, TA, TB) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZBX() (TX, TB, TZ, TB, TX) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZBY() (TX, TB, TZ, TB, TY) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZBZ() (TX, TB, TZ, TB, TZ) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZBW() (TX, TB, TZ, TB, TW) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZBA() (TX, TB, TZ, TB, TA) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBZBB() (TX, TB, TZ, TB, TB) { return _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWXX() (TX, TB, TW, TX, TX) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWXY() (TX, TB, TW, TX, TY) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWXZ() (TX, TB, TW, TX, TZ) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWXW() (TX, TB, TW, TX, TW) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWXA() (TX, TB, TW, TX, TA) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWXB() (TX, TB, TW, TX, TB) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWYX() (TX, TB, TW, TY, TX) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWYY() (TX, TB, TW, TY, TY) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWYZ() (TX, TB, TW, TY, TZ) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWYW() (TX, TB, TW, TY, TW) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWYA() (TX, TB, TW, TY, TA) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWYB() (TX, TB, TW, TY, TB) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWZX() (TX, TB, TW, TZ, TX) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWZY() (TX, TB, TW, TZ, TY) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWZZ() (TX, TB, TW, TZ, TZ) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWZW() (TX, TB, TW, TZ, TW) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWZA() (TX, TB, TW, TZ, TA) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWZB() (TX, TB, TW, TZ, TB) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWWX() (TX, TB, TW, TW, TX) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWWY() (TX, TB, TW, TW, TY) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWWZ() (TX, TB, TW, TW, TZ) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWWW() (TX, TB, TW, TW, TW) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWWA() (TX, TB, TW, TW, TA) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWWB() (TX, TB, TW, TW, TB) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWAX() (TX, TB, TW, TA, TX) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWAY() (TX, TB, TW, TA, TY) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWAZ() (TX, TB, TW, TA, TZ) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWAW() (TX, TB, TW, TA, TW) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWAA() (TX, TB, TW, TA, TA) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWAB() (TX, TB, TW, TA, TB) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWBX() (TX, TB, TW, TB, TX) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWBY() (TX, TB, TW, TB, TY) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWBZ() (TX, TB, TW, TB, TZ) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWBW() (TX, TB, TW, TB, TW) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWBA() (TX, TB, TW, TB, TA) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBWBB() (TX, TB, TW, TB, TB) { return _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAXX() (TX, TB, TA, TX, TX) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAXY() (TX, TB, TA, TX, TY) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAXZ() (TX, TB, TA, TX, TZ) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAXW() (TX, TB, TA, TX, TW) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAXA() (TX, TB, TA, TX, TA) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAXB() (TX, TB, TA, TX, TB) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAYX() (TX, TB, TA, TY, TX) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAYY() (TX, TB, TA, TY, TY) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAYZ() (TX, TB, TA, TY, TZ) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAYW() (TX, TB, TA, TY, TW) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAYA() (TX, TB, TA, TY, TA) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAYB() (TX, TB, TA, TY, TB) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAZX() (TX, TB, TA, TZ, TX) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAZY() (TX, TB, TA, TZ, TY) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAZZ() (TX, TB, TA, TZ, TZ) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAZW() (TX, TB, TA, TZ, TW) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAZA() (TX, TB, TA, TZ, TA) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAZB() (TX, TB, TA, TZ, TB) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAWX() (TX, TB, TA, TW, TX) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAWY() (TX, TB, TA, TW, TY) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAWZ() (TX, TB, TA, TW, TZ) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAWW() (TX, TB, TA, TW, TW) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAWA() (TX, TB, TA, TW, TA) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAWB() (TX, TB, TA, TW, TB) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAAX() (TX, TB, TA, TA, TX) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAAY() (TX, TB, TA, TA, TY) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAAZ() (TX, TB, TA, TA, TZ) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAAW() (TX, TB, TA, TA, TW) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAAA() (TX, TB, TA, TA, TA) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBAAB() (TX, TB, TA, TA, TB) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBABX() (TX, TB, TA, TB, TX) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBABY() (TX, TB, TA, TB, TY) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBABZ() (TX, TB, TA, TB, TZ) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBABW() (TX, TB, TA, TB, TW) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBABA() (TX, TB, TA, TB, TA) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBABB() (TX, TB, TA, TB, TB) { return _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBXX() (TX, TB, TB, TX, TX) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBXY() (TX, TB, TB, TX, TY) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBXZ() (TX, TB, TB, TX, TZ) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBXW() (TX, TB, TB, TX, TW) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBXA() (TX, TB, TB, TX, TA) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBXB() (TX, TB, TB, TX, TB) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBYX() (TX, TB, TB, TY, TX) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBYY() (TX, TB, TB, TY, TY) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBYZ() (TX, TB, TB, TY, TZ) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBYW() (TX, TB, TB, TY, TW) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBYA() (TX, TB, TB, TY, TA) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBYB() (TX, TB, TB, TY, TB) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBZX() (TX, TB, TB, TZ, TX) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBZY() (TX, TB, TB, TZ, TY) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBZZ() (TX, TB, TB, TZ, TZ) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBZW() (TX, TB, TB, TZ, TW) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBZA() (TX, TB, TB, TZ, TA) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBZB() (TX, TB, TB, TZ, TB) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBWX() (TX, TB, TB, TW, TX) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBWY() (TX, TB, TB, TW, TY) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBWZ() (TX, TB, TB, TW, TZ) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBWW() (TX, TB, TB, TW, TW) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBWA() (TX, TB, TB, TW, TA) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBWB() (TX, TB, TB, TW, TB) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBAX() (TX, TB, TB, TA, TX) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBAY() (TX, TB, TB, TA, TY) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBAZ() (TX, TB, TB, TA, TZ) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBAW() (TX, TB, TB, TA, TW) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBAA() (TX, TB, TB, TA, TA) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBAB() (TX, TB, TB, TA, TB) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBBX() (TX, TB, TB, TB, TX) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBBY() (TX, TB, TB, TB, TY) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBBZ() (TX, TB, TB, TB, TZ) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBBW() (TX, TB, TB, TB, TW) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBBA() (TX, TB, TB, TB, TA) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) XBBBB() (TX, TB, TB, TB, TB) { return _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXXX() (TY, TX, TX, TX, TX) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXXY() (TY, TX, TX, TX, TY) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXXZ() (TY, TX, TX, TX, TZ) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXXW() (TY, TX, TX, TX, TW) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXXA() (TY, TX, TX, TX, TA) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXXB() (TY, TX, TX, TX, TB) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXYX() (TY, TX, TX, TY, TX) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXYY() (TY, TX, TX, TY, TY) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXYZ() (TY, TX, TX, TY, TZ) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXYW() (TY, TX, TX, TY, TW) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXYA() (TY, TX, TX, TY, TA) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXYB() (TY, TX, TX, TY, TB) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXZX() (TY, TX, TX, TZ, TX) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXZY() (TY, TX, TX, TZ, TY) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXZZ() (TY, TX, TX, TZ, TZ) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXZW() (TY, TX, TX, TZ, TW) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXZA() (TY, TX, TX, TZ, TA) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXZB() (TY, TX, TX, TZ, TB) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXWX() (TY, TX, TX, TW, TX) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXWY() (TY, TX, TX, TW, TY) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXWZ() (TY, TX, TX, TW, TZ) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXWW() (TY, TX, TX, TW, TW) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXWA() (TY, TX, TX, TW, TA) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXWB() (TY, TX, TX, TW, TB) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXAX() (TY, TX, TX, TA, TX) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXAY() (TY, TX, TX, TA, TY) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXAZ() (TY, TX, TX, TA, TZ) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXAW() (TY, TX, TX, TA, TW) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXAA() (TY, TX, TX, TA, TA) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXAB() (TY, TX, TX, TA, TB) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXBX() (TY, TX, TX, TB, TX) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXBY() (TY, TX, TX, TB, TY) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXBZ() (TY, TX, TX, TB, TZ) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXBW() (TY, TX, TX, TB, TW) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXBA() (TY, TX, TX, TB, TA) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXXBB() (TY, TX, TX, TB, TB) { return _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYXX() (TY, TX, TY, TX, TX) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYXY() (TY, TX, TY, TX, TY) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYXZ() (TY, TX, TY, TX, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYXW() (TY, TX, TY, TX, TW) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYXA() (TY, TX, TY, TX, TA) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYXB() (TY, TX, TY, TX, TB) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYYX() (TY, TX, TY, TY, TX) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYYY() (TY, TX, TY, TY, TY) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYYZ() (TY, TX, TY, TY, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYYW() (TY, TX, TY, TY, TW) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYYA() (TY, TX, TY, TY, TA) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYYB() (TY, TX, TY, TY, TB) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYZX() (TY, TX, TY, TZ, TX) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYZY() (TY, TX, TY, TZ, TY) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYZZ() (TY, TX, TY, TZ, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYZW() (TY, TX, TY, TZ, TW) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYZA() (TY, TX, TY, TZ, TA) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYZB() (TY, TX, TY, TZ, TB) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYWX() (TY, TX, TY, TW, TX) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYWY() (TY, TX, TY, TW, TY) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYWZ() (TY, TX, TY, TW, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYWW() (TY, TX, TY, TW, TW) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYWA() (TY, TX, TY, TW, TA) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYWB() (TY, TX, TY, TW, TB) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYAX() (TY, TX, TY, TA, TX) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYAY() (TY, TX, TY, TA, TY) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYAZ() (TY, TX, TY, TA, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYAW() (TY, TX, TY, TA, TW) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYAA() (TY, TX, TY, TA, TA) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYAB() (TY, TX, TY, TA, TB) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYBX() (TY, TX, TY, TB, TX) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYBY() (TY, TX, TY, TB, TY) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYBZ() (TY, TX, TY, TB, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYBW() (TY, TX, TY, TB, TW) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYBA() (TY, TX, TY, TB, TA) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXYBB() (TY, TX, TY, TB, TB) { return _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZXX() (TY, TX, TZ, TX, TX) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZXY() (TY, TX, TZ, TX, TY) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZXZ() (TY, TX, TZ, TX, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZXW() (TY, TX, TZ, TX, TW) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZXA() (TY, TX, TZ, TX, TA) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZXB() (TY, TX, TZ, TX, TB) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZYX() (TY, TX, TZ, TY, TX) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZYY() (TY, TX, TZ, TY, TY) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZYZ() (TY, TX, TZ, TY, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZYW() (TY, TX, TZ, TY, TW) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZYA() (TY, TX, TZ, TY, TA) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZYB() (TY, TX, TZ, TY, TB) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZZX() (TY, TX, TZ, TZ, TX) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZZY() (TY, TX, TZ, TZ, TY) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZZZ() (TY, TX, TZ, TZ, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZZW() (TY, TX, TZ, TZ, TW) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZZA() (TY, TX, TZ, TZ, TA) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZZB() (TY, TX, TZ, TZ, TB) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZWX() (TY, TX, TZ, TW, TX) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZWY() (TY, TX, TZ, TW, TY) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZWZ() (TY, TX, TZ, TW, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZWW() (TY, TX, TZ, TW, TW) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZWA() (TY, TX, TZ, TW, TA) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZWB() (TY, TX, TZ, TW, TB) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZAX() (TY, TX, TZ, TA, TX) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZAY() (TY, TX, TZ, TA, TY) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZAZ() (TY, TX, TZ, TA, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZAW() (TY, TX, TZ, TA, TW) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZAA() (TY, TX, TZ, TA, TA) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZAB() (TY, TX, TZ, TA, TB) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZBX() (TY, TX, TZ, TB, TX) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZBY() (TY, TX, TZ, TB, TY) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZBZ() (TY, TX, TZ, TB, TZ) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZBW() (TY, TX, TZ, TB, TW) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZBA() (TY, TX, TZ, TB, TA) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXZBB() (TY, TX, TZ, TB, TB) { return _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWXX() (TY, TX, TW, TX, TX) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWXY() (TY, TX, TW, TX, TY) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWXZ() (TY, TX, TW, TX, TZ) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWXW() (TY, TX, TW, TX, TW) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWXA() (TY, TX, TW, TX, TA) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWXB() (TY, TX, TW, TX, TB) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWYX() (TY, TX, TW, TY, TX) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWYY() (TY, TX, TW, TY, TY) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWYZ() (TY, TX, TW, TY, TZ) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWYW() (TY, TX, TW, TY, TW) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWYA() (TY, TX, TW, TY, TA) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWYB() (TY, TX, TW, TY, TB) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWZX() (TY, TX, TW, TZ, TX) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWZY() (TY, TX, TW, TZ, TY) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWZZ() (TY, TX, TW, TZ, TZ) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWZW() (TY, TX, TW, TZ, TW) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWZA() (TY, TX, TW, TZ, TA) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWZB() (TY, TX, TW, TZ, TB) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWWX() (TY, TX, TW, TW, TX) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWWY() (TY, TX, TW, TW, TY) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWWZ() (TY, TX, TW, TW, TZ) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWWW() (TY, TX, TW, TW, TW) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWWA() (TY, TX, TW, TW, TA) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWWB() (TY, TX, TW, TW, TB) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWAX() (TY, TX, TW, TA, TX) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWAY() (TY, TX, TW, TA, TY) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWAZ() (TY, TX, TW, TA, TZ) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWAW() (TY, TX, TW, TA, TW) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWAA() (TY, TX, TW, TA, TA) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWAB() (TY, TX, TW, TA, TB) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWBX() (TY, TX, TW, TB, TX) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWBY() (TY, TX, TW, TB, TY) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWBZ() (TY, TX, TW, TB, TZ) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWBW() (TY, TX, TW, TB, TW) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWBA() (TY, TX, TW, TB, TA) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXWBB() (TY, TX, TW, TB, TB) { return _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAXX() (TY, TX, TA, TX, TX) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAXY() (TY, TX, TA, TX, TY) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAXZ() (TY, TX, TA, TX, TZ) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAXW() (TY, TX, TA, TX, TW) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAXA() (TY, TX, TA, TX, TA) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAXB() (TY, TX, TA, TX, TB) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAYX() (TY, TX, TA, TY, TX) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAYY() (TY, TX, TA, TY, TY) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAYZ() (TY, TX, TA, TY, TZ) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAYW() (TY, TX, TA, TY, TW) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAYA() (TY, TX, TA, TY, TA) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAYB() (TY, TX, TA, TY, TB) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAZX() (TY, TX, TA, TZ, TX) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAZY() (TY, TX, TA, TZ, TY) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAZZ() (TY, TX, TA, TZ, TZ) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAZW() (TY, TX, TA, TZ, TW) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAZA() (TY, TX, TA, TZ, TA) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAZB() (TY, TX, TA, TZ, TB) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAWX() (TY, TX, TA, TW, TX) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAWY() (TY, TX, TA, TW, TY) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAWZ() (TY, TX, TA, TW, TZ) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAWW() (TY, TX, TA, TW, TW) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAWA() (TY, TX, TA, TW, TA) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAWB() (TY, TX, TA, TW, TB) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAAX() (TY, TX, TA, TA, TX) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAAY() (TY, TX, TA, TA, TY) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAAZ() (TY, TX, TA, TA, TZ) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAAW() (TY, TX, TA, TA, TW) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAAA() (TY, TX, TA, TA, TA) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXAAB() (TY, TX, TA, TA, TB) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXABX() (TY, TX, TA, TB, TX) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXABY() (TY, TX, TA, TB, TY) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXABZ() (TY, TX, TA, TB, TZ) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXABW() (TY, TX, TA, TB, TW) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXABA() (TY, TX, TA, TB, TA) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXABB() (TY, TX, TA, TB, TB) { return _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBXX() (TY, TX, TB, TX, TX) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBXY() (TY, TX, TB, TX, TY) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBXZ() (TY, TX, TB, TX, TZ) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBXW() (TY, TX, TB, TX, TW) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBXA() (TY, TX, TB, TX, TA) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBXB() (TY, TX, TB, TX, TB) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBYX() (TY, TX, TB, TY, TX) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBYY() (TY, TX, TB, TY, TY) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBYZ() (TY, TX, TB, TY, TZ) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBYW() (TY, TX, TB, TY, TW) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBYA() (TY, TX, TB, TY, TA) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBYB() (TY, TX, TB, TY, TB) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBZX() (TY, TX, TB, TZ, TX) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBZY() (TY, TX, TB, TZ, TY) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBZZ() (TY, TX, TB, TZ, TZ) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBZW() (TY, TX, TB, TZ, TW) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBZA() (TY, TX, TB, TZ, TA) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBZB() (TY, TX, TB, TZ, TB) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBWX() (TY, TX, TB, TW, TX) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBWY() (TY, TX, TB, TW, TY) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBWZ() (TY, TX, TB, TW, TZ) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBWW() (TY, TX, TB, TW, TW) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBWA() (TY, TX, TB, TW, TA) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBWB() (TY, TX, TB, TW, TB) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBAX() (TY, TX, TB, TA, TX) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBAY() (TY, TX, TB, TA, TY) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBAZ() (TY, TX, TB, TA, TZ) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBAW() (TY, TX, TB, TA, TW) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBAA() (TY, TX, TB, TA, TA) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBAB() (TY, TX, TB, TA, TB) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBBX() (TY, TX, TB, TB, TX) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBBY() (TY, TX, TB, TB, TY) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBBZ() (TY, TX, TB, TB, TZ) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBBW() (TY, TX, TB, TB, TW) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBBA() (TY, TX, TB, TB, TA) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YXBBB() (TY, TX, TB, TB, TB) { return _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXXX() (TY, TY, TX, TX, TX) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXXY() (TY, TY, TX, TX, TY) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXXZ() (TY, TY, TX, TX, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXXW() (TY, TY, TX, TX, TW) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXXA() (TY, TY, TX, TX, TA) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXXB() (TY, TY, TX, TX, TB) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXYX() (TY, TY, TX, TY, TX) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXYY() (TY, TY, TX, TY, TY) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXYZ() (TY, TY, TX, TY, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXYW() (TY, TY, TX, TY, TW) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXYA() (TY, TY, TX, TY, TA) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXYB() (TY, TY, TX, TY, TB) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXZX() (TY, TY, TX, TZ, TX) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXZY() (TY, TY, TX, TZ, TY) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXZZ() (TY, TY, TX, TZ, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXZW() (TY, TY, TX, TZ, TW) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXZA() (TY, TY, TX, TZ, TA) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXZB() (TY, TY, TX, TZ, TB) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXWX() (TY, TY, TX, TW, TX) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXWY() (TY, TY, TX, TW, TY) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXWZ() (TY, TY, TX, TW, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXWW() (TY, TY, TX, TW, TW) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXWA() (TY, TY, TX, TW, TA) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXWB() (TY, TY, TX, TW, TB) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXAX() (TY, TY, TX, TA, TX) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXAY() (TY, TY, TX, TA, TY) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXAZ() (TY, TY, TX, TA, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXAW() (TY, TY, TX, TA, TW) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXAA() (TY, TY, TX, TA, TA) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXAB() (TY, TY, TX, TA, TB) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXBX() (TY, TY, TX, TB, TX) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXBY() (TY, TY, TX, TB, TY) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXBZ() (TY, TY, TX, TB, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXBW() (TY, TY, TX, TB, TW) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXBA() (TY, TY, TX, TB, TA) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYXBB() (TY, TY, TX, TB, TB) { return _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYXX() (TY, TY, TY, TX, TX) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYXY() (TY, TY, TY, TX, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYXZ() (TY, TY, TY, TX, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYXW() (TY, TY, TY, TX, TW) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYXA() (TY, TY, TY, TX, TA) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYXB() (TY, TY, TY, TX, TB) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYYX() (TY, TY, TY, TY, TX) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYYY() (TY, TY, TY, TY, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYYZ() (TY, TY, TY, TY, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYYW() (TY, TY, TY, TY, TW) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYYA() (TY, TY, TY, TY, TA) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYYB() (TY, TY, TY, TY, TB) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYZX() (TY, TY, TY, TZ, TX) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYZY() (TY, TY, TY, TZ, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYZZ() (TY, TY, TY, TZ, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYZW() (TY, TY, TY, TZ, TW) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYZA() (TY, TY, TY, TZ, TA) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYZB() (TY, TY, TY, TZ, TB) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYWX() (TY, TY, TY, TW, TX) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYWY() (TY, TY, TY, TW, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYWZ() (TY, TY, TY, TW, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYWW() (TY, TY, TY, TW, TW) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYWA() (TY, TY, TY, TW, TA) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYWB() (TY, TY, TY, TW, TB) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYAX() (TY, TY, TY, TA, TX) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYAY() (TY, TY, TY, TA, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYAZ() (TY, TY, TY, TA, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYAW() (TY, TY, TY, TA, TW) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYAA() (TY, TY, TY, TA, TA) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYAB() (TY, TY, TY, TA, TB) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYBX() (TY, TY, TY, TB, TX) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYBY() (TY, TY, TY, TB, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYBZ() (TY, TY, TY, TB, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYBW() (TY, TY, TY, TB, TW) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYBA() (TY, TY, TY, TB, TA) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYYBB() (TY, TY, TY, TB, TB) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZXX() (TY, TY, TZ, TX, TX) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZXY() (TY, TY, TZ, TX, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZXZ() (TY, TY, TZ, TX, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZXW() (TY, TY, TZ, TX, TW) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZXA() (TY, TY, TZ, TX, TA) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZXB() (TY, TY, TZ, TX, TB) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZYX() (TY, TY, TZ, TY, TX) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZYY() (TY, TY, TZ, TY, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZYZ() (TY, TY, TZ, TY, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZYW() (TY, TY, TZ, TY, TW) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZYA() (TY, TY, TZ, TY, TA) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZYB() (TY, TY, TZ, TY, TB) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZZX() (TY, TY, TZ, TZ, TX) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZZY() (TY, TY, TZ, TZ, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZZZ() (TY, TY, TZ, TZ, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZZW() (TY, TY, TZ, TZ, TW) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZZA() (TY, TY, TZ, TZ, TA) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZZB() (TY, TY, TZ, TZ, TB) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZWX() (TY, TY, TZ, TW, TX) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZWY() (TY, TY, TZ, TW, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZWZ() (TY, TY, TZ, TW, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZWW() (TY, TY, TZ, TW, TW) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZWA() (TY, TY, TZ, TW, TA) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZWB() (TY, TY, TZ, TW, TB) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZAX() (TY, TY, TZ, TA, TX) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZAY() (TY, TY, TZ, TA, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZAZ() (TY, TY, TZ, TA, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZAW() (TY, TY, TZ, TA, TW) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZAA() (TY, TY, TZ, TA, TA) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZAB() (TY, TY, TZ, TA, TB) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZBX() (TY, TY, TZ, TB, TX) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZBY() (TY, TY, TZ, TB, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZBZ() (TY, TY, TZ, TB, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZBW() (TY, TY, TZ, TB, TW) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZBA() (TY, TY, TZ, TB, TA) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYZBB() (TY, TY, TZ, TB, TB) { return _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWXX() (TY, TY, TW, TX, TX) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWXY() (TY, TY, TW, TX, TY) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWXZ() (TY, TY, TW, TX, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWXW() (TY, TY, TW, TX, TW) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWXA() (TY, TY, TW, TX, TA) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWXB() (TY, TY, TW, TX, TB) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWYX() (TY, TY, TW, TY, TX) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWYY() (TY, TY, TW, TY, TY) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWYZ() (TY, TY, TW, TY, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWYW() (TY, TY, TW, TY, TW) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWYA() (TY, TY, TW, TY, TA) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWYB() (TY, TY, TW, TY, TB) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWZX() (TY, TY, TW, TZ, TX) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWZY() (TY, TY, TW, TZ, TY) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWZZ() (TY, TY, TW, TZ, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWZW() (TY, TY, TW, TZ, TW) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWZA() (TY, TY, TW, TZ, TA) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWZB() (TY, TY, TW, TZ, TB) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWWX() (TY, TY, TW, TW, TX) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWWY() (TY, TY, TW, TW, TY) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWWZ() (TY, TY, TW, TW, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWWW() (TY, TY, TW, TW, TW) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWWA() (TY, TY, TW, TW, TA) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWWB() (TY, TY, TW, TW, TB) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWAX() (TY, TY, TW, TA, TX) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWAY() (TY, TY, TW, TA, TY) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWAZ() (TY, TY, TW, TA, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWAW() (TY, TY, TW, TA, TW) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWAA() (TY, TY, TW, TA, TA) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWAB() (TY, TY, TW, TA, TB) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWBX() (TY, TY, TW, TB, TX) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWBY() (TY, TY, TW, TB, TY) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWBZ() (TY, TY, TW, TB, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWBW() (TY, TY, TW, TB, TW) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWBA() (TY, TY, TW, TB, TA) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYWBB() (TY, TY, TW, TB, TB) { return _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAXX() (TY, TY, TA, TX, TX) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAXY() (TY, TY, TA, TX, TY) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAXZ() (TY, TY, TA, TX, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAXW() (TY, TY, TA, TX, TW) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAXA() (TY, TY, TA, TX, TA) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAXB() (TY, TY, TA, TX, TB) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAYX() (TY, TY, TA, TY, TX) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAYY() (TY, TY, TA, TY, TY) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAYZ() (TY, TY, TA, TY, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAYW() (TY, TY, TA, TY, TW) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAYA() (TY, TY, TA, TY, TA) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAYB() (TY, TY, TA, TY, TB) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAZX() (TY, TY, TA, TZ, TX) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAZY() (TY, TY, TA, TZ, TY) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAZZ() (TY, TY, TA, TZ, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAZW() (TY, TY, TA, TZ, TW) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAZA() (TY, TY, TA, TZ, TA) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAZB() (TY, TY, TA, TZ, TB) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAWX() (TY, TY, TA, TW, TX) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAWY() (TY, TY, TA, TW, TY) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAWZ() (TY, TY, TA, TW, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAWW() (TY, TY, TA, TW, TW) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAWA() (TY, TY, TA, TW, TA) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAWB() (TY, TY, TA, TW, TB) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAAX() (TY, TY, TA, TA, TX) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAAY() (TY, TY, TA, TA, TY) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAAZ() (TY, TY, TA, TA, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAAW() (TY, TY, TA, TA, TW) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAAA() (TY, TY, TA, TA, TA) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYAAB() (TY, TY, TA, TA, TB) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYABX() (TY, TY, TA, TB, TX) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYABY() (TY, TY, TA, TB, TY) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYABZ() (TY, TY, TA, TB, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYABW() (TY, TY, TA, TB, TW) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYABA() (TY, TY, TA, TB, TA) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYABB() (TY, TY, TA, TB, TB) { return _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBXX() (TY, TY, TB, TX, TX) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBXY() (TY, TY, TB, TX, TY) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBXZ() (TY, TY, TB, TX, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBXW() (TY, TY, TB, TX, TW) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBXA() (TY, TY, TB, TX, TA) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBXB() (TY, TY, TB, TX, TB) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBYX() (TY, TY, TB, TY, TX) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBYY() (TY, TY, TB, TY, TY) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBYZ() (TY, TY, TB, TY, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBYW() (TY, TY, TB, TY, TW) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBYA() (TY, TY, TB, TY, TA) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBYB() (TY, TY, TB, TY, TB) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBZX() (TY, TY, TB, TZ, TX) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBZY() (TY, TY, TB, TZ, TY) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBZZ() (TY, TY, TB, TZ, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBZW() (TY, TY, TB, TZ, TW) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBZA() (TY, TY, TB, TZ, TA) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBZB() (TY, TY, TB, TZ, TB) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBWX() (TY, TY, TB, TW, TX) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBWY() (TY, TY, TB, TW, TY) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBWZ() (TY, TY, TB, TW, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBWW() (TY, TY, TB, TW, TW) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBWA() (TY, TY, TB, TW, TA) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBWB() (TY, TY, TB, TW, TB) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBAX() (TY, TY, TB, TA, TX) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBAY() (TY, TY, TB, TA, TY) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBAZ() (TY, TY, TB, TA, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBAW() (TY, TY, TB, TA, TW) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBAA() (TY, TY, TB, TA, TA) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBAB() (TY, TY, TB, TA, TB) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBBX() (TY, TY, TB, TB, TX) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBBY() (TY, TY, TB, TB, TY) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBBZ() (TY, TY, TB, TB, TZ) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBBW() (TY, TY, TB, TB, TW) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBBA() (TY, TY, TB, TB, TA) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YYBBB() (TY, TY, TB, TB, TB) { return _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXXX() (TY, TZ, TX, TX, TX) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXXY() (TY, TZ, TX, TX, TY) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXXZ() (TY, TZ, TX, TX, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXXW() (TY, TZ, TX, TX, TW) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXXA() (TY, TZ, TX, TX, TA) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXXB() (TY, TZ, TX, TX, TB) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXYX() (TY, TZ, TX, TY, TX) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXYY() (TY, TZ, TX, TY, TY) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXYZ() (TY, TZ, TX, TY, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXYW() (TY, TZ, TX, TY, TW) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXYA() (TY, TZ, TX, TY, TA) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXYB() (TY, TZ, TX, TY, TB) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXZX() (TY, TZ, TX, TZ, TX) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXZY() (TY, TZ, TX, TZ, TY) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXZZ() (TY, TZ, TX, TZ, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXZW() (TY, TZ, TX, TZ, TW) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXZA() (TY, TZ, TX, TZ, TA) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXZB() (TY, TZ, TX, TZ, TB) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXWX() (TY, TZ, TX, TW, TX) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXWY() (TY, TZ, TX, TW, TY) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXWZ() (TY, TZ, TX, TW, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXWW() (TY, TZ, TX, TW, TW) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXWA() (TY, TZ, TX, TW, TA) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXWB() (TY, TZ, TX, TW, TB) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXAX() (TY, TZ, TX, TA, TX) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXAY() (TY, TZ, TX, TA, TY) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXAZ() (TY, TZ, TX, TA, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXAW() (TY, TZ, TX, TA, TW) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXAA() (TY, TZ, TX, TA, TA) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXAB() (TY, TZ, TX, TA, TB) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXBX() (TY, TZ, TX, TB, TX) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXBY() (TY, TZ, TX, TB, TY) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXBZ() (TY, TZ, TX, TB, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXBW() (TY, TZ, TX, TB, TW) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXBA() (TY, TZ, TX, TB, TA) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZXBB() (TY, TZ, TX, TB, TB) { return _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYXX() (TY, TZ, TY, TX, TX) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYXY() (TY, TZ, TY, TX, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYXZ() (TY, TZ, TY, TX, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYXW() (TY, TZ, TY, TX, TW) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYXA() (TY, TZ, TY, TX, TA) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYXB() (TY, TZ, TY, TX, TB) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYYX() (TY, TZ, TY, TY, TX) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYYY() (TY, TZ, TY, TY, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYYZ() (TY, TZ, TY, TY, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYYW() (TY, TZ, TY, TY, TW) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYYA() (TY, TZ, TY, TY, TA) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYYB() (TY, TZ, TY, TY, TB) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYZX() (TY, TZ, TY, TZ, TX) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYZY() (TY, TZ, TY, TZ, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYZZ() (TY, TZ, TY, TZ, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYZW() (TY, TZ, TY, TZ, TW) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYZA() (TY, TZ, TY, TZ, TA) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYZB() (TY, TZ, TY, TZ, TB) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYWX() (TY, TZ, TY, TW, TX) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYWY() (TY, TZ, TY, TW, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYWZ() (TY, TZ, TY, TW, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYWW() (TY, TZ, TY, TW, TW) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYWA() (TY, TZ, TY, TW, TA) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYWB() (TY, TZ, TY, TW, TB) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYAX() (TY, TZ, TY, TA, TX) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYAY() (TY, TZ, TY, TA, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYAZ() (TY, TZ, TY, TA, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYAW() (TY, TZ, TY, TA, TW) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYAA() (TY, TZ, TY, TA, TA) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYAB() (TY, TZ, TY, TA, TB) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYBX() (TY, TZ, TY, TB, TX) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYBY() (TY, TZ, TY, TB, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYBZ() (TY, TZ, TY, TB, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYBW() (TY, TZ, TY, TB, TW) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYBA() (TY, TZ, TY, TB, TA) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZYBB() (TY, TZ, TY, TB, TB) { return _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZXX() (TY, TZ, TZ, TX, TX) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZXY() (TY, TZ, TZ, TX, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZXZ() (TY, TZ, TZ, TX, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZXW() (TY, TZ, TZ, TX, TW) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZXA() (TY, TZ, TZ, TX, TA) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZXB() (TY, TZ, TZ, TX, TB) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZYX() (TY, TZ, TZ, TY, TX) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZYY() (TY, TZ, TZ, TY, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZYZ() (TY, TZ, TZ, TY, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZYW() (TY, TZ, TZ, TY, TW) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZYA() (TY, TZ, TZ, TY, TA) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZYB() (TY, TZ, TZ, TY, TB) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZZX() (TY, TZ, TZ, TZ, TX) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZZY() (TY, TZ, TZ, TZ, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZZZ() (TY, TZ, TZ, TZ, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZZW() (TY, TZ, TZ, TZ, TW) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZZA() (TY, TZ, TZ, TZ, TA) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZZB() (TY, TZ, TZ, TZ, TB) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZWX() (TY, TZ, TZ, TW, TX) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZWY() (TY, TZ, TZ, TW, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZWZ() (TY, TZ, TZ, TW, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZWW() (TY, TZ, TZ, TW, TW) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZWA() (TY, TZ, TZ, TW, TA) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZWB() (TY, TZ, TZ, TW, TB) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZAX() (TY, TZ, TZ, TA, TX) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZAY() (TY, TZ, TZ, TA, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZAZ() (TY, TZ, TZ, TA, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZAW() (TY, TZ, TZ, TA, TW) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZAA() (TY, TZ, TZ, TA, TA) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZAB() (TY, TZ, TZ, TA, TB) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZBX() (TY, TZ, TZ, TB, TX) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZBY() (TY, TZ, TZ, TB, TY) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZBZ() (TY, TZ, TZ, TB, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZBW() (TY, TZ, TZ, TB, TW) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZBA() (TY, TZ, TZ, TB, TA) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZZBB() (TY, TZ, TZ, TB, TB) { return _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWXX() (TY, TZ, TW, TX, TX) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWXY() (TY, TZ, TW, TX, TY) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWXZ() (TY, TZ, TW, TX, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWXW() (TY, TZ, TW, TX, TW) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWXA() (TY, TZ, TW, TX, TA) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWXB() (TY, TZ, TW, TX, TB) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWYX() (TY, TZ, TW, TY, TX) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWYY() (TY, TZ, TW, TY, TY) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWYZ() (TY, TZ, TW, TY, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWYW() (TY, TZ, TW, TY, TW) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWYA() (TY, TZ, TW, TY, TA) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWYB() (TY, TZ, TW, TY, TB) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWZX() (TY, TZ, TW, TZ, TX) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWZY() (TY, TZ, TW, TZ, TY) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWZZ() (TY, TZ, TW, TZ, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWZW() (TY, TZ, TW, TZ, TW) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWZA() (TY, TZ, TW, TZ, TA) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWZB() (TY, TZ, TW, TZ, TB) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWWX() (TY, TZ, TW, TW, TX) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWWY() (TY, TZ, TW, TW, TY) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWWZ() (TY, TZ, TW, TW, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWWW() (TY, TZ, TW, TW, TW) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWWA() (TY, TZ, TW, TW, TA) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWWB() (TY, TZ, TW, TW, TB) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWAX() (TY, TZ, TW, TA, TX) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWAY() (TY, TZ, TW, TA, TY) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWAZ() (TY, TZ, TW, TA, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWAW() (TY, TZ, TW, TA, TW) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWAA() (TY, TZ, TW, TA, TA) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWAB() (TY, TZ, TW, TA, TB) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWBX() (TY, TZ, TW, TB, TX) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWBY() (TY, TZ, TW, TB, TY) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWBZ() (TY, TZ, TW, TB, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWBW() (TY, TZ, TW, TB, TW) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWBA() (TY, TZ, TW, TB, TA) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZWBB() (TY, TZ, TW, TB, TB) { return _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAXX() (TY, TZ, TA, TX, TX) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAXY() (TY, TZ, TA, TX, TY) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAXZ() (TY, TZ, TA, TX, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAXW() (TY, TZ, TA, TX, TW) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAXA() (TY, TZ, TA, TX, TA) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAXB() (TY, TZ, TA, TX, TB) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAYX() (TY, TZ, TA, TY, TX) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAYY() (TY, TZ, TA, TY, TY) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAYZ() (TY, TZ, TA, TY, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAYW() (TY, TZ, TA, TY, TW) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAYA() (TY, TZ, TA, TY, TA) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAYB() (TY, TZ, TA, TY, TB) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAZX() (TY, TZ, TA, TZ, TX) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAZY() (TY, TZ, TA, TZ, TY) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAZZ() (TY, TZ, TA, TZ, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAZW() (TY, TZ, TA, TZ, TW) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAZA() (TY, TZ, TA, TZ, TA) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAZB() (TY, TZ, TA, TZ, TB) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAWX() (TY, TZ, TA, TW, TX) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAWY() (TY, TZ, TA, TW, TY) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAWZ() (TY, TZ, TA, TW, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAWW() (TY, TZ, TA, TW, TW) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAWA() (TY, TZ, TA, TW, TA) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAWB() (TY, TZ, TA, TW, TB) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAAX() (TY, TZ, TA, TA, TX) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAAY() (TY, TZ, TA, TA, TY) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAAZ() (TY, TZ, TA, TA, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAAW() (TY, TZ, TA, TA, TW) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAAA() (TY, TZ, TA, TA, TA) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZAAB() (TY, TZ, TA, TA, TB) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZABX() (TY, TZ, TA, TB, TX) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZABY() (TY, TZ, TA, TB, TY) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZABZ() (TY, TZ, TA, TB, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZABW() (TY, TZ, TA, TB, TW) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZABA() (TY, TZ, TA, TB, TA) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZABB() (TY, TZ, TA, TB, TB) { return _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBXX() (TY, TZ, TB, TX, TX) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBXY() (TY, TZ, TB, TX, TY) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBXZ() (TY, TZ, TB, TX, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBXW() (TY, TZ, TB, TX, TW) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBXA() (TY, TZ, TB, TX, TA) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBXB() (TY, TZ, TB, TX, TB) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBYX() (TY, TZ, TB, TY, TX) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBYY() (TY, TZ, TB, TY, TY) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBYZ() (TY, TZ, TB, TY, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBYW() (TY, TZ, TB, TY, TW) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBYA() (TY, TZ, TB, TY, TA) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBYB() (TY, TZ, TB, TY, TB) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBZX() (TY, TZ, TB, TZ, TX) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBZY() (TY, TZ, TB, TZ, TY) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBZZ() (TY, TZ, TB, TZ, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBZW() (TY, TZ, TB, TZ, TW) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBZA() (TY, TZ, TB, TZ, TA) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBZB() (TY, TZ, TB, TZ, TB) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBWX() (TY, TZ, TB, TW, TX) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBWY() (TY, TZ, TB, TW, TY) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBWZ() (TY, TZ, TB, TW, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBWW() (TY, TZ, TB, TW, TW) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBWA() (TY, TZ, TB, TW, TA) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBWB() (TY, TZ, TB, TW, TB) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBAX() (TY, TZ, TB, TA, TX) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBAY() (TY, TZ, TB, TA, TY) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBAZ() (TY, TZ, TB, TA, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBAW() (TY, TZ, TB, TA, TW) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBAA() (TY, TZ, TB, TA, TA) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBAB() (TY, TZ, TB, TA, TB) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBBX() (TY, TZ, TB, TB, TX) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBBY() (TY, TZ, TB, TB, TY) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBBZ() (TY, TZ, TB, TB, TZ) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBBW() (TY, TZ, TB, TB, TW) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBBA() (TY, TZ, TB, TB, TA) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YZBBB() (TY, TZ, TB, TB, TB) { return _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXXX() (TY, TW, TX, TX, TX) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXXY() (TY, TW, TX, TX, TY) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXXZ() (TY, TW, TX, TX, TZ) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXXW() (TY, TW, TX, TX, TW) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXXA() (TY, TW, TX, TX, TA) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXXB() (TY, TW, TX, TX, TB) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXYX() (TY, TW, TX, TY, TX) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXYY() (TY, TW, TX, TY, TY) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXYZ() (TY, TW, TX, TY, TZ) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXYW() (TY, TW, TX, TY, TW) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXYA() (TY, TW, TX, TY, TA) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXYB() (TY, TW, TX, TY, TB) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXZX() (TY, TW, TX, TZ, TX) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXZY() (TY, TW, TX, TZ, TY) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXZZ() (TY, TW, TX, TZ, TZ) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXZW() (TY, TW, TX, TZ, TW) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXZA() (TY, TW, TX, TZ, TA) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXZB() (TY, TW, TX, TZ, TB) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXWX() (TY, TW, TX, TW, TX) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXWY() (TY, TW, TX, TW, TY) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXWZ() (TY, TW, TX, TW, TZ) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXWW() (TY, TW, TX, TW, TW) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXWA() (TY, TW, TX, TW, TA) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXWB() (TY, TW, TX, TW, TB) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXAX() (TY, TW, TX, TA, TX) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXAY() (TY, TW, TX, TA, TY) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXAZ() (TY, TW, TX, TA, TZ) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXAW() (TY, TW, TX, TA, TW) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXAA() (TY, TW, TX, TA, TA) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXAB() (TY, TW, TX, TA, TB) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXBX() (TY, TW, TX, TB, TX) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXBY() (TY, TW, TX, TB, TY) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXBZ() (TY, TW, TX, TB, TZ) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXBW() (TY, TW, TX, TB, TW) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXBA() (TY, TW, TX, TB, TA) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWXBB() (TY, TW, TX, TB, TB) { return _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYXX() (TY, TW, TY, TX, TX) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYXY() (TY, TW, TY, TX, TY) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYXZ() (TY, TW, TY, TX, TZ) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYXW() (TY, TW, TY, TX, TW) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYXA() (TY, TW, TY, TX, TA) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYXB() (TY, TW, TY, TX, TB) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYYX() (TY, TW, TY, TY, TX) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYYY() (TY, TW, TY, TY, TY) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYYZ() (TY, TW, TY, TY, TZ) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYYW() (TY, TW, TY, TY, TW) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYYA() (TY, TW, TY, TY, TA) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYYB() (TY, TW, TY, TY, TB) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYZX() (TY, TW, TY, TZ, TX) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYZY() (TY, TW, TY, TZ, TY) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYZZ() (TY, TW, TY, TZ, TZ) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYZW() (TY, TW, TY, TZ, TW) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYZA() (TY, TW, TY, TZ, TA) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYZB() (TY, TW, TY, TZ, TB) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYWX() (TY, TW, TY, TW, TX) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYWY() (TY, TW, TY, TW, TY) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYWZ() (TY, TW, TY, TW, TZ) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYWW() (TY, TW, TY, TW, TW) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYWA() (TY, TW, TY, TW, TA) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYWB() (TY, TW, TY, TW, TB) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYAX() (TY, TW, TY, TA, TX) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYAY() (TY, TW, TY, TA, TY) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYAZ() (TY, TW, TY, TA, TZ) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYAW() (TY, TW, TY, TA, TW) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYAA() (TY, TW, TY, TA, TA) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYAB() (TY, TW, TY, TA, TB) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYBX() (TY, TW, TY, TB, TX) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYBY() (TY, TW, TY, TB, TY) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYBZ() (TY, TW, TY, TB, TZ) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYBW() (TY, TW, TY, TB, TW) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYBA() (TY, TW, TY, TB, TA) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWYBB() (TY, TW, TY, TB, TB) { return _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZXX() (TY, TW, TZ, TX, TX) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZXY() (TY, TW, TZ, TX, TY) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZXZ() (TY, TW, TZ, TX, TZ) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZXW() (TY, TW, TZ, TX, TW) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZXA() (TY, TW, TZ, TX, TA) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZXB() (TY, TW, TZ, TX, TB) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZYX() (TY, TW, TZ, TY, TX) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZYY() (TY, TW, TZ, TY, TY) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZYZ() (TY, TW, TZ, TY, TZ) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZYW() (TY, TW, TZ, TY, TW) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZYA() (TY, TW, TZ, TY, TA) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZYB() (TY, TW, TZ, TY, TB) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZZX() (TY, TW, TZ, TZ, TX) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZZY() (TY, TW, TZ, TZ, TY) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZZZ() (TY, TW, TZ, TZ, TZ) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZZW() (TY, TW, TZ, TZ, TW) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZZA() (TY, TW, TZ, TZ, TA) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZZB() (TY, TW, TZ, TZ, TB) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZWX() (TY, TW, TZ, TW, TX) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZWY() (TY, TW, TZ, TW, TY) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZWZ() (TY, TW, TZ, TW, TZ) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZWW() (TY, TW, TZ, TW, TW) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZWA() (TY, TW, TZ, TW, TA) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZWB() (TY, TW, TZ, TW, TB) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZAX() (TY, TW, TZ, TA, TX) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZAY() (TY, TW, TZ, TA, TY) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZAZ() (TY, TW, TZ, TA, TZ) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZAW() (TY, TW, TZ, TA, TW) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZAA() (TY, TW, TZ, TA, TA) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZAB() (TY, TW, TZ, TA, TB) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZBX() (TY, TW, TZ, TB, TX) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZBY() (TY, TW, TZ, TB, TY) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZBZ() (TY, TW, TZ, TB, TZ) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZBW() (TY, TW, TZ, TB, TW) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZBA() (TY, TW, TZ, TB, TA) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWZBB() (TY, TW, TZ, TB, TB) { return _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWXX() (TY, TW, TW, TX, TX) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWXY() (TY, TW, TW, TX, TY) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWXZ() (TY, TW, TW, TX, TZ) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWXW() (TY, TW, TW, TX, TW) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWXA() (TY, TW, TW, TX, TA) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWXB() (TY, TW, TW, TX, TB) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWYX() (TY, TW, TW, TY, TX) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWYY() (TY, TW, TW, TY, TY) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWYZ() (TY, TW, TW, TY, TZ) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWYW() (TY, TW, TW, TY, TW) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWYA() (TY, TW, TW, TY, TA) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWYB() (TY, TW, TW, TY, TB) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWZX() (TY, TW, TW, TZ, TX) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWZY() (TY, TW, TW, TZ, TY) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWZZ() (TY, TW, TW, TZ, TZ) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWZW() (TY, TW, TW, TZ, TW) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWZA() (TY, TW, TW, TZ, TA) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWZB() (TY, TW, TW, TZ, TB) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWWX() (TY, TW, TW, TW, TX) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWWY() (TY, TW, TW, TW, TY) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWWZ() (TY, TW, TW, TW, TZ) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWWW() (TY, TW, TW, TW, TW) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWWA() (TY, TW, TW, TW, TA) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWWB() (TY, TW, TW, TW, TB) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWAX() (TY, TW, TW, TA, TX) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWAY() (TY, TW, TW, TA, TY) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWAZ() (TY, TW, TW, TA, TZ) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWAW() (TY, TW, TW, TA, TW) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWAA() (TY, TW, TW, TA, TA) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWAB() (TY, TW, TW, TA, TB) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWBX() (TY, TW, TW, TB, TX) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWBY() (TY, TW, TW, TB, TY) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWBZ() (TY, TW, TW, TB, TZ) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWBW() (TY, TW, TW, TB, TW) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWBA() (TY, TW, TW, TB, TA) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWWBB() (TY, TW, TW, TB, TB) { return _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAXX() (TY, TW, TA, TX, TX) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAXY() (TY, TW, TA, TX, TY) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAXZ() (TY, TW, TA, TX, TZ) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAXW() (TY, TW, TA, TX, TW) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAXA() (TY, TW, TA, TX, TA) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAXB() (TY, TW, TA, TX, TB) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAYX() (TY, TW, TA, TY, TX) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAYY() (TY, TW, TA, TY, TY) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAYZ() (TY, TW, TA, TY, TZ) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAYW() (TY, TW, TA, TY, TW) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAYA() (TY, TW, TA, TY, TA) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAYB() (TY, TW, TA, TY, TB) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAZX() (TY, TW, TA, TZ, TX) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAZY() (TY, TW, TA, TZ, TY) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAZZ() (TY, TW, TA, TZ, TZ) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAZW() (TY, TW, TA, TZ, TW) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAZA() (TY, TW, TA, TZ, TA) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAZB() (TY, TW, TA, TZ, TB) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAWX() (TY, TW, TA, TW, TX) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAWY() (TY, TW, TA, TW, TY) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAWZ() (TY, TW, TA, TW, TZ) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAWW() (TY, TW, TA, TW, TW) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAWA() (TY, TW, TA, TW, TA) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAWB() (TY, TW, TA, TW, TB) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAAX() (TY, TW, TA, TA, TX) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAAY() (TY, TW, TA, TA, TY) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAAZ() (TY, TW, TA, TA, TZ) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAAW() (TY, TW, TA, TA, TW) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAAA() (TY, TW, TA, TA, TA) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWAAB() (TY, TW, TA, TA, TB) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWABX() (TY, TW, TA, TB, TX) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWABY() (TY, TW, TA, TB, TY) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWABZ() (TY, TW, TA, TB, TZ) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWABW() (TY, TW, TA, TB, TW) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWABA() (TY, TW, TA, TB, TA) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWABB() (TY, TW, TA, TB, TB) { return _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBXX() (TY, TW, TB, TX, TX) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBXY() (TY, TW, TB, TX, TY) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBXZ() (TY, TW, TB, TX, TZ) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBXW() (TY, TW, TB, TX, TW) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBXA() (TY, TW, TB, TX, TA) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBXB() (TY, TW, TB, TX, TB) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBYX() (TY, TW, TB, TY, TX) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBYY() (TY, TW, TB, TY, TY) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBYZ() (TY, TW, TB, TY, TZ) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBYW() (TY, TW, TB, TY, TW) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBYA() (TY, TW, TB, TY, TA) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBYB() (TY, TW, TB, TY, TB) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBZX() (TY, TW, TB, TZ, TX) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBZY() (TY, TW, TB, TZ, TY) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBZZ() (TY, TW, TB, TZ, TZ) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBZW() (TY, TW, TB, TZ, TW) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBZA() (TY, TW, TB, TZ, TA) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBZB() (TY, TW, TB, TZ, TB) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBWX() (TY, TW, TB, TW, TX) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBWY() (TY, TW, TB, TW, TY) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBWZ() (TY, TW, TB, TW, TZ) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBWW() (TY, TW, TB, TW, TW) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBWA() (TY, TW, TB, TW, TA) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBWB() (TY, TW, TB, TW, TB) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBAX() (TY, TW, TB, TA, TX) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBAY() (TY, TW, TB, TA, TY) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBAZ() (TY, TW, TB, TA, TZ) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBAW() (TY, TW, TB, TA, TW) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBAA() (TY, TW, TB, TA, TA) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBAB() (TY, TW, TB, TA, TB) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBBX() (TY, TW, TB, TB, TX) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBBY() (TY, TW, TB, TB, TY) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBBZ() (TY, TW, TB, TB, TZ) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBBW() (TY, TW, TB, TB, TW) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBBA() (TY, TW, TB, TB, TA) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YWBBB() (TY, TW, TB, TB, TB) { return _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXXX() (TY, TA, TX, TX, TX) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXXY() (TY, TA, TX, TX, TY) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXXZ() (TY, TA, TX, TX, TZ) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXXW() (TY, TA, TX, TX, TW) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXXA() (TY, TA, TX, TX, TA) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXXB() (TY, TA, TX, TX, TB) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXYX() (TY, TA, TX, TY, TX) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXYY() (TY, TA, TX, TY, TY) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXYZ() (TY, TA, TX, TY, TZ) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXYW() (TY, TA, TX, TY, TW) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXYA() (TY, TA, TX, TY, TA) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXYB() (TY, TA, TX, TY, TB) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXZX() (TY, TA, TX, TZ, TX) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXZY() (TY, TA, TX, TZ, TY) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXZZ() (TY, TA, TX, TZ, TZ) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXZW() (TY, TA, TX, TZ, TW) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXZA() (TY, TA, TX, TZ, TA) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXZB() (TY, TA, TX, TZ, TB) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXWX() (TY, TA, TX, TW, TX) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXWY() (TY, TA, TX, TW, TY) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXWZ() (TY, TA, TX, TW, TZ) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXWW() (TY, TA, TX, TW, TW) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXWA() (TY, TA, TX, TW, TA) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXWB() (TY, TA, TX, TW, TB) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXAX() (TY, TA, TX, TA, TX) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXAY() (TY, TA, TX, TA, TY) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXAZ() (TY, TA, TX, TA, TZ) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXAW() (TY, TA, TX, TA, TW) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXAA() (TY, TA, TX, TA, TA) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXAB() (TY, TA, TX, TA, TB) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXBX() (TY, TA, TX, TB, TX) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXBY() (TY, TA, TX, TB, TY) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXBZ() (TY, TA, TX, TB, TZ) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXBW() (TY, TA, TX, TB, TW) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXBA() (TY, TA, TX, TB, TA) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAXBB() (TY, TA, TX, TB, TB) { return _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYXX() (TY, TA, TY, TX, TX) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYXY() (TY, TA, TY, TX, TY) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYXZ() (TY, TA, TY, TX, TZ) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYXW() (TY, TA, TY, TX, TW) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYXA() (TY, TA, TY, TX, TA) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYXB() (TY, TA, TY, TX, TB) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYYX() (TY, TA, TY, TY, TX) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYYY() (TY, TA, TY, TY, TY) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYYZ() (TY, TA, TY, TY, TZ) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYYW() (TY, TA, TY, TY, TW) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYYA() (TY, TA, TY, TY, TA) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYYB() (TY, TA, TY, TY, TB) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYZX() (TY, TA, TY, TZ, TX) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYZY() (TY, TA, TY, TZ, TY) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYZZ() (TY, TA, TY, TZ, TZ) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYZW() (TY, TA, TY, TZ, TW) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYZA() (TY, TA, TY, TZ, TA) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYZB() (TY, TA, TY, TZ, TB) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYWX() (TY, TA, TY, TW, TX) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYWY() (TY, TA, TY, TW, TY) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYWZ() (TY, TA, TY, TW, TZ) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYWW() (TY, TA, TY, TW, TW) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYWA() (TY, TA, TY, TW, TA) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYWB() (TY, TA, TY, TW, TB) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYAX() (TY, TA, TY, TA, TX) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYAY() (TY, TA, TY, TA, TY) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYAZ() (TY, TA, TY, TA, TZ) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYAW() (TY, TA, TY, TA, TW) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYAA() (TY, TA, TY, TA, TA) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYAB() (TY, TA, TY, TA, TB) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYBX() (TY, TA, TY, TB, TX) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYBY() (TY, TA, TY, TB, TY) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYBZ() (TY, TA, TY, TB, TZ) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYBW() (TY, TA, TY, TB, TW) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYBA() (TY, TA, TY, TB, TA) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAYBB() (TY, TA, TY, TB, TB) { return _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZXX() (TY, TA, TZ, TX, TX) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZXY() (TY, TA, TZ, TX, TY) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZXZ() (TY, TA, TZ, TX, TZ) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZXW() (TY, TA, TZ, TX, TW) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZXA() (TY, TA, TZ, TX, TA) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZXB() (TY, TA, TZ, TX, TB) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZYX() (TY, TA, TZ, TY, TX) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZYY() (TY, TA, TZ, TY, TY) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZYZ() (TY, TA, TZ, TY, TZ) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZYW() (TY, TA, TZ, TY, TW) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZYA() (TY, TA, TZ, TY, TA) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZYB() (TY, TA, TZ, TY, TB) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZZX() (TY, TA, TZ, TZ, TX) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZZY() (TY, TA, TZ, TZ, TY) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZZZ() (TY, TA, TZ, TZ, TZ) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZZW() (TY, TA, TZ, TZ, TW) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZZA() (TY, TA, TZ, TZ, TA) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZZB() (TY, TA, TZ, TZ, TB) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZWX() (TY, TA, TZ, TW, TX) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZWY() (TY, TA, TZ, TW, TY) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZWZ() (TY, TA, TZ, TW, TZ) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZWW() (TY, TA, TZ, TW, TW) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZWA() (TY, TA, TZ, TW, TA) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZWB() (TY, TA, TZ, TW, TB) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZAX() (TY, TA, TZ, TA, TX) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZAY() (TY, TA, TZ, TA, TY) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZAZ() (TY, TA, TZ, TA, TZ) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZAW() (TY, TA, TZ, TA, TW) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZAA() (TY, TA, TZ, TA, TA) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZAB() (TY, TA, TZ, TA, TB) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZBX() (TY, TA, TZ, TB, TX) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZBY() (TY, TA, TZ, TB, TY) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZBZ() (TY, TA, TZ, TB, TZ) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZBW() (TY, TA, TZ, TB, TW) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZBA() (TY, TA, TZ, TB, TA) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAZBB() (TY, TA, TZ, TB, TB) { return _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWXX() (TY, TA, TW, TX, TX) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWXY() (TY, TA, TW, TX, TY) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWXZ() (TY, TA, TW, TX, TZ) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWXW() (TY, TA, TW, TX, TW) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWXA() (TY, TA, TW, TX, TA) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWXB() (TY, TA, TW, TX, TB) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWYX() (TY, TA, TW, TY, TX) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWYY() (TY, TA, TW, TY, TY) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWYZ() (TY, TA, TW, TY, TZ) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWYW() (TY, TA, TW, TY, TW) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWYA() (TY, TA, TW, TY, TA) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWYB() (TY, TA, TW, TY, TB) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWZX() (TY, TA, TW, TZ, TX) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWZY() (TY, TA, TW, TZ, TY) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWZZ() (TY, TA, TW, TZ, TZ) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWZW() (TY, TA, TW, TZ, TW) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWZA() (TY, TA, TW, TZ, TA) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWZB() (TY, TA, TW, TZ, TB) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWWX() (TY, TA, TW, TW, TX) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWWY() (TY, TA, TW, TW, TY) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWWZ() (TY, TA, TW, TW, TZ) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWWW() (TY, TA, TW, TW, TW) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWWA() (TY, TA, TW, TW, TA) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWWB() (TY, TA, TW, TW, TB) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWAX() (TY, TA, TW, TA, TX) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWAY() (TY, TA, TW, TA, TY) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWAZ() (TY, TA, TW, TA, TZ) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWAW() (TY, TA, TW, TA, TW) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWAA() (TY, TA, TW, TA, TA) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWAB() (TY, TA, TW, TA, TB) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWBX() (TY, TA, TW, TB, TX) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWBY() (TY, TA, TW, TB, TY) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWBZ() (TY, TA, TW, TB, TZ) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWBW() (TY, TA, TW, TB, TW) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWBA() (TY, TA, TW, TB, TA) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAWBB() (TY, TA, TW, TB, TB) { return _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAXX() (TY, TA, TA, TX, TX) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAXY() (TY, TA, TA, TX, TY) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAXZ() (TY, TA, TA, TX, TZ) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAXW() (TY, TA, TA, TX, TW) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAXA() (TY, TA, TA, TX, TA) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAXB() (TY, TA, TA, TX, TB) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAYX() (TY, TA, TA, TY, TX) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAYY() (TY, TA, TA, TY, TY) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAYZ() (TY, TA, TA, TY, TZ) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAYW() (TY, TA, TA, TY, TW) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAYA() (TY, TA, TA, TY, TA) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAYB() (TY, TA, TA, TY, TB) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAZX() (TY, TA, TA, TZ, TX) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAZY() (TY, TA, TA, TZ, TY) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAZZ() (TY, TA, TA, TZ, TZ) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAZW() (TY, TA, TA, TZ, TW) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAZA() (TY, TA, TA, TZ, TA) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAZB() (TY, TA, TA, TZ, TB) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAWX() (TY, TA, TA, TW, TX) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAWY() (TY, TA, TA, TW, TY) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAWZ() (TY, TA, TA, TW, TZ) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAWW() (TY, TA, TA, TW, TW) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAWA() (TY, TA, TA, TW, TA) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAWB() (TY, TA, TA, TW, TB) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAAX() (TY, TA, TA, TA, TX) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAAY() (TY, TA, TA, TA, TY) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAAZ() (TY, TA, TA, TA, TZ) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAAW() (TY, TA, TA, TA, TW) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAAA() (TY, TA, TA, TA, TA) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAAAB() (TY, TA, TA, TA, TB) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAABX() (TY, TA, TA, TB, TX) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAABY() (TY, TA, TA, TB, TY) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAABZ() (TY, TA, TA, TB, TZ) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAABW() (TY, TA, TA, TB, TW) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAABA() (TY, TA, TA, TB, TA) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YAABB() (TY, TA, TA, TB, TB) { return _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABXX() (TY, TA, TB, TX, TX) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABXY() (TY, TA, TB, TX, TY) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABXZ() (TY, TA, TB, TX, TZ) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABXW() (TY, TA, TB, TX, TW) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABXA() (TY, TA, TB, TX, TA) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABXB() (TY, TA, TB, TX, TB) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABYX() (TY, TA, TB, TY, TX) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABYY() (TY, TA, TB, TY, TY) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABYZ() (TY, TA, TB, TY, TZ) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABYW() (TY, TA, TB, TY, TW) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABYA() (TY, TA, TB, TY, TA) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABYB() (TY, TA, TB, TY, TB) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABZX() (TY, TA, TB, TZ, TX) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABZY() (TY, TA, TB, TZ, TY) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABZZ() (TY, TA, TB, TZ, TZ) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABZW() (TY, TA, TB, TZ, TW) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABZA() (TY, TA, TB, TZ, TA) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABZB() (TY, TA, TB, TZ, TB) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABWX() (TY, TA, TB, TW, TX) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABWY() (TY, TA, TB, TW, TY) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABWZ() (TY, TA, TB, TW, TZ) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABWW() (TY, TA, TB, TW, TW) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABWA() (TY, TA, TB, TW, TA) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABWB() (TY, TA, TB, TW, TB) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABAX() (TY, TA, TB, TA, TX) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABAY() (TY, TA, TB, TA, TY) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABAZ() (TY, TA, TB, TA, TZ) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABAW() (TY, TA, TB, TA, TW) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABAA() (TY, TA, TB, TA, TA) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABAB() (TY, TA, TB, TA, TB) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABBX() (TY, TA, TB, TB, TX) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABBY() (TY, TA, TB, TB, TY) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABBZ() (TY, TA, TB, TB, TZ) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABBW() (TY, TA, TB, TB, TW) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABBA() (TY, TA, TB, TB, TA) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YABBB() (TY, TA, TB, TB, TB) { return _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXXX() (TY, TB, TX, TX, TX) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXXY() (TY, TB, TX, TX, TY) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXXZ() (TY, TB, TX, TX, TZ) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXXW() (TY, TB, TX, TX, TW) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXXA() (TY, TB, TX, TX, TA) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXXB() (TY, TB, TX, TX, TB) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXYX() (TY, TB, TX, TY, TX) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXYY() (TY, TB, TX, TY, TY) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXYZ() (TY, TB, TX, TY, TZ) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXYW() (TY, TB, TX, TY, TW) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXYA() (TY, TB, TX, TY, TA) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXYB() (TY, TB, TX, TY, TB) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXZX() (TY, TB, TX, TZ, TX) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXZY() (TY, TB, TX, TZ, TY) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXZZ() (TY, TB, TX, TZ, TZ) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXZW() (TY, TB, TX, TZ, TW) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXZA() (TY, TB, TX, TZ, TA) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXZB() (TY, TB, TX, TZ, TB) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXWX() (TY, TB, TX, TW, TX) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXWY() (TY, TB, TX, TW, TY) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXWZ() (TY, TB, TX, TW, TZ) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXWW() (TY, TB, TX, TW, TW) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXWA() (TY, TB, TX, TW, TA) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXWB() (TY, TB, TX, TW, TB) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXAX() (TY, TB, TX, TA, TX) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXAY() (TY, TB, TX, TA, TY) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXAZ() (TY, TB, TX, TA, TZ) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXAW() (TY, TB, TX, TA, TW) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXAA() (TY, TB, TX, TA, TA) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXAB() (TY, TB, TX, TA, TB) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXBX() (TY, TB, TX, TB, TX) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXBY() (TY, TB, TX, TB, TY) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXBZ() (TY, TB, TX, TB, TZ) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXBW() (TY, TB, TX, TB, TW) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXBA() (TY, TB, TX, TB, TA) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBXBB() (TY, TB, TX, TB, TB) { return _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYXX() (TY, TB, TY, TX, TX) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYXY() (TY, TB, TY, TX, TY) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYXZ() (TY, TB, TY, TX, TZ) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYXW() (TY, TB, TY, TX, TW) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYXA() (TY, TB, TY, TX, TA) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYXB() (TY, TB, TY, TX, TB) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYYX() (TY, TB, TY, TY, TX) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYYY() (TY, TB, TY, TY, TY) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYYZ() (TY, TB, TY, TY, TZ) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYYW() (TY, TB, TY, TY, TW) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYYA() (TY, TB, TY, TY, TA) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYYB() (TY, TB, TY, TY, TB) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYZX() (TY, TB, TY, TZ, TX) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYZY() (TY, TB, TY, TZ, TY) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYZZ() (TY, TB, TY, TZ, TZ) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYZW() (TY, TB, TY, TZ, TW) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYZA() (TY, TB, TY, TZ, TA) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYZB() (TY, TB, TY, TZ, TB) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYWX() (TY, TB, TY, TW, TX) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYWY() (TY, TB, TY, TW, TY) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYWZ() (TY, TB, TY, TW, TZ) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYWW() (TY, TB, TY, TW, TW) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYWA() (TY, TB, TY, TW, TA) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYWB() (TY, TB, TY, TW, TB) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYAX() (TY, TB, TY, TA, TX) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYAY() (TY, TB, TY, TA, TY) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYAZ() (TY, TB, TY, TA, TZ) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYAW() (TY, TB, TY, TA, TW) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYAA() (TY, TB, TY, TA, TA) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYAB() (TY, TB, TY, TA, TB) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYBX() (TY, TB, TY, TB, TX) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYBY() (TY, TB, TY, TB, TY) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYBZ() (TY, TB, TY, TB, TZ) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYBW() (TY, TB, TY, TB, TW) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYBA() (TY, TB, TY, TB, TA) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBYBB() (TY, TB, TY, TB, TB) { return _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZXX() (TY, TB, TZ, TX, TX) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZXY() (TY, TB, TZ, TX, TY) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZXZ() (TY, TB, TZ, TX, TZ) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZXW() (TY, TB, TZ, TX, TW) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZXA() (TY, TB, TZ, TX, TA) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZXB() (TY, TB, TZ, TX, TB) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZYX() (TY, TB, TZ, TY, TX) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZYY() (TY, TB, TZ, TY, TY) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZYZ() (TY, TB, TZ, TY, TZ) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZYW() (TY, TB, TZ, TY, TW) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZYA() (TY, TB, TZ, TY, TA) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZYB() (TY, TB, TZ, TY, TB) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZZX() (TY, TB, TZ, TZ, TX) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZZY() (TY, TB, TZ, TZ, TY) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZZZ() (TY, TB, TZ, TZ, TZ) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZZW() (TY, TB, TZ, TZ, TW) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZZA() (TY, TB, TZ, TZ, TA) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZZB() (TY, TB, TZ, TZ, TB) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZWX() (TY, TB, TZ, TW, TX) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZWY() (TY, TB, TZ, TW, TY) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZWZ() (TY, TB, TZ, TW, TZ) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZWW() (TY, TB, TZ, TW, TW) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZWA() (TY, TB, TZ, TW, TA) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZWB() (TY, TB, TZ, TW, TB) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZAX() (TY, TB, TZ, TA, TX) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZAY() (TY, TB, TZ, TA, TY) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZAZ() (TY, TB, TZ, TA, TZ) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZAW() (TY, TB, TZ, TA, TW) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZAA() (TY, TB, TZ, TA, TA) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZAB() (TY, TB, TZ, TA, TB) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZBX() (TY, TB, TZ, TB, TX) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZBY() (TY, TB, TZ, TB, TY) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZBZ() (TY, TB, TZ, TB, TZ) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZBW() (TY, TB, TZ, TB, TW) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZBA() (TY, TB, TZ, TB, TA) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBZBB() (TY, TB, TZ, TB, TB) { return _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWXX() (TY, TB, TW, TX, TX) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWXY() (TY, TB, TW, TX, TY) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWXZ() (TY, TB, TW, TX, TZ) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWXW() (TY, TB, TW, TX, TW) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWXA() (TY, TB, TW, TX, TA) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWXB() (TY, TB, TW, TX, TB) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWYX() (TY, TB, TW, TY, TX) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWYY() (TY, TB, TW, TY, TY) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWYZ() (TY, TB, TW, TY, TZ) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWYW() (TY, TB, TW, TY, TW) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWYA() (TY, TB, TW, TY, TA) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWYB() (TY, TB, TW, TY, TB) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWZX() (TY, TB, TW, TZ, TX) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWZY() (TY, TB, TW, TZ, TY) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWZZ() (TY, TB, TW, TZ, TZ) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWZW() (TY, TB, TW, TZ, TW) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWZA() (TY, TB, TW, TZ, TA) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWZB() (TY, TB, TW, TZ, TB) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWWX() (TY, TB, TW, TW, TX) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWWY() (TY, TB, TW, TW, TY) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWWZ() (TY, TB, TW, TW, TZ) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWWW() (TY, TB, TW, TW, TW) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWWA() (TY, TB, TW, TW, TA) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWWB() (TY, TB, TW, TW, TB) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWAX() (TY, TB, TW, TA, TX) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWAY() (TY, TB, TW, TA, TY) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWAZ() (TY, TB, TW, TA, TZ) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWAW() (TY, TB, TW, TA, TW) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWAA() (TY, TB, TW, TA, TA) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWAB() (TY, TB, TW, TA, TB) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWBX() (TY, TB, TW, TB, TX) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWBY() (TY, TB, TW, TB, TY) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWBZ() (TY, TB, TW, TB, TZ) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWBW() (TY, TB, TW, TB, TW) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWBA() (TY, TB, TW, TB, TA) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBWBB() (TY, TB, TW, TB, TB) { return _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAXX() (TY, TB, TA, TX, TX) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAXY() (TY, TB, TA, TX, TY) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAXZ() (TY, TB, TA, TX, TZ) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAXW() (TY, TB, TA, TX, TW) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAXA() (TY, TB, TA, TX, TA) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAXB() (TY, TB, TA, TX, TB) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAYX() (TY, TB, TA, TY, TX) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAYY() (TY, TB, TA, TY, TY) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAYZ() (TY, TB, TA, TY, TZ) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAYW() (TY, TB, TA, TY, TW) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAYA() (TY, TB, TA, TY, TA) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAYB() (TY, TB, TA, TY, TB) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAZX() (TY, TB, TA, TZ, TX) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAZY() (TY, TB, TA, TZ, TY) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAZZ() (TY, TB, TA, TZ, TZ) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAZW() (TY, TB, TA, TZ, TW) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAZA() (TY, TB, TA, TZ, TA) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAZB() (TY, TB, TA, TZ, TB) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAWX() (TY, TB, TA, TW, TX) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAWY() (TY, TB, TA, TW, TY) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAWZ() (TY, TB, TA, TW, TZ) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAWW() (TY, TB, TA, TW, TW) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAWA() (TY, TB, TA, TW, TA) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAWB() (TY, TB, TA, TW, TB) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAAX() (TY, TB, TA, TA, TX) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAAY() (TY, TB, TA, TA, TY) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAAZ() (TY, TB, TA, TA, TZ) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAAW() (TY, TB, TA, TA, TW) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAAA() (TY, TB, TA, TA, TA) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBAAB() (TY, TB, TA, TA, TB) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBABX() (TY, TB, TA, TB, TX) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBABY() (TY, TB, TA, TB, TY) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBABZ() (TY, TB, TA, TB, TZ) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBABW() (TY, TB, TA, TB, TW) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBABA() (TY, TB, TA, TB, TA) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBABB() (TY, TB, TA, TB, TB) { return _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBXX() (TY, TB, TB, TX, TX) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBXY() (TY, TB, TB, TX, TY) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBXZ() (TY, TB, TB, TX, TZ) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBXW() (TY, TB, TB, TX, TW) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBXA() (TY, TB, TB, TX, TA) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBXB() (TY, TB, TB, TX, TB) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBYX() (TY, TB, TB, TY, TX) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBYY() (TY, TB, TB, TY, TY) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBYZ() (TY, TB, TB, TY, TZ) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBYW() (TY, TB, TB, TY, TW) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBYA() (TY, TB, TB, TY, TA) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBYB() (TY, TB, TB, TY, TB) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBZX() (TY, TB, TB, TZ, TX) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBZY() (TY, TB, TB, TZ, TY) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBZZ() (TY, TB, TB, TZ, TZ) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBZW() (TY, TB, TB, TZ, TW) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBZA() (TY, TB, TB, TZ, TA) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBZB() (TY, TB, TB, TZ, TB) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBWX() (TY, TB, TB, TW, TX) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBWY() (TY, TB, TB, TW, TY) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBWZ() (TY, TB, TB, TW, TZ) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBWW() (TY, TB, TB, TW, TW) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBWA() (TY, TB, TB, TW, TA) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBWB() (TY, TB, TB, TW, TB) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBAX() (TY, TB, TB, TA, TX) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBAY() (TY, TB, TB, TA, TY) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBAZ() (TY, TB, TB, TA, TZ) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBAW() (TY, TB, TB, TA, TW) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBAA() (TY, TB, TB, TA, TA) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBAB() (TY, TB, TB, TA, TB) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBBX() (TY, TB, TB, TB, TX) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBBY() (TY, TB, TB, TB, TY) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBBZ() (TY, TB, TB, TB, TZ) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBBW() (TY, TB, TB, TB, TW) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBBA() (TY, TB, TB, TB, TA) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) YBBBB() (TY, TB, TB, TB, TB) { return _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXXX() (TZ, TX, TX, TX, TX) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXXY() (TZ, TX, TX, TX, TY) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXXZ() (TZ, TX, TX, TX, TZ) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXXW() (TZ, TX, TX, TX, TW) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXXA() (TZ, TX, TX, TX, TA) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXXB() (TZ, TX, TX, TX, TB) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXYX() (TZ, TX, TX, TY, TX) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXYY() (TZ, TX, TX, TY, TY) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXYZ() (TZ, TX, TX, TY, TZ) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXYW() (TZ, TX, TX, TY, TW) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXYA() (TZ, TX, TX, TY, TA) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXYB() (TZ, TX, TX, TY, TB) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXZX() (TZ, TX, TX, TZ, TX) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXZY() (TZ, TX, TX, TZ, TY) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXZZ() (TZ, TX, TX, TZ, TZ) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXZW() (TZ, TX, TX, TZ, TW) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXZA() (TZ, TX, TX, TZ, TA) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXZB() (TZ, TX, TX, TZ, TB) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXWX() (TZ, TX, TX, TW, TX) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXWY() (TZ, TX, TX, TW, TY) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXWZ() (TZ, TX, TX, TW, TZ) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXWW() (TZ, TX, TX, TW, TW) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXWA() (TZ, TX, TX, TW, TA) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXWB() (TZ, TX, TX, TW, TB) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXAX() (TZ, TX, TX, TA, TX) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXAY() (TZ, TX, TX, TA, TY) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXAZ() (TZ, TX, TX, TA, TZ) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXAW() (TZ, TX, TX, TA, TW) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXAA() (TZ, TX, TX, TA, TA) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXAB() (TZ, TX, TX, TA, TB) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXBX() (TZ, TX, TX, TB, TX) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXBY() (TZ, TX, TX, TB, TY) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXBZ() (TZ, TX, TX, TB, TZ) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXBW() (TZ, TX, TX, TB, TW) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXBA() (TZ, TX, TX, TB, TA) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXXBB() (TZ, TX, TX, TB, TB) { return _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYXX() (TZ, TX, TY, TX, TX) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYXY() (TZ, TX, TY, TX, TY) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYXZ() (TZ, TX, TY, TX, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYXW() (TZ, TX, TY, TX, TW) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYXA() (TZ, TX, TY, TX, TA) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYXB() (TZ, TX, TY, TX, TB) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYYX() (TZ, TX, TY, TY, TX) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYYY() (TZ, TX, TY, TY, TY) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYYZ() (TZ, TX, TY, TY, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYYW() (TZ, TX, TY, TY, TW) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYYA() (TZ, TX, TY, TY, TA) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYYB() (TZ, TX, TY, TY, TB) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYZX() (TZ, TX, TY, TZ, TX) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYZY() (TZ, TX, TY, TZ, TY) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYZZ() (TZ, TX, TY, TZ, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYZW() (TZ, TX, TY, TZ, TW) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYZA() (TZ, TX, TY, TZ, TA) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYZB() (TZ, TX, TY, TZ, TB) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYWX() (TZ, TX, TY, TW, TX) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYWY() (TZ, TX, TY, TW, TY) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYWZ() (TZ, TX, TY, TW, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYWW() (TZ, TX, TY, TW, TW) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYWA() (TZ, TX, TY, TW, TA) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYWB() (TZ, TX, TY, TW, TB) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYAX() (TZ, TX, TY, TA, TX) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYAY() (TZ, TX, TY, TA, TY) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYAZ() (TZ, TX, TY, TA, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYAW() (TZ, TX, TY, TA, TW) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYAA() (TZ, TX, TY, TA, TA) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYAB() (TZ, TX, TY, TA, TB) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYBX() (TZ, TX, TY, TB, TX) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYBY() (TZ, TX, TY, TB, TY) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYBZ() (TZ, TX, TY, TB, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYBW() (TZ, TX, TY, TB, TW) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYBA() (TZ, TX, TY, TB, TA) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXYBB() (TZ, TX, TY, TB, TB) { return _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZXX() (TZ, TX, TZ, TX, TX) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZXY() (TZ, TX, TZ, TX, TY) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZXZ() (TZ, TX, TZ, TX, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZXW() (TZ, TX, TZ, TX, TW) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZXA() (TZ, TX, TZ, TX, TA) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZXB() (TZ, TX, TZ, TX, TB) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZYX() (TZ, TX, TZ, TY, TX) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZYY() (TZ, TX, TZ, TY, TY) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZYZ() (TZ, TX, TZ, TY, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZYW() (TZ, TX, TZ, TY, TW) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZYA() (TZ, TX, TZ, TY, TA) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZYB() (TZ, TX, TZ, TY, TB) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZZX() (TZ, TX, TZ, TZ, TX) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZZY() (TZ, TX, TZ, TZ, TY) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZZZ() (TZ, TX, TZ, TZ, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZZW() (TZ, TX, TZ, TZ, TW) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZZA() (TZ, TX, TZ, TZ, TA) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZZB() (TZ, TX, TZ, TZ, TB) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZWX() (TZ, TX, TZ, TW, TX) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZWY() (TZ, TX, TZ, TW, TY) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZWZ() (TZ, TX, TZ, TW, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZWW() (TZ, TX, TZ, TW, TW) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZWA() (TZ, TX, TZ, TW, TA) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZWB() (TZ, TX, TZ, TW, TB) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZAX() (TZ, TX, TZ, TA, TX) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZAY() (TZ, TX, TZ, TA, TY) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZAZ() (TZ, TX, TZ, TA, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZAW() (TZ, TX, TZ, TA, TW) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZAA() (TZ, TX, TZ, TA, TA) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZAB() (TZ, TX, TZ, TA, TB) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZBX() (TZ, TX, TZ, TB, TX) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZBY() (TZ, TX, TZ, TB, TY) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZBZ() (TZ, TX, TZ, TB, TZ) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZBW() (TZ, TX, TZ, TB, TW) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZBA() (TZ, TX, TZ, TB, TA) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXZBB() (TZ, TX, TZ, TB, TB) { return _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWXX() (TZ, TX, TW, TX, TX) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWXY() (TZ, TX, TW, TX, TY) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWXZ() (TZ, TX, TW, TX, TZ) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWXW() (TZ, TX, TW, TX, TW) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWXA() (TZ, TX, TW, TX, TA) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWXB() (TZ, TX, TW, TX, TB) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWYX() (TZ, TX, TW, TY, TX) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWYY() (TZ, TX, TW, TY, TY) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWYZ() (TZ, TX, TW, TY, TZ) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWYW() (TZ, TX, TW, TY, TW) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWYA() (TZ, TX, TW, TY, TA) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWYB() (TZ, TX, TW, TY, TB) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWZX() (TZ, TX, TW, TZ, TX) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWZY() (TZ, TX, TW, TZ, TY) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWZZ() (TZ, TX, TW, TZ, TZ) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWZW() (TZ, TX, TW, TZ, TW) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWZA() (TZ, TX, TW, TZ, TA) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWZB() (TZ, TX, TW, TZ, TB) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWWX() (TZ, TX, TW, TW, TX) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWWY() (TZ, TX, TW, TW, TY) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWWZ() (TZ, TX, TW, TW, TZ) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWWW() (TZ, TX, TW, TW, TW) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWWA() (TZ, TX, TW, TW, TA) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWWB() (TZ, TX, TW, TW, TB) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWAX() (TZ, TX, TW, TA, TX) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWAY() (TZ, TX, TW, TA, TY) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWAZ() (TZ, TX, TW, TA, TZ) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWAW() (TZ, TX, TW, TA, TW) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWAA() (TZ, TX, TW, TA, TA) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWAB() (TZ, TX, TW, TA, TB) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWBX() (TZ, TX, TW, TB, TX) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWBY() (TZ, TX, TW, TB, TY) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWBZ() (TZ, TX, TW, TB, TZ) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWBW() (TZ, TX, TW, TB, TW) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWBA() (TZ, TX, TW, TB, TA) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXWBB() (TZ, TX, TW, TB, TB) { return _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAXX() (TZ, TX, TA, TX, TX) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAXY() (TZ, TX, TA, TX, TY) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAXZ() (TZ, TX, TA, TX, TZ) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAXW() (TZ, TX, TA, TX, TW) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAXA() (TZ, TX, TA, TX, TA) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAXB() (TZ, TX, TA, TX, TB) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAYX() (TZ, TX, TA, TY, TX) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAYY() (TZ, TX, TA, TY, TY) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAYZ() (TZ, TX, TA, TY, TZ) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAYW() (TZ, TX, TA, TY, TW) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAYA() (TZ, TX, TA, TY, TA) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAYB() (TZ, TX, TA, TY, TB) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAZX() (TZ, TX, TA, TZ, TX) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAZY() (TZ, TX, TA, TZ, TY) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAZZ() (TZ, TX, TA, TZ, TZ) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAZW() (TZ, TX, TA, TZ, TW) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAZA() (TZ, TX, TA, TZ, TA) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAZB() (TZ, TX, TA, TZ, TB) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAWX() (TZ, TX, TA, TW, TX) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAWY() (TZ, TX, TA, TW, TY) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAWZ() (TZ, TX, TA, TW, TZ) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAWW() (TZ, TX, TA, TW, TW) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAWA() (TZ, TX, TA, TW, TA) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAWB() (TZ, TX, TA, TW, TB) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAAX() (TZ, TX, TA, TA, TX) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAAY() (TZ, TX, TA, TA, TY) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAAZ() (TZ, TX, TA, TA, TZ) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAAW() (TZ, TX, TA, TA, TW) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAAA() (TZ, TX, TA, TA, TA) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXAAB() (TZ, TX, TA, TA, TB) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXABX() (TZ, TX, TA, TB, TX) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXABY() (TZ, TX, TA, TB, TY) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXABZ() (TZ, TX, TA, TB, TZ) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXABW() (TZ, TX, TA, TB, TW) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXABA() (TZ, TX, TA, TB, TA) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXABB() (TZ, TX, TA, TB, TB) { return _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBXX() (TZ, TX, TB, TX, TX) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBXY() (TZ, TX, TB, TX, TY) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBXZ() (TZ, TX, TB, TX, TZ) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBXW() (TZ, TX, TB, TX, TW) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBXA() (TZ, TX, TB, TX, TA) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBXB() (TZ, TX, TB, TX, TB) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBYX() (TZ, TX, TB, TY, TX) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBYY() (TZ, TX, TB, TY, TY) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBYZ() (TZ, TX, TB, TY, TZ) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBYW() (TZ, TX, TB, TY, TW) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBYA() (TZ, TX, TB, TY, TA) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBYB() (TZ, TX, TB, TY, TB) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBZX() (TZ, TX, TB, TZ, TX) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBZY() (TZ, TX, TB, TZ, TY) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBZZ() (TZ, TX, TB, TZ, TZ) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBZW() (TZ, TX, TB, TZ, TW) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBZA() (TZ, TX, TB, TZ, TA) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBZB() (TZ, TX, TB, TZ, TB) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBWX() (TZ, TX, TB, TW, TX) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBWY() (TZ, TX, TB, TW, TY) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBWZ() (TZ, TX, TB, TW, TZ) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBWW() (TZ, TX, TB, TW, TW) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBWA() (TZ, TX, TB, TW, TA) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBWB() (TZ, TX, TB, TW, TB) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBAX() (TZ, TX, TB, TA, TX) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBAY() (TZ, TX, TB, TA, TY) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBAZ() (TZ, TX, TB, TA, TZ) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBAW() (TZ, TX, TB, TA, TW) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBAA() (TZ, TX, TB, TA, TA) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBAB() (TZ, TX, TB, TA, TB) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBBX() (TZ, TX, TB, TB, TX) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBBY() (TZ, TX, TB, TB, TY) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBBZ() (TZ, TX, TB, TB, TZ) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBBW() (TZ, TX, TB, TB, TW) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBBA() (TZ, TX, TB, TB, TA) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZXBBB() (TZ, TX, TB, TB, TB) { return _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXXX() (TZ, TY, TX, TX, TX) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXXY() (TZ, TY, TX, TX, TY) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXXZ() (TZ, TY, TX, TX, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXXW() (TZ, TY, TX, TX, TW) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXXA() (TZ, TY, TX, TX, TA) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXXB() (TZ, TY, TX, TX, TB) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXYX() (TZ, TY, TX, TY, TX) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXYY() (TZ, TY, TX, TY, TY) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXYZ() (TZ, TY, TX, TY, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXYW() (TZ, TY, TX, TY, TW) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXYA() (TZ, TY, TX, TY, TA) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXYB() (TZ, TY, TX, TY, TB) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXZX() (TZ, TY, TX, TZ, TX) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXZY() (TZ, TY, TX, TZ, TY) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXZZ() (TZ, TY, TX, TZ, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXZW() (TZ, TY, TX, TZ, TW) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXZA() (TZ, TY, TX, TZ, TA) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXZB() (TZ, TY, TX, TZ, TB) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXWX() (TZ, TY, TX, TW, TX) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXWY() (TZ, TY, TX, TW, TY) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXWZ() (TZ, TY, TX, TW, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXWW() (TZ, TY, TX, TW, TW) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXWA() (TZ, TY, TX, TW, TA) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXWB() (TZ, TY, TX, TW, TB) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXAX() (TZ, TY, TX, TA, TX) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXAY() (TZ, TY, TX, TA, TY) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXAZ() (TZ, TY, TX, TA, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXAW() (TZ, TY, TX, TA, TW) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXAA() (TZ, TY, TX, TA, TA) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXAB() (TZ, TY, TX, TA, TB) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXBX() (TZ, TY, TX, TB, TX) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXBY() (TZ, TY, TX, TB, TY) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXBZ() (TZ, TY, TX, TB, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXBW() (TZ, TY, TX, TB, TW) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXBA() (TZ, TY, TX, TB, TA) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYXBB() (TZ, TY, TX, TB, TB) { return _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYXX() (TZ, TY, TY, TX, TX) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYXY() (TZ, TY, TY, TX, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYXZ() (TZ, TY, TY, TX, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYXW() (TZ, TY, TY, TX, TW) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYXA() (TZ, TY, TY, TX, TA) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYXB() (TZ, TY, TY, TX, TB) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYYX() (TZ, TY, TY, TY, TX) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYYY() (TZ, TY, TY, TY, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYYZ() (TZ, TY, TY, TY, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYYW() (TZ, TY, TY, TY, TW) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYYA() (TZ, TY, TY, TY, TA) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYYB() (TZ, TY, TY, TY, TB) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYZX() (TZ, TY, TY, TZ, TX) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYZY() (TZ, TY, TY, TZ, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYZZ() (TZ, TY, TY, TZ, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYZW() (TZ, TY, TY, TZ, TW) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYZA() (TZ, TY, TY, TZ, TA) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYZB() (TZ, TY, TY, TZ, TB) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYWX() (TZ, TY, TY, TW, TX) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYWY() (TZ, TY, TY, TW, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYWZ() (TZ, TY, TY, TW, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYWW() (TZ, TY, TY, TW, TW) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYWA() (TZ, TY, TY, TW, TA) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYWB() (TZ, TY, TY, TW, TB) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYAX() (TZ, TY, TY, TA, TX) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYAY() (TZ, TY, TY, TA, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYAZ() (TZ, TY, TY, TA, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYAW() (TZ, TY, TY, TA, TW) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYAA() (TZ, TY, TY, TA, TA) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYAB() (TZ, TY, TY, TA, TB) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYBX() (TZ, TY, TY, TB, TX) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYBY() (TZ, TY, TY, TB, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYBZ() (TZ, TY, TY, TB, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYBW() (TZ, TY, TY, TB, TW) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYBA() (TZ, TY, TY, TB, TA) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYYBB() (TZ, TY, TY, TB, TB) { return _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZXX() (TZ, TY, TZ, TX, TX) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZXY() (TZ, TY, TZ, TX, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZXZ() (TZ, TY, TZ, TX, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZXW() (TZ, TY, TZ, TX, TW) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZXA() (TZ, TY, TZ, TX, TA) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZXB() (TZ, TY, TZ, TX, TB) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZYX() (TZ, TY, TZ, TY, TX) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZYY() (TZ, TY, TZ, TY, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZYZ() (TZ, TY, TZ, TY, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZYW() (TZ, TY, TZ, TY, TW) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZYA() (TZ, TY, TZ, TY, TA) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZYB() (TZ, TY, TZ, TY, TB) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZZX() (TZ, TY, TZ, TZ, TX) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZZY() (TZ, TY, TZ, TZ, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZZZ() (TZ, TY, TZ, TZ, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZZW() (TZ, TY, TZ, TZ, TW) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZZA() (TZ, TY, TZ, TZ, TA) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZZB() (TZ, TY, TZ, TZ, TB) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZWX() (TZ, TY, TZ, TW, TX) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZWY() (TZ, TY, TZ, TW, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZWZ() (TZ, TY, TZ, TW, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZWW() (TZ, TY, TZ, TW, TW) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZWA() (TZ, TY, TZ, TW, TA) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZWB() (TZ, TY, TZ, TW, TB) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZAX() (TZ, TY, TZ, TA, TX) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZAY() (TZ, TY, TZ, TA, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZAZ() (TZ, TY, TZ, TA, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZAW() (TZ, TY, TZ, TA, TW) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZAA() (TZ, TY, TZ, TA, TA) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZAB() (TZ, TY, TZ, TA, TB) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZBX() (TZ, TY, TZ, TB, TX) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZBY() (TZ, TY, TZ, TB, TY) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZBZ() (TZ, TY, TZ, TB, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZBW() (TZ, TY, TZ, TB, TW) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZBA() (TZ, TY, TZ, TB, TA) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYZBB() (TZ, TY, TZ, TB, TB) { return _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWXX() (TZ, TY, TW, TX, TX) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWXY() (TZ, TY, TW, TX, TY) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWXZ() (TZ, TY, TW, TX, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWXW() (TZ, TY, TW, TX, TW) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWXA() (TZ, TY, TW, TX, TA) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWXB() (TZ, TY, TW, TX, TB) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWYX() (TZ, TY, TW, TY, TX) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWYY() (TZ, TY, TW, TY, TY) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWYZ() (TZ, TY, TW, TY, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWYW() (TZ, TY, TW, TY, TW) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWYA() (TZ, TY, TW, TY, TA) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWYB() (TZ, TY, TW, TY, TB) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWZX() (TZ, TY, TW, TZ, TX) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWZY() (TZ, TY, TW, TZ, TY) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWZZ() (TZ, TY, TW, TZ, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWZW() (TZ, TY, TW, TZ, TW) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWZA() (TZ, TY, TW, TZ, TA) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWZB() (TZ, TY, TW, TZ, TB) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWWX() (TZ, TY, TW, TW, TX) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWWY() (TZ, TY, TW, TW, TY) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWWZ() (TZ, TY, TW, TW, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWWW() (TZ, TY, TW, TW, TW) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWWA() (TZ, TY, TW, TW, TA) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWWB() (TZ, TY, TW, TW, TB) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWAX() (TZ, TY, TW, TA, TX) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWAY() (TZ, TY, TW, TA, TY) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWAZ() (TZ, TY, TW, TA, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWAW() (TZ, TY, TW, TA, TW) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWAA() (TZ, TY, TW, TA, TA) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWAB() (TZ, TY, TW, TA, TB) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWBX() (TZ, TY, TW, TB, TX) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWBY() (TZ, TY, TW, TB, TY) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWBZ() (TZ, TY, TW, TB, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWBW() (TZ, TY, TW, TB, TW) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWBA() (TZ, TY, TW, TB, TA) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYWBB() (TZ, TY, TW, TB, TB) { return _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAXX() (TZ, TY, TA, TX, TX) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAXY() (TZ, TY, TA, TX, TY) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAXZ() (TZ, TY, TA, TX, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAXW() (TZ, TY, TA, TX, TW) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAXA() (TZ, TY, TA, TX, TA) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAXB() (TZ, TY, TA, TX, TB) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAYX() (TZ, TY, TA, TY, TX) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAYY() (TZ, TY, TA, TY, TY) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAYZ() (TZ, TY, TA, TY, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAYW() (TZ, TY, TA, TY, TW) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAYA() (TZ, TY, TA, TY, TA) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAYB() (TZ, TY, TA, TY, TB) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAZX() (TZ, TY, TA, TZ, TX) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAZY() (TZ, TY, TA, TZ, TY) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAZZ() (TZ, TY, TA, TZ, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAZW() (TZ, TY, TA, TZ, TW) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAZA() (TZ, TY, TA, TZ, TA) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAZB() (TZ, TY, TA, TZ, TB) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAWX() (TZ, TY, TA, TW, TX) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAWY() (TZ, TY, TA, TW, TY) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAWZ() (TZ, TY, TA, TW, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAWW() (TZ, TY, TA, TW, TW) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAWA() (TZ, TY, TA, TW, TA) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAWB() (TZ, TY, TA, TW, TB) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAAX() (TZ, TY, TA, TA, TX) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAAY() (TZ, TY, TA, TA, TY) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAAZ() (TZ, TY, TA, TA, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAAW() (TZ, TY, TA, TA, TW) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAAA() (TZ, TY, TA, TA, TA) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYAAB() (TZ, TY, TA, TA, TB) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYABX() (TZ, TY, TA, TB, TX) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYABY() (TZ, TY, TA, TB, TY) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYABZ() (TZ, TY, TA, TB, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYABW() (TZ, TY, TA, TB, TW) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYABA() (TZ, TY, TA, TB, TA) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYABB() (TZ, TY, TA, TB, TB) { return _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBXX() (TZ, TY, TB, TX, TX) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBXY() (TZ, TY, TB, TX, TY) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBXZ() (TZ, TY, TB, TX, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBXW() (TZ, TY, TB, TX, TW) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBXA() (TZ, TY, TB, TX, TA) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBXB() (TZ, TY, TB, TX, TB) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBYX() (TZ, TY, TB, TY, TX) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBYY() (TZ, TY, TB, TY, TY) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBYZ() (TZ, TY, TB, TY, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBYW() (TZ, TY, TB, TY, TW) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBYA() (TZ, TY, TB, TY, TA) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBYB() (TZ, TY, TB, TY, TB) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBZX() (TZ, TY, TB, TZ, TX) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBZY() (TZ, TY, TB, TZ, TY) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBZZ() (TZ, TY, TB, TZ, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBZW() (TZ, TY, TB, TZ, TW) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBZA() (TZ, TY, TB, TZ, TA) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBZB() (TZ, TY, TB, TZ, TB) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBWX() (TZ, TY, TB, TW, TX) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBWY() (TZ, TY, TB, TW, TY) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBWZ() (TZ, TY, TB, TW, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBWW() (TZ, TY, TB, TW, TW) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBWA() (TZ, TY, TB, TW, TA) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBWB() (TZ, TY, TB, TW, TB) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBAX() (TZ, TY, TB, TA, TX) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBAY() (TZ, TY, TB, TA, TY) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBAZ() (TZ, TY, TB, TA, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBAW() (TZ, TY, TB, TA, TW) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBAA() (TZ, TY, TB, TA, TA) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBAB() (TZ, TY, TB, TA, TB) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBBX() (TZ, TY, TB, TB, TX) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBBY() (TZ, TY, TB, TB, TY) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBBZ() (TZ, TY, TB, TB, TZ) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBBW() (TZ, TY, TB, TB, TW) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBBA() (TZ, TY, TB, TB, TA) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZYBBB() (TZ, TY, TB, TB, TB) { return _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXXX() (TZ, TZ, TX, TX, TX) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXXY() (TZ, TZ, TX, TX, TY) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXXZ() (TZ, TZ, TX, TX, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXXW() (TZ, TZ, TX, TX, TW) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXXA() (TZ, TZ, TX, TX, TA) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXXB() (TZ, TZ, TX, TX, TB) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXYX() (TZ, TZ, TX, TY, TX) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXYY() (TZ, TZ, TX, TY, TY) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXYZ() (TZ, TZ, TX, TY, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXYW() (TZ, TZ, TX, TY, TW) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXYA() (TZ, TZ, TX, TY, TA) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXYB() (TZ, TZ, TX, TY, TB) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXZX() (TZ, TZ, TX, TZ, TX) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXZY() (TZ, TZ, TX, TZ, TY) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXZZ() (TZ, TZ, TX, TZ, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXZW() (TZ, TZ, TX, TZ, TW) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXZA() (TZ, TZ, TX, TZ, TA) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXZB() (TZ, TZ, TX, TZ, TB) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXWX() (TZ, TZ, TX, TW, TX) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXWY() (TZ, TZ, TX, TW, TY) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXWZ() (TZ, TZ, TX, TW, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXWW() (TZ, TZ, TX, TW, TW) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXWA() (TZ, TZ, TX, TW, TA) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXWB() (TZ, TZ, TX, TW, TB) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXAX() (TZ, TZ, TX, TA, TX) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXAY() (TZ, TZ, TX, TA, TY) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXAZ() (TZ, TZ, TX, TA, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXAW() (TZ, TZ, TX, TA, TW) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXAA() (TZ, TZ, TX, TA, TA) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXAB() (TZ, TZ, TX, TA, TB) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXBX() (TZ, TZ, TX, TB, TX) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXBY() (TZ, TZ, TX, TB, TY) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXBZ() (TZ, TZ, TX, TB, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXBW() (TZ, TZ, TX, TB, TW) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXBA() (TZ, TZ, TX, TB, TA) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZXBB() (TZ, TZ, TX, TB, TB) { return _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYXX() (TZ, TZ, TY, TX, TX) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYXY() (TZ, TZ, TY, TX, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYXZ() (TZ, TZ, TY, TX, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYXW() (TZ, TZ, TY, TX, TW) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYXA() (TZ, TZ, TY, TX, TA) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYXB() (TZ, TZ, TY, TX, TB) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYYX() (TZ, TZ, TY, TY, TX) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYYY() (TZ, TZ, TY, TY, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYYZ() (TZ, TZ, TY, TY, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYYW() (TZ, TZ, TY, TY, TW) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYYA() (TZ, TZ, TY, TY, TA) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYYB() (TZ, TZ, TY, TY, TB) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYZX() (TZ, TZ, TY, TZ, TX) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYZY() (TZ, TZ, TY, TZ, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYZZ() (TZ, TZ, TY, TZ, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYZW() (TZ, TZ, TY, TZ, TW) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYZA() (TZ, TZ, TY, TZ, TA) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYZB() (TZ, TZ, TY, TZ, TB) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYWX() (TZ, TZ, TY, TW, TX) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYWY() (TZ, TZ, TY, TW, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYWZ() (TZ, TZ, TY, TW, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYWW() (TZ, TZ, TY, TW, TW) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYWA() (TZ, TZ, TY, TW, TA) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYWB() (TZ, TZ, TY, TW, TB) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYAX() (TZ, TZ, TY, TA, TX) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYAY() (TZ, TZ, TY, TA, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYAZ() (TZ, TZ, TY, TA, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYAW() (TZ, TZ, TY, TA, TW) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYAA() (TZ, TZ, TY, TA, TA) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYAB() (TZ, TZ, TY, TA, TB) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYBX() (TZ, TZ, TY, TB, TX) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYBY() (TZ, TZ, TY, TB, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYBZ() (TZ, TZ, TY, TB, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYBW() (TZ, TZ, TY, TB, TW) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYBA() (TZ, TZ, TY, TB, TA) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZYBB() (TZ, TZ, TY, TB, TB) { return _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZXX() (TZ, TZ, TZ, TX, TX) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZXY() (TZ, TZ, TZ, TX, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZXZ() (TZ, TZ, TZ, TX, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZXW() (TZ, TZ, TZ, TX, TW) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZXA() (TZ, TZ, TZ, TX, TA) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZXB() (TZ, TZ, TZ, TX, TB) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZYX() (TZ, TZ, TZ, TY, TX) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZYY() (TZ, TZ, TZ, TY, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZYZ() (TZ, TZ, TZ, TY, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZYW() (TZ, TZ, TZ, TY, TW) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZYA() (TZ, TZ, TZ, TY, TA) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZYB() (TZ, TZ, TZ, TY, TB) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZZX() (TZ, TZ, TZ, TZ, TX) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZZY() (TZ, TZ, TZ, TZ, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZZZ() (TZ, TZ, TZ, TZ, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZZW() (TZ, TZ, TZ, TZ, TW) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZZA() (TZ, TZ, TZ, TZ, TA) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZZB() (TZ, TZ, TZ, TZ, TB) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZWX() (TZ, TZ, TZ, TW, TX) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZWY() (TZ, TZ, TZ, TW, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZWZ() (TZ, TZ, TZ, TW, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZWW() (TZ, TZ, TZ, TW, TW) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZWA() (TZ, TZ, TZ, TW, TA) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZWB() (TZ, TZ, TZ, TW, TB) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZAX() (TZ, TZ, TZ, TA, TX) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZAY() (TZ, TZ, TZ, TA, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZAZ() (TZ, TZ, TZ, TA, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZAW() (TZ, TZ, TZ, TA, TW) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZAA() (TZ, TZ, TZ, TA, TA) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZAB() (TZ, TZ, TZ, TA, TB) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZBX() (TZ, TZ, TZ, TB, TX) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZBY() (TZ, TZ, TZ, TB, TY) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZBZ() (TZ, TZ, TZ, TB, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZBW() (TZ, TZ, TZ, TB, TW) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZBA() (TZ, TZ, TZ, TB, TA) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZZBB() (TZ, TZ, TZ, TB, TB) { return _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWXX() (TZ, TZ, TW, TX, TX) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWXY() (TZ, TZ, TW, TX, TY) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWXZ() (TZ, TZ, TW, TX, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWXW() (TZ, TZ, TW, TX, TW) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWXA() (TZ, TZ, TW, TX, TA) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWXB() (TZ, TZ, TW, TX, TB) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWYX() (TZ, TZ, TW, TY, TX) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWYY() (TZ, TZ, TW, TY, TY) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWYZ() (TZ, TZ, TW, TY, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWYW() (TZ, TZ, TW, TY, TW) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWYA() (TZ, TZ, TW, TY, TA) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWYB() (TZ, TZ, TW, TY, TB) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWZX() (TZ, TZ, TW, TZ, TX) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWZY() (TZ, TZ, TW, TZ, TY) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWZZ() (TZ, TZ, TW, TZ, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWZW() (TZ, TZ, TW, TZ, TW) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWZA() (TZ, TZ, TW, TZ, TA) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWZB() (TZ, TZ, TW, TZ, TB) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWWX() (TZ, TZ, TW, TW, TX) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWWY() (TZ, TZ, TW, TW, TY) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWWZ() (TZ, TZ, TW, TW, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWWW() (TZ, TZ, TW, TW, TW) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWWA() (TZ, TZ, TW, TW, TA) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWWB() (TZ, TZ, TW, TW, TB) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWAX() (TZ, TZ, TW, TA, TX) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWAY() (TZ, TZ, TW, TA, TY) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWAZ() (TZ, TZ, TW, TA, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWAW() (TZ, TZ, TW, TA, TW) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWAA() (TZ, TZ, TW, TA, TA) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWAB() (TZ, TZ, TW, TA, TB) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWBX() (TZ, TZ, TW, TB, TX) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWBY() (TZ, TZ, TW, TB, TY) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWBZ() (TZ, TZ, TW, TB, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWBW() (TZ, TZ, TW, TB, TW) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWBA() (TZ, TZ, TW, TB, TA) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZWBB() (TZ, TZ, TW, TB, TB) { return _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAXX() (TZ, TZ, TA, TX, TX) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAXY() (TZ, TZ, TA, TX, TY) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAXZ() (TZ, TZ, TA, TX, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAXW() (TZ, TZ, TA, TX, TW) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAXA() (TZ, TZ, TA, TX, TA) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAXB() (TZ, TZ, TA, TX, TB) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAYX() (TZ, TZ, TA, TY, TX) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAYY() (TZ, TZ, TA, TY, TY) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAYZ() (TZ, TZ, TA, TY, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAYW() (TZ, TZ, TA, TY, TW) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAYA() (TZ, TZ, TA, TY, TA) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAYB() (TZ, TZ, TA, TY, TB) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAZX() (TZ, TZ, TA, TZ, TX) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAZY() (TZ, TZ, TA, TZ, TY) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAZZ() (TZ, TZ, TA, TZ, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAZW() (TZ, TZ, TA, TZ, TW) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAZA() (TZ, TZ, TA, TZ, TA) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAZB() (TZ, TZ, TA, TZ, TB) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAWX() (TZ, TZ, TA, TW, TX) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAWY() (TZ, TZ, TA, TW, TY) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAWZ() (TZ, TZ, TA, TW, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAWW() (TZ, TZ, TA, TW, TW) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAWA() (TZ, TZ, TA, TW, TA) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAWB() (TZ, TZ, TA, TW, TB) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAAX() (TZ, TZ, TA, TA, TX) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAAY() (TZ, TZ, TA, TA, TY) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAAZ() (TZ, TZ, TA, TA, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAAW() (TZ, TZ, TA, TA, TW) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAAA() (TZ, TZ, TA, TA, TA) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZAAB() (TZ, TZ, TA, TA, TB) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZABX() (TZ, TZ, TA, TB, TX) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZABY() (TZ, TZ, TA, TB, TY) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZABZ() (TZ, TZ, TA, TB, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZABW() (TZ, TZ, TA, TB, TW) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZABA() (TZ, TZ, TA, TB, TA) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZABB() (TZ, TZ, TA, TB, TB) { return _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBXX() (TZ, TZ, TB, TX, TX) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBXY() (TZ, TZ, TB, TX, TY) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBXZ() (TZ, TZ, TB, TX, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBXW() (TZ, TZ, TB, TX, TW) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBXA() (TZ, TZ, TB, TX, TA) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBXB() (TZ, TZ, TB, TX, TB) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBYX() (TZ, TZ, TB, TY, TX) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBYY() (TZ, TZ, TB, TY, TY) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBYZ() (TZ, TZ, TB, TY, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBYW() (TZ, TZ, TB, TY, TW) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBYA() (TZ, TZ, TB, TY, TA) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBYB() (TZ, TZ, TB, TY, TB) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBZX() (TZ, TZ, TB, TZ, TX) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBZY() (TZ, TZ, TB, TZ, TY) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBZZ() (TZ, TZ, TB, TZ, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBZW() (TZ, TZ, TB, TZ, TW) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBZA() (TZ, TZ, TB, TZ, TA) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBZB() (TZ, TZ, TB, TZ, TB) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBWX() (TZ, TZ, TB, TW, TX) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBWY() (TZ, TZ, TB, TW, TY) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBWZ() (TZ, TZ, TB, TW, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBWW() (TZ, TZ, TB, TW, TW) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBWA() (TZ, TZ, TB, TW, TA) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBWB() (TZ, TZ, TB, TW, TB) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBAX() (TZ, TZ, TB, TA, TX) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBAY() (TZ, TZ, TB, TA, TY) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBAZ() (TZ, TZ, TB, TA, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBAW() (TZ, TZ, TB, TA, TW) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBAA() (TZ, TZ, TB, TA, TA) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBAB() (TZ, TZ, TB, TA, TB) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBBX() (TZ, TZ, TB, TB, TX) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBBY() (TZ, TZ, TB, TB, TY) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBBZ() (TZ, TZ, TB, TB, TZ) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBBW() (TZ, TZ, TB, TB, TW) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBBA() (TZ, TZ, TB, TB, TA) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZZBBB() (TZ, TZ, TB, TB, TB) { return _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXXX() (TZ, TW, TX, TX, TX) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXXY() (TZ, TW, TX, TX, TY) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXXZ() (TZ, TW, TX, TX, TZ) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXXW() (TZ, TW, TX, TX, TW) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXXA() (TZ, TW, TX, TX, TA) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXXB() (TZ, TW, TX, TX, TB) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXYX() (TZ, TW, TX, TY, TX) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXYY() (TZ, TW, TX, TY, TY) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXYZ() (TZ, TW, TX, TY, TZ) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXYW() (TZ, TW, TX, TY, TW) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXYA() (TZ, TW, TX, TY, TA) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXYB() (TZ, TW, TX, TY, TB) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXZX() (TZ, TW, TX, TZ, TX) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXZY() (TZ, TW, TX, TZ, TY) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXZZ() (TZ, TW, TX, TZ, TZ) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXZW() (TZ, TW, TX, TZ, TW) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXZA() (TZ, TW, TX, TZ, TA) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXZB() (TZ, TW, TX, TZ, TB) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXWX() (TZ, TW, TX, TW, TX) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXWY() (TZ, TW, TX, TW, TY) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXWZ() (TZ, TW, TX, TW, TZ) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXWW() (TZ, TW, TX, TW, TW) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXWA() (TZ, TW, TX, TW, TA) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXWB() (TZ, TW, TX, TW, TB) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXAX() (TZ, TW, TX, TA, TX) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXAY() (TZ, TW, TX, TA, TY) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXAZ() (TZ, TW, TX, TA, TZ) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXAW() (TZ, TW, TX, TA, TW) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXAA() (TZ, TW, TX, TA, TA) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXAB() (TZ, TW, TX, TA, TB) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXBX() (TZ, TW, TX, TB, TX) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXBY() (TZ, TW, TX, TB, TY) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXBZ() (TZ, TW, TX, TB, TZ) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXBW() (TZ, TW, TX, TB, TW) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXBA() (TZ, TW, TX, TB, TA) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWXBB() (TZ, TW, TX, TB, TB) { return _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYXX() (TZ, TW, TY, TX, TX) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYXY() (TZ, TW, TY, TX, TY) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYXZ() (TZ, TW, TY, TX, TZ) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYXW() (TZ, TW, TY, TX, TW) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYXA() (TZ, TW, TY, TX, TA) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYXB() (TZ, TW, TY, TX, TB) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYYX() (TZ, TW, TY, TY, TX) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYYY() (TZ, TW, TY, TY, TY) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYYZ() (TZ, TW, TY, TY, TZ) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYYW() (TZ, TW, TY, TY, TW) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYYA() (TZ, TW, TY, TY, TA) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYYB() (TZ, TW, TY, TY, TB) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYZX() (TZ, TW, TY, TZ, TX) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYZY() (TZ, TW, TY, TZ, TY) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYZZ() (TZ, TW, TY, TZ, TZ) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYZW() (TZ, TW, TY, TZ, TW) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYZA() (TZ, TW, TY, TZ, TA) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYZB() (TZ, TW, TY, TZ, TB) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYWX() (TZ, TW, TY, TW, TX) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYWY() (TZ, TW, TY, TW, TY) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYWZ() (TZ, TW, TY, TW, TZ) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYWW() (TZ, TW, TY, TW, TW) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYWA() (TZ, TW, TY, TW, TA) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYWB() (TZ, TW, TY, TW, TB) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYAX() (TZ, TW, TY, TA, TX) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYAY() (TZ, TW, TY, TA, TY) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYAZ() (TZ, TW, TY, TA, TZ) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYAW() (TZ, TW, TY, TA, TW) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYAA() (TZ, TW, TY, TA, TA) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYAB() (TZ, TW, TY, TA, TB) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYBX() (TZ, TW, TY, TB, TX) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYBY() (TZ, TW, TY, TB, TY) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYBZ() (TZ, TW, TY, TB, TZ) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYBW() (TZ, TW, TY, TB, TW) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYBA() (TZ, TW, TY, TB, TA) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWYBB() (TZ, TW, TY, TB, TB) { return _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZXX() (TZ, TW, TZ, TX, TX) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZXY() (TZ, TW, TZ, TX, TY) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZXZ() (TZ, TW, TZ, TX, TZ) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZXW() (TZ, TW, TZ, TX, TW) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZXA() (TZ, TW, TZ, TX, TA) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZXB() (TZ, TW, TZ, TX, TB) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZYX() (TZ, TW, TZ, TY, TX) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZYY() (TZ, TW, TZ, TY, TY) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZYZ() (TZ, TW, TZ, TY, TZ) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZYW() (TZ, TW, TZ, TY, TW) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZYA() (TZ, TW, TZ, TY, TA) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZYB() (TZ, TW, TZ, TY, TB) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZZX() (TZ, TW, TZ, TZ, TX) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZZY() (TZ, TW, TZ, TZ, TY) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZZZ() (TZ, TW, TZ, TZ, TZ) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZZW() (TZ, TW, TZ, TZ, TW) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZZA() (TZ, TW, TZ, TZ, TA) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZZB() (TZ, TW, TZ, TZ, TB) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZWX() (TZ, TW, TZ, TW, TX) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZWY() (TZ, TW, TZ, TW, TY) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZWZ() (TZ, TW, TZ, TW, TZ) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZWW() (TZ, TW, TZ, TW, TW) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZWA() (TZ, TW, TZ, TW, TA) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZWB() (TZ, TW, TZ, TW, TB) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZAX() (TZ, TW, TZ, TA, TX) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZAY() (TZ, TW, TZ, TA, TY) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZAZ() (TZ, TW, TZ, TA, TZ) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZAW() (TZ, TW, TZ, TA, TW) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZAA() (TZ, TW, TZ, TA, TA) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZAB() (TZ, TW, TZ, TA, TB) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZBX() (TZ, TW, TZ, TB, TX) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZBY() (TZ, TW, TZ, TB, TY) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZBZ() (TZ, TW, TZ, TB, TZ) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZBW() (TZ, TW, TZ, TB, TW) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZBA() (TZ, TW, TZ, TB, TA) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWZBB() (TZ, TW, TZ, TB, TB) { return _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWXX() (TZ, TW, TW, TX, TX) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWXY() (TZ, TW, TW, TX, TY) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWXZ() (TZ, TW, TW, TX, TZ) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWXW() (TZ, TW, TW, TX, TW) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWXA() (TZ, TW, TW, TX, TA) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWXB() (TZ, TW, TW, TX, TB) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWYX() (TZ, TW, TW, TY, TX) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWYY() (TZ, TW, TW, TY, TY) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWYZ() (TZ, TW, TW, TY, TZ) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWYW() (TZ, TW, TW, TY, TW) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWYA() (TZ, TW, TW, TY, TA) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWYB() (TZ, TW, TW, TY, TB) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWZX() (TZ, TW, TW, TZ, TX) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWZY() (TZ, TW, TW, TZ, TY) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWZZ() (TZ, TW, TW, TZ, TZ) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWZW() (TZ, TW, TW, TZ, TW) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWZA() (TZ, TW, TW, TZ, TA) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWZB() (TZ, TW, TW, TZ, TB) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWWX() (TZ, TW, TW, TW, TX) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWWY() (TZ, TW, TW, TW, TY) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWWZ() (TZ, TW, TW, TW, TZ) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWWW() (TZ, TW, TW, TW, TW) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWWA() (TZ, TW, TW, TW, TA) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWWB() (TZ, TW, TW, TW, TB) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWAX() (TZ, TW, TW, TA, TX) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWAY() (TZ, TW, TW, TA, TY) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWAZ() (TZ, TW, TW, TA, TZ) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWAW() (TZ, TW, TW, TA, TW) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWAA() (TZ, TW, TW, TA, TA) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWAB() (TZ, TW, TW, TA, TB) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWBX() (TZ, TW, TW, TB, TX) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWBY() (TZ, TW, TW, TB, TY) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWBZ() (TZ, TW, TW, TB, TZ) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWBW() (TZ, TW, TW, TB, TW) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWBA() (TZ, TW, TW, TB, TA) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWWBB() (TZ, TW, TW, TB, TB) { return _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAXX() (TZ, TW, TA, TX, TX) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAXY() (TZ, TW, TA, TX, TY) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAXZ() (TZ, TW, TA, TX, TZ) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAXW() (TZ, TW, TA, TX, TW) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAXA() (TZ, TW, TA, TX, TA) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAXB() (TZ, TW, TA, TX, TB) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAYX() (TZ, TW, TA, TY, TX) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAYY() (TZ, TW, TA, TY, TY) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAYZ() (TZ, TW, TA, TY, TZ) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAYW() (TZ, TW, TA, TY, TW) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAYA() (TZ, TW, TA, TY, TA) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAYB() (TZ, TW, TA, TY, TB) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAZX() (TZ, TW, TA, TZ, TX) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAZY() (TZ, TW, TA, TZ, TY) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAZZ() (TZ, TW, TA, TZ, TZ) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAZW() (TZ, TW, TA, TZ, TW) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAZA() (TZ, TW, TA, TZ, TA) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAZB() (TZ, TW, TA, TZ, TB) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAWX() (TZ, TW, TA, TW, TX) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAWY() (TZ, TW, TA, TW, TY) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAWZ() (TZ, TW, TA, TW, TZ) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAWW() (TZ, TW, TA, TW, TW) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAWA() (TZ, TW, TA, TW, TA) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAWB() (TZ, TW, TA, TW, TB) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAAX() (TZ, TW, TA, TA, TX) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAAY() (TZ, TW, TA, TA, TY) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAAZ() (TZ, TW, TA, TA, TZ) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAAW() (TZ, TW, TA, TA, TW) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAAA() (TZ, TW, TA, TA, TA) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWAAB() (TZ, TW, TA, TA, TB) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWABX() (TZ, TW, TA, TB, TX) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWABY() (TZ, TW, TA, TB, TY) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWABZ() (TZ, TW, TA, TB, TZ) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWABW() (TZ, TW, TA, TB, TW) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWABA() (TZ, TW, TA, TB, TA) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWABB() (TZ, TW, TA, TB, TB) { return _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBXX() (TZ, TW, TB, TX, TX) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBXY() (TZ, TW, TB, TX, TY) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBXZ() (TZ, TW, TB, TX, TZ) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBXW() (TZ, TW, TB, TX, TW) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBXA() (TZ, TW, TB, TX, TA) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBXB() (TZ, TW, TB, TX, TB) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBYX() (TZ, TW, TB, TY, TX) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBYY() (TZ, TW, TB, TY, TY) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBYZ() (TZ, TW, TB, TY, TZ) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBYW() (TZ, TW, TB, TY, TW) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBYA() (TZ, TW, TB, TY, TA) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBYB() (TZ, TW, TB, TY, TB) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBZX() (TZ, TW, TB, TZ, TX) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBZY() (TZ, TW, TB, TZ, TY) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBZZ() (TZ, TW, TB, TZ, TZ) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBZW() (TZ, TW, TB, TZ, TW) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBZA() (TZ, TW, TB, TZ, TA) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBZB() (TZ, TW, TB, TZ, TB) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBWX() (TZ, TW, TB, TW, TX) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBWY() (TZ, TW, TB, TW, TY) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBWZ() (TZ, TW, TB, TW, TZ) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBWW() (TZ, TW, TB, TW, TW) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBWA() (TZ, TW, TB, TW, TA) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBWB() (TZ, TW, TB, TW, TB) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBAX() (TZ, TW, TB, TA, TX) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBAY() (TZ, TW, TB, TA, TY) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBAZ() (TZ, TW, TB, TA, TZ) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBAW() (TZ, TW, TB, TA, TW) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBAA() (TZ, TW, TB, TA, TA) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBAB() (TZ, TW, TB, TA, TB) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBBX() (TZ, TW, TB, TB, TX) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBBY() (TZ, TW, TB, TB, TY) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBBZ() (TZ, TW, TB, TB, TZ) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBBW() (TZ, TW, TB, TB, TW) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBBA() (TZ, TW, TB, TB, TA) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZWBBB() (TZ, TW, TB, TB, TB) { return _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXXX() (TZ, TA, TX, TX, TX) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXXY() (TZ, TA, TX, TX, TY) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXXZ() (TZ, TA, TX, TX, TZ) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXXW() (TZ, TA, TX, TX, TW) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXXA() (TZ, TA, TX, TX, TA) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXXB() (TZ, TA, TX, TX, TB) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXYX() (TZ, TA, TX, TY, TX) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXYY() (TZ, TA, TX, TY, TY) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXYZ() (TZ, TA, TX, TY, TZ) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXYW() (TZ, TA, TX, TY, TW) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXYA() (TZ, TA, TX, TY, TA) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXYB() (TZ, TA, TX, TY, TB) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXZX() (TZ, TA, TX, TZ, TX) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXZY() (TZ, TA, TX, TZ, TY) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXZZ() (TZ, TA, TX, TZ, TZ) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXZW() (TZ, TA, TX, TZ, TW) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXZA() (TZ, TA, TX, TZ, TA) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXZB() (TZ, TA, TX, TZ, TB) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXWX() (TZ, TA, TX, TW, TX) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXWY() (TZ, TA, TX, TW, TY) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXWZ() (TZ, TA, TX, TW, TZ) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXWW() (TZ, TA, TX, TW, TW) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXWA() (TZ, TA, TX, TW, TA) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXWB() (TZ, TA, TX, TW, TB) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXAX() (TZ, TA, TX, TA, TX) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXAY() (TZ, TA, TX, TA, TY) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXAZ() (TZ, TA, TX, TA, TZ) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXAW() (TZ, TA, TX, TA, TW) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXAA() (TZ, TA, TX, TA, TA) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXAB() (TZ, TA, TX, TA, TB) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXBX() (TZ, TA, TX, TB, TX) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXBY() (TZ, TA, TX, TB, TY) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXBZ() (TZ, TA, TX, TB, TZ) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXBW() (TZ, TA, TX, TB, TW) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXBA() (TZ, TA, TX, TB, TA) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAXBB() (TZ, TA, TX, TB, TB) { return _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYXX() (TZ, TA, TY, TX, TX) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYXY() (TZ, TA, TY, TX, TY) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYXZ() (TZ, TA, TY, TX, TZ) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYXW() (TZ, TA, TY, TX, TW) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYXA() (TZ, TA, TY, TX, TA) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYXB() (TZ, TA, TY, TX, TB) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYYX() (TZ, TA, TY, TY, TX) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYYY() (TZ, TA, TY, TY, TY) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYYZ() (TZ, TA, TY, TY, TZ) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYYW() (TZ, TA, TY, TY, TW) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYYA() (TZ, TA, TY, TY, TA) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYYB() (TZ, TA, TY, TY, TB) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYZX() (TZ, TA, TY, TZ, TX) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYZY() (TZ, TA, TY, TZ, TY) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYZZ() (TZ, TA, TY, TZ, TZ) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYZW() (TZ, TA, TY, TZ, TW) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYZA() (TZ, TA, TY, TZ, TA) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYZB() (TZ, TA, TY, TZ, TB) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYWX() (TZ, TA, TY, TW, TX) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYWY() (TZ, TA, TY, TW, TY) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYWZ() (TZ, TA, TY, TW, TZ) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYWW() (TZ, TA, TY, TW, TW) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYWA() (TZ, TA, TY, TW, TA) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYWB() (TZ, TA, TY, TW, TB) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYAX() (TZ, TA, TY, TA, TX) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYAY() (TZ, TA, TY, TA, TY) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYAZ() (TZ, TA, TY, TA, TZ) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYAW() (TZ, TA, TY, TA, TW) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYAA() (TZ, TA, TY, TA, TA) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYAB() (TZ, TA, TY, TA, TB) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYBX() (TZ, TA, TY, TB, TX) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYBY() (TZ, TA, TY, TB, TY) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYBZ() (TZ, TA, TY, TB, TZ) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYBW() (TZ, TA, TY, TB, TW) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYBA() (TZ, TA, TY, TB, TA) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAYBB() (TZ, TA, TY, TB, TB) { return _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZXX() (TZ, TA, TZ, TX, TX) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZXY() (TZ, TA, TZ, TX, TY) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZXZ() (TZ, TA, TZ, TX, TZ) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZXW() (TZ, TA, TZ, TX, TW) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZXA() (TZ, TA, TZ, TX, TA) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZXB() (TZ, TA, TZ, TX, TB) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZYX() (TZ, TA, TZ, TY, TX) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZYY() (TZ, TA, TZ, TY, TY) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZYZ() (TZ, TA, TZ, TY, TZ) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZYW() (TZ, TA, TZ, TY, TW) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZYA() (TZ, TA, TZ, TY, TA) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZYB() (TZ, TA, TZ, TY, TB) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZZX() (TZ, TA, TZ, TZ, TX) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZZY() (TZ, TA, TZ, TZ, TY) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZZZ() (TZ, TA, TZ, TZ, TZ) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZZW() (TZ, TA, TZ, TZ, TW) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZZA() (TZ, TA, TZ, TZ, TA) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZZB() (TZ, TA, TZ, TZ, TB) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZWX() (TZ, TA, TZ, TW, TX) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZWY() (TZ, TA, TZ, TW, TY) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZWZ() (TZ, TA, TZ, TW, TZ) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZWW() (TZ, TA, TZ, TW, TW) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZWA() (TZ, TA, TZ, TW, TA) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZWB() (TZ, TA, TZ, TW, TB) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZAX() (TZ, TA, TZ, TA, TX) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZAY() (TZ, TA, TZ, TA, TY) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZAZ() (TZ, TA, TZ, TA, TZ) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZAW() (TZ, TA, TZ, TA, TW) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZAA() (TZ, TA, TZ, TA, TA) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZAB() (TZ, TA, TZ, TA, TB) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZBX() (TZ, TA, TZ, TB, TX) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZBY() (TZ, TA, TZ, TB, TY) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZBZ() (TZ, TA, TZ, TB, TZ) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZBW() (TZ, TA, TZ, TB, TW) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZBA() (TZ, TA, TZ, TB, TA) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAZBB() (TZ, TA, TZ, TB, TB) { return _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWXX() (TZ, TA, TW, TX, TX) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWXY() (TZ, TA, TW, TX, TY) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWXZ() (TZ, TA, TW, TX, TZ) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWXW() (TZ, TA, TW, TX, TW) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWXA() (TZ, TA, TW, TX, TA) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWXB() (TZ, TA, TW, TX, TB) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWYX() (TZ, TA, TW, TY, TX) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWYY() (TZ, TA, TW, TY, TY) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWYZ() (TZ, TA, TW, TY, TZ) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWYW() (TZ, TA, TW, TY, TW) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWYA() (TZ, TA, TW, TY, TA) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWYB() (TZ, TA, TW, TY, TB) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWZX() (TZ, TA, TW, TZ, TX) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWZY() (TZ, TA, TW, TZ, TY) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWZZ() (TZ, TA, TW, TZ, TZ) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWZW() (TZ, TA, TW, TZ, TW) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWZA() (TZ, TA, TW, TZ, TA) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWZB() (TZ, TA, TW, TZ, TB) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWWX() (TZ, TA, TW, TW, TX) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWWY() (TZ, TA, TW, TW, TY) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWWZ() (TZ, TA, TW, TW, TZ) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWWW() (TZ, TA, TW, TW, TW) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWWA() (TZ, TA, TW, TW, TA) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWWB() (TZ, TA, TW, TW, TB) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWAX() (TZ, TA, TW, TA, TX) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWAY() (TZ, TA, TW, TA, TY) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWAZ() (TZ, TA, TW, TA, TZ) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWAW() (TZ, TA, TW, TA, TW) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWAA() (TZ, TA, TW, TA, TA) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWAB() (TZ, TA, TW, TA, TB) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWBX() (TZ, TA, TW, TB, TX) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWBY() (TZ, TA, TW, TB, TY) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWBZ() (TZ, TA, TW, TB, TZ) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWBW() (TZ, TA, TW, TB, TW) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWBA() (TZ, TA, TW, TB, TA) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAWBB() (TZ, TA, TW, TB, TB) { return _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAXX() (TZ, TA, TA, TX, TX) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAXY() (TZ, TA, TA, TX, TY) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAXZ() (TZ, TA, TA, TX, TZ) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAXW() (TZ, TA, TA, TX, TW) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAXA() (TZ, TA, TA, TX, TA) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAXB() (TZ, TA, TA, TX, TB) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAYX() (TZ, TA, TA, TY, TX) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAYY() (TZ, TA, TA, TY, TY) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAYZ() (TZ, TA, TA, TY, TZ) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAYW() (TZ, TA, TA, TY, TW) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAYA() (TZ, TA, TA, TY, TA) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAYB() (TZ, TA, TA, TY, TB) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAZX() (TZ, TA, TA, TZ, TX) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAZY() (TZ, TA, TA, TZ, TY) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAZZ() (TZ, TA, TA, TZ, TZ) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAZW() (TZ, TA, TA, TZ, TW) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAZA() (TZ, TA, TA, TZ, TA) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAZB() (TZ, TA, TA, TZ, TB) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAWX() (TZ, TA, TA, TW, TX) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAWY() (TZ, TA, TA, TW, TY) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAWZ() (TZ, TA, TA, TW, TZ) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAWW() (TZ, TA, TA, TW, TW) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAWA() (TZ, TA, TA, TW, TA) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAWB() (TZ, TA, TA, TW, TB) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAAX() (TZ, TA, TA, TA, TX) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAAY() (TZ, TA, TA, TA, TY) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAAZ() (TZ, TA, TA, TA, TZ) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAAW() (TZ, TA, TA, TA, TW) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAAA() (TZ, TA, TA, TA, TA) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAAAB() (TZ, TA, TA, TA, TB) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAABX() (TZ, TA, TA, TB, TX) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAABY() (TZ, TA, TA, TB, TY) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAABZ() (TZ, TA, TA, TB, TZ) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAABW() (TZ, TA, TA, TB, TW) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAABA() (TZ, TA, TA, TB, TA) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZAABB() (TZ, TA, TA, TB, TB) { return _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABXX() (TZ, TA, TB, TX, TX) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABXY() (TZ, TA, TB, TX, TY) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABXZ() (TZ, TA, TB, TX, TZ) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABXW() (TZ, TA, TB, TX, TW) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABXA() (TZ, TA, TB, TX, TA) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABXB() (TZ, TA, TB, TX, TB) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABYX() (TZ, TA, TB, TY, TX) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABYY() (TZ, TA, TB, TY, TY) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABYZ() (TZ, TA, TB, TY, TZ) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABYW() (TZ, TA, TB, TY, TW) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABYA() (TZ, TA, TB, TY, TA) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABYB() (TZ, TA, TB, TY, TB) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABZX() (TZ, TA, TB, TZ, TX) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABZY() (TZ, TA, TB, TZ, TY) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABZZ() (TZ, TA, TB, TZ, TZ) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABZW() (TZ, TA, TB, TZ, TW) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABZA() (TZ, TA, TB, TZ, TA) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABZB() (TZ, TA, TB, TZ, TB) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABWX() (TZ, TA, TB, TW, TX) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABWY() (TZ, TA, TB, TW, TY) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABWZ() (TZ, TA, TB, TW, TZ) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABWW() (TZ, TA, TB, TW, TW) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABWA() (TZ, TA, TB, TW, TA) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABWB() (TZ, TA, TB, TW, TB) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABAX() (TZ, TA, TB, TA, TX) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABAY() (TZ, TA, TB, TA, TY) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABAZ() (TZ, TA, TB, TA, TZ) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABAW() (TZ, TA, TB, TA, TW) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABAA() (TZ, TA, TB, TA, TA) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABAB() (TZ, TA, TB, TA, TB) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABBX() (TZ, TA, TB, TB, TX) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABBY() (TZ, TA, TB, TB, TY) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABBZ() (TZ, TA, TB, TB, TZ) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABBW() (TZ, TA, TB, TB, TW) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABBA() (TZ, TA, TB, TB, TA) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZABBB() (TZ, TA, TB, TB, TB) { return _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXXX() (TZ, TB, TX, TX, TX) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXXY() (TZ, TB, TX, TX, TY) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXXZ() (TZ, TB, TX, TX, TZ) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXXW() (TZ, TB, TX, TX, TW) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXXA() (TZ, TB, TX, TX, TA) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXXB() (TZ, TB, TX, TX, TB) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXYX() (TZ, TB, TX, TY, TX) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXYY() (TZ, TB, TX, TY, TY) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXYZ() (TZ, TB, TX, TY, TZ) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXYW() (TZ, TB, TX, TY, TW) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXYA() (TZ, TB, TX, TY, TA) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXYB() (TZ, TB, TX, TY, TB) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXZX() (TZ, TB, TX, TZ, TX) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXZY() (TZ, TB, TX, TZ, TY) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXZZ() (TZ, TB, TX, TZ, TZ) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXZW() (TZ, TB, TX, TZ, TW) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXZA() (TZ, TB, TX, TZ, TA) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXZB() (TZ, TB, TX, TZ, TB) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXWX() (TZ, TB, TX, TW, TX) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXWY() (TZ, TB, TX, TW, TY) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXWZ() (TZ, TB, TX, TW, TZ) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXWW() (TZ, TB, TX, TW, TW) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXWA() (TZ, TB, TX, TW, TA) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXWB() (TZ, TB, TX, TW, TB) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXAX() (TZ, TB, TX, TA, TX) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXAY() (TZ, TB, TX, TA, TY) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXAZ() (TZ, TB, TX, TA, TZ) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXAW() (TZ, TB, TX, TA, TW) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXAA() (TZ, TB, TX, TA, TA) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXAB() (TZ, TB, TX, TA, TB) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXBX() (TZ, TB, TX, TB, TX) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXBY() (TZ, TB, TX, TB, TY) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXBZ() (TZ, TB, TX, TB, TZ) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXBW() (TZ, TB, TX, TB, TW) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXBA() (TZ, TB, TX, TB, TA) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBXBB() (TZ, TB, TX, TB, TB) { return _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYXX() (TZ, TB, TY, TX, TX) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYXY() (TZ, TB, TY, TX, TY) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYXZ() (TZ, TB, TY, TX, TZ) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYXW() (TZ, TB, TY, TX, TW) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYXA() (TZ, TB, TY, TX, TA) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYXB() (TZ, TB, TY, TX, TB) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYYX() (TZ, TB, TY, TY, TX) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYYY() (TZ, TB, TY, TY, TY) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYYZ() (TZ, TB, TY, TY, TZ) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYYW() (TZ, TB, TY, TY, TW) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYYA() (TZ, TB, TY, TY, TA) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYYB() (TZ, TB, TY, TY, TB) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYZX() (TZ, TB, TY, TZ, TX) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYZY() (TZ, TB, TY, TZ, TY) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYZZ() (TZ, TB, TY, TZ, TZ) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYZW() (TZ, TB, TY, TZ, TW) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYZA() (TZ, TB, TY, TZ, TA) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYZB() (TZ, TB, TY, TZ, TB) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYWX() (TZ, TB, TY, TW, TX) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYWY() (TZ, TB, TY, TW, TY) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYWZ() (TZ, TB, TY, TW, TZ) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYWW() (TZ, TB, TY, TW, TW) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYWA() (TZ, TB, TY, TW, TA) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYWB() (TZ, TB, TY, TW, TB) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYAX() (TZ, TB, TY, TA, TX) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYAY() (TZ, TB, TY, TA, TY) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYAZ() (TZ, TB, TY, TA, TZ) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYAW() (TZ, TB, TY, TA, TW) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYAA() (TZ, TB, TY, TA, TA) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYAB() (TZ, TB, TY, TA, TB) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYBX() (TZ, TB, TY, TB, TX) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYBY() (TZ, TB, TY, TB, TY) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYBZ() (TZ, TB, TY, TB, TZ) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYBW() (TZ, TB, TY, TB, TW) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYBA() (TZ, TB, TY, TB, TA) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBYBB() (TZ, TB, TY, TB, TB) { return _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZXX() (TZ, TB, TZ, TX, TX) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZXY() (TZ, TB, TZ, TX, TY) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZXZ() (TZ, TB, TZ, TX, TZ) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZXW() (TZ, TB, TZ, TX, TW) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZXA() (TZ, TB, TZ, TX, TA) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZXB() (TZ, TB, TZ, TX, TB) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZYX() (TZ, TB, TZ, TY, TX) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZYY() (TZ, TB, TZ, TY, TY) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZYZ() (TZ, TB, TZ, TY, TZ) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZYW() (TZ, TB, TZ, TY, TW) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZYA() (TZ, TB, TZ, TY, TA) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZYB() (TZ, TB, TZ, TY, TB) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZZX() (TZ, TB, TZ, TZ, TX) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZZY() (TZ, TB, TZ, TZ, TY) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZZZ() (TZ, TB, TZ, TZ, TZ) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZZW() (TZ, TB, TZ, TZ, TW) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZZA() (TZ, TB, TZ, TZ, TA) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZZB() (TZ, TB, TZ, TZ, TB) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZWX() (TZ, TB, TZ, TW, TX) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZWY() (TZ, TB, TZ, TW, TY) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZWZ() (TZ, TB, TZ, TW, TZ) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZWW() (TZ, TB, TZ, TW, TW) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZWA() (TZ, TB, TZ, TW, TA) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZWB() (TZ, TB, TZ, TW, TB) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZAX() (TZ, TB, TZ, TA, TX) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZAY() (TZ, TB, TZ, TA, TY) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZAZ() (TZ, TB, TZ, TA, TZ) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZAW() (TZ, TB, TZ, TA, TW) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZAA() (TZ, TB, TZ, TA, TA) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZAB() (TZ, TB, TZ, TA, TB) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZBX() (TZ, TB, TZ, TB, TX) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZBY() (TZ, TB, TZ, TB, TY) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZBZ() (TZ, TB, TZ, TB, TZ) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZBW() (TZ, TB, TZ, TB, TW) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZBA() (TZ, TB, TZ, TB, TA) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBZBB() (TZ, TB, TZ, TB, TB) { return _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWXX() (TZ, TB, TW, TX, TX) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWXY() (TZ, TB, TW, TX, TY) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWXZ() (TZ, TB, TW, TX, TZ) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWXW() (TZ, TB, TW, TX, TW) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWXA() (TZ, TB, TW, TX, TA) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWXB() (TZ, TB, TW, TX, TB) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWYX() (TZ, TB, TW, TY, TX) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWYY() (TZ, TB, TW, TY, TY) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWYZ() (TZ, TB, TW, TY, TZ) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWYW() (TZ, TB, TW, TY, TW) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWYA() (TZ, TB, TW, TY, TA) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWYB() (TZ, TB, TW, TY, TB) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWZX() (TZ, TB, TW, TZ, TX) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWZY() (TZ, TB, TW, TZ, TY) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWZZ() (TZ, TB, TW, TZ, TZ) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWZW() (TZ, TB, TW, TZ, TW) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWZA() (TZ, TB, TW, TZ, TA) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWZB() (TZ, TB, TW, TZ, TB) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWWX() (TZ, TB, TW, TW, TX) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWWY() (TZ, TB, TW, TW, TY) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWWZ() (TZ, TB, TW, TW, TZ) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWWW() (TZ, TB, TW, TW, TW) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWWA() (TZ, TB, TW, TW, TA) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWWB() (TZ, TB, TW, TW, TB) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWAX() (TZ, TB, TW, TA, TX) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWAY() (TZ, TB, TW, TA, TY) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWAZ() (TZ, TB, TW, TA, TZ) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWAW() (TZ, TB, TW, TA, TW) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWAA() (TZ, TB, TW, TA, TA) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWAB() (TZ, TB, TW, TA, TB) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWBX() (TZ, TB, TW, TB, TX) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWBY() (TZ, TB, TW, TB, TY) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWBZ() (TZ, TB, TW, TB, TZ) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWBW() (TZ, TB, TW, TB, TW) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWBA() (TZ, TB, TW, TB, TA) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBWBB() (TZ, TB, TW, TB, TB) { return _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAXX() (TZ, TB, TA, TX, TX) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAXY() (TZ, TB, TA, TX, TY) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAXZ() (TZ, TB, TA, TX, TZ) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAXW() (TZ, TB, TA, TX, TW) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAXA() (TZ, TB, TA, TX, TA) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAXB() (TZ, TB, TA, TX, TB) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAYX() (TZ, TB, TA, TY, TX) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAYY() (TZ, TB, TA, TY, TY) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAYZ() (TZ, TB, TA, TY, TZ) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAYW() (TZ, TB, TA, TY, TW) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAYA() (TZ, TB, TA, TY, TA) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAYB() (TZ, TB, TA, TY, TB) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAZX() (TZ, TB, TA, TZ, TX) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAZY() (TZ, TB, TA, TZ, TY) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAZZ() (TZ, TB, TA, TZ, TZ) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAZW() (TZ, TB, TA, TZ, TW) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAZA() (TZ, TB, TA, TZ, TA) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAZB() (TZ, TB, TA, TZ, TB) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAWX() (TZ, TB, TA, TW, TX) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAWY() (TZ, TB, TA, TW, TY) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAWZ() (TZ, TB, TA, TW, TZ) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAWW() (TZ, TB, TA, TW, TW) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAWA() (TZ, TB, TA, TW, TA) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAWB() (TZ, TB, TA, TW, TB) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAAX() (TZ, TB, TA, TA, TX) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAAY() (TZ, TB, TA, TA, TY) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAAZ() (TZ, TB, TA, TA, TZ) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAAW() (TZ, TB, TA, TA, TW) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAAA() (TZ, TB, TA, TA, TA) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBAAB() (TZ, TB, TA, TA, TB) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBABX() (TZ, TB, TA, TB, TX) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBABY() (TZ, TB, TA, TB, TY) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBABZ() (TZ, TB, TA, TB, TZ) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBABW() (TZ, TB, TA, TB, TW) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBABA() (TZ, TB, TA, TB, TA) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBABB() (TZ, TB, TA, TB, TB) { return _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBXX() (TZ, TB, TB, TX, TX) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBXY() (TZ, TB, TB, TX, TY) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBXZ() (TZ, TB, TB, TX, TZ) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBXW() (TZ, TB, TB, TX, TW) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBXA() (TZ, TB, TB, TX, TA) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBXB() (TZ, TB, TB, TX, TB) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBYX() (TZ, TB, TB, TY, TX) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBYY() (TZ, TB, TB, TY, TY) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBYZ() (TZ, TB, TB, TY, TZ) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBYW() (TZ, TB, TB, TY, TW) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBYA() (TZ, TB, TB, TY, TA) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBYB() (TZ, TB, TB, TY, TB) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBZX() (TZ, TB, TB, TZ, TX) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBZY() (TZ, TB, TB, TZ, TY) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBZZ() (TZ, TB, TB, TZ, TZ) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBZW() (TZ, TB, TB, TZ, TW) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBZA() (TZ, TB, TB, TZ, TA) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBZB() (TZ, TB, TB, TZ, TB) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBWX() (TZ, TB, TB, TW, TX) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBWY() (TZ, TB, TB, TW, TY) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBWZ() (TZ, TB, TB, TW, TZ) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBWW() (TZ, TB, TB, TW, TW) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBWA() (TZ, TB, TB, TW, TA) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBWB() (TZ, TB, TB, TW, TB) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBAX() (TZ, TB, TB, TA, TX) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBAY() (TZ, TB, TB, TA, TY) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBAZ() (TZ, TB, TB, TA, TZ) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBAW() (TZ, TB, TB, TA, TW) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBAA() (TZ, TB, TB, TA, TA) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBAB() (TZ, TB, TB, TA, TB) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBBX() (TZ, TB, TB, TB, TX) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBBY() (TZ, TB, TB, TB, TY) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBBZ() (TZ, TB, TB, TB, TZ) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBBW() (TZ, TB, TB, TB, TW) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBBA() (TZ, TB, TB, TB, TA) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ZBBBB() (TZ, TB, TB, TB, TB) { return _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXXX() (TW, TX, TX, TX, TX) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXXY() (TW, TX, TX, TX, TY) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXXZ() (TW, TX, TX, TX, TZ) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXXW() (TW, TX, TX, TX, TW) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXXA() (TW, TX, TX, TX, TA) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXXB() (TW, TX, TX, TX, TB) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXYX() (TW, TX, TX, TY, TX) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXYY() (TW, TX, TX, TY, TY) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXYZ() (TW, TX, TX, TY, TZ) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXYW() (TW, TX, TX, TY, TW) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXYA() (TW, TX, TX, TY, TA) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXYB() (TW, TX, TX, TY, TB) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXZX() (TW, TX, TX, TZ, TX) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXZY() (TW, TX, TX, TZ, TY) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXZZ() (TW, TX, TX, TZ, TZ) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXZW() (TW, TX, TX, TZ, TW) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXZA() (TW, TX, TX, TZ, TA) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXZB() (TW, TX, TX, TZ, TB) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXWX() (TW, TX, TX, TW, TX) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXWY() (TW, TX, TX, TW, TY) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXWZ() (TW, TX, TX, TW, TZ) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXWW() (TW, TX, TX, TW, TW) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXWA() (TW, TX, TX, TW, TA) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXWB() (TW, TX, TX, TW, TB) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXAX() (TW, TX, TX, TA, TX) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXAY() (TW, TX, TX, TA, TY) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXAZ() (TW, TX, TX, TA, TZ) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXAW() (TW, TX, TX, TA, TW) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXAA() (TW, TX, TX, TA, TA) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXAB() (TW, TX, TX, TA, TB) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXBX() (TW, TX, TX, TB, TX) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXBY() (TW, TX, TX, TB, TY) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXBZ() (TW, TX, TX, TB, TZ) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXBW() (TW, TX, TX, TB, TW) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXBA() (TW, TX, TX, TB, TA) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXXBB() (TW, TX, TX, TB, TB) { return _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYXX() (TW, TX, TY, TX, TX) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYXY() (TW, TX, TY, TX, TY) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYXZ() (TW, TX, TY, TX, TZ) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYXW() (TW, TX, TY, TX, TW) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYXA() (TW, TX, TY, TX, TA) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYXB() (TW, TX, TY, TX, TB) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYYX() (TW, TX, TY, TY, TX) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYYY() (TW, TX, TY, TY, TY) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYYZ() (TW, TX, TY, TY, TZ) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYYW() (TW, TX, TY, TY, TW) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYYA() (TW, TX, TY, TY, TA) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYYB() (TW, TX, TY, TY, TB) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYZX() (TW, TX, TY, TZ, TX) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYZY() (TW, TX, TY, TZ, TY) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYZZ() (TW, TX, TY, TZ, TZ) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYZW() (TW, TX, TY, TZ, TW) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYZA() (TW, TX, TY, TZ, TA) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYZB() (TW, TX, TY, TZ, TB) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYWX() (TW, TX, TY, TW, TX) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYWY() (TW, TX, TY, TW, TY) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYWZ() (TW, TX, TY, TW, TZ) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYWW() (TW, TX, TY, TW, TW) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYWA() (TW, TX, TY, TW, TA) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYWB() (TW, TX, TY, TW, TB) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYAX() (TW, TX, TY, TA, TX) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYAY() (TW, TX, TY, TA, TY) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYAZ() (TW, TX, TY, TA, TZ) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYAW() (TW, TX, TY, TA, TW) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYAA() (TW, TX, TY, TA, TA) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYAB() (TW, TX, TY, TA, TB) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYBX() (TW, TX, TY, TB, TX) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYBY() (TW, TX, TY, TB, TY) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYBZ() (TW, TX, TY, TB, TZ) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYBW() (TW, TX, TY, TB, TW) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYBA() (TW, TX, TY, TB, TA) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXYBB() (TW, TX, TY, TB, TB) { return _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZXX() (TW, TX, TZ, TX, TX) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZXY() (TW, TX, TZ, TX, TY) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZXZ() (TW, TX, TZ, TX, TZ) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZXW() (TW, TX, TZ, TX, TW) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZXA() (TW, TX, TZ, TX, TA) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZXB() (TW, TX, TZ, TX, TB) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZYX() (TW, TX, TZ, TY, TX) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZYY() (TW, TX, TZ, TY, TY) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZYZ() (TW, TX, TZ, TY, TZ) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZYW() (TW, TX, TZ, TY, TW) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZYA() (TW, TX, TZ, TY, TA) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZYB() (TW, TX, TZ, TY, TB) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZZX() (TW, TX, TZ, TZ, TX) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZZY() (TW, TX, TZ, TZ, TY) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZZZ() (TW, TX, TZ, TZ, TZ) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZZW() (TW, TX, TZ, TZ, TW) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZZA() (TW, TX, TZ, TZ, TA) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZZB() (TW, TX, TZ, TZ, TB) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZWX() (TW, TX, TZ, TW, TX) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZWY() (TW, TX, TZ, TW, TY) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZWZ() (TW, TX, TZ, TW, TZ) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZWW() (TW, TX, TZ, TW, TW) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZWA() (TW, TX, TZ, TW, TA) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZWB() (TW, TX, TZ, TW, TB) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZAX() (TW, TX, TZ, TA, TX) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZAY() (TW, TX, TZ, TA, TY) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZAZ() (TW, TX, TZ, TA, TZ) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZAW() (TW, TX, TZ, TA, TW) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZAA() (TW, TX, TZ, TA, TA) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZAB() (TW, TX, TZ, TA, TB) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZBX() (TW, TX, TZ, TB, TX) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZBY() (TW, TX, TZ, TB, TY) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZBZ() (TW, TX, TZ, TB, TZ) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZBW() (TW, TX, TZ, TB, TW) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZBA() (TW, TX, TZ, TB, TA) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXZBB() (TW, TX, TZ, TB, TB) { return _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWXX() (TW, TX, TW, TX, TX) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWXY() (TW, TX, TW, TX, TY) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWXZ() (TW, TX, TW, TX, TZ) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWXW() (TW, TX, TW, TX, TW) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWXA() (TW, TX, TW, TX, TA) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWXB() (TW, TX, TW, TX, TB) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWYX() (TW, TX, TW, TY, TX) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWYY() (TW, TX, TW, TY, TY) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWYZ() (TW, TX, TW, TY, TZ) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWYW() (TW, TX, TW, TY, TW) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWYA() (TW, TX, TW, TY, TA) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWYB() (TW, TX, TW, TY, TB) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWZX() (TW, TX, TW, TZ, TX) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWZY() (TW, TX, TW, TZ, TY) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWZZ() (TW, TX, TW, TZ, TZ) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWZW() (TW, TX, TW, TZ, TW) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWZA() (TW, TX, TW, TZ, TA) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWZB() (TW, TX, TW, TZ, TB) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWWX() (TW, TX, TW, TW, TX) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWWY() (TW, TX, TW, TW, TY) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWWZ() (TW, TX, TW, TW, TZ) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWWW() (TW, TX, TW, TW, TW) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWWA() (TW, TX, TW, TW, TA) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWWB() (TW, TX, TW, TW, TB) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWAX() (TW, TX, TW, TA, TX) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWAY() (TW, TX, TW, TA, TY) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWAZ() (TW, TX, TW, TA, TZ) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWAW() (TW, TX, TW, TA, TW) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWAA() (TW, TX, TW, TA, TA) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWAB() (TW, TX, TW, TA, TB) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWBX() (TW, TX, TW, TB, TX) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWBY() (TW, TX, TW, TB, TY) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWBZ() (TW, TX, TW, TB, TZ) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWBW() (TW, TX, TW, TB, TW) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWBA() (TW, TX, TW, TB, TA) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXWBB() (TW, TX, TW, TB, TB) { return _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAXX() (TW, TX, TA, TX, TX) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAXY() (TW, TX, TA, TX, TY) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAXZ() (TW, TX, TA, TX, TZ) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAXW() (TW, TX, TA, TX, TW) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAXA() (TW, TX, TA, TX, TA) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAXB() (TW, TX, TA, TX, TB) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAYX() (TW, TX, TA, TY, TX) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAYY() (TW, TX, TA, TY, TY) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAYZ() (TW, TX, TA, TY, TZ) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAYW() (TW, TX, TA, TY, TW) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAYA() (TW, TX, TA, TY, TA) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAYB() (TW, TX, TA, TY, TB) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAZX() (TW, TX, TA, TZ, TX) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAZY() (TW, TX, TA, TZ, TY) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAZZ() (TW, TX, TA, TZ, TZ) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAZW() (TW, TX, TA, TZ, TW) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAZA() (TW, TX, TA, TZ, TA) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAZB() (TW, TX, TA, TZ, TB) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAWX() (TW, TX, TA, TW, TX) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAWY() (TW, TX, TA, TW, TY) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAWZ() (TW, TX, TA, TW, TZ) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAWW() (TW, TX, TA, TW, TW) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAWA() (TW, TX, TA, TW, TA) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAWB() (TW, TX, TA, TW, TB) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAAX() (TW, TX, TA, TA, TX) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAAY() (TW, TX, TA, TA, TY) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAAZ() (TW, TX, TA, TA, TZ) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAAW() (TW, TX, TA, TA, TW) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAAA() (TW, TX, TA, TA, TA) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXAAB() (TW, TX, TA, TA, TB) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXABX() (TW, TX, TA, TB, TX) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXABY() (TW, TX, TA, TB, TY) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXABZ() (TW, TX, TA, TB, TZ) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXABW() (TW, TX, TA, TB, TW) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXABA() (TW, TX, TA, TB, TA) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXABB() (TW, TX, TA, TB, TB) { return _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBXX() (TW, TX, TB, TX, TX) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBXY() (TW, TX, TB, TX, TY) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBXZ() (TW, TX, TB, TX, TZ) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBXW() (TW, TX, TB, TX, TW) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBXA() (TW, TX, TB, TX, TA) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBXB() (TW, TX, TB, TX, TB) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBYX() (TW, TX, TB, TY, TX) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBYY() (TW, TX, TB, TY, TY) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBYZ() (TW, TX, TB, TY, TZ) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBYW() (TW, TX, TB, TY, TW) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBYA() (TW, TX, TB, TY, TA) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBYB() (TW, TX, TB, TY, TB) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBZX() (TW, TX, TB, TZ, TX) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBZY() (TW, TX, TB, TZ, TY) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBZZ() (TW, TX, TB, TZ, TZ) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBZW() (TW, TX, TB, TZ, TW) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBZA() (TW, TX, TB, TZ, TA) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBZB() (TW, TX, TB, TZ, TB) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBWX() (TW, TX, TB, TW, TX) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBWY() (TW, TX, TB, TW, TY) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBWZ() (TW, TX, TB, TW, TZ) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBWW() (TW, TX, TB, TW, TW) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBWA() (TW, TX, TB, TW, TA) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBWB() (TW, TX, TB, TW, TB) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBAX() (TW, TX, TB, TA, TX) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBAY() (TW, TX, TB, TA, TY) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBAZ() (TW, TX, TB, TA, TZ) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBAW() (TW, TX, TB, TA, TW) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBAA() (TW, TX, TB, TA, TA) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBAB() (TW, TX, TB, TA, TB) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBBX() (TW, TX, TB, TB, TX) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBBY() (TW, TX, TB, TB, TY) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBBZ() (TW, TX, TB, TB, TZ) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBBW() (TW, TX, TB, TB, TW) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBBA() (TW, TX, TB, TB, TA) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WXBBB() (TW, TX, TB, TB, TB) { return _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXXX() (TW, TY, TX, TX, TX) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXXY() (TW, TY, TX, TX, TY) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXXZ() (TW, TY, TX, TX, TZ) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXXW() (TW, TY, TX, TX, TW) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXXA() (TW, TY, TX, TX, TA) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXXB() (TW, TY, TX, TX, TB) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXYX() (TW, TY, TX, TY, TX) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXYY() (TW, TY, TX, TY, TY) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXYZ() (TW, TY, TX, TY, TZ) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXYW() (TW, TY, TX, TY, TW) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXYA() (TW, TY, TX, TY, TA) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXYB() (TW, TY, TX, TY, TB) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXZX() (TW, TY, TX, TZ, TX) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXZY() (TW, TY, TX, TZ, TY) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXZZ() (TW, TY, TX, TZ, TZ) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXZW() (TW, TY, TX, TZ, TW) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXZA() (TW, TY, TX, TZ, TA) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXZB() (TW, TY, TX, TZ, TB) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXWX() (TW, TY, TX, TW, TX) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXWY() (TW, TY, TX, TW, TY) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXWZ() (TW, TY, TX, TW, TZ) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXWW() (TW, TY, TX, TW, TW) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXWA() (TW, TY, TX, TW, TA) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXWB() (TW, TY, TX, TW, TB) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXAX() (TW, TY, TX, TA, TX) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXAY() (TW, TY, TX, TA, TY) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXAZ() (TW, TY, TX, TA, TZ) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXAW() (TW, TY, TX, TA, TW) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXAA() (TW, TY, TX, TA, TA) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXAB() (TW, TY, TX, TA, TB) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXBX() (TW, TY, TX, TB, TX) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXBY() (TW, TY, TX, TB, TY) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXBZ() (TW, TY, TX, TB, TZ) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXBW() (TW, TY, TX, TB, TW) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXBA() (TW, TY, TX, TB, TA) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYXBB() (TW, TY, TX, TB, TB) { return _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYXX() (TW, TY, TY, TX, TX) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYXY() (TW, TY, TY, TX, TY) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYXZ() (TW, TY, TY, TX, TZ) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYXW() (TW, TY, TY, TX, TW) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYXA() (TW, TY, TY, TX, TA) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYXB() (TW, TY, TY, TX, TB) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYYX() (TW, TY, TY, TY, TX) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYYY() (TW, TY, TY, TY, TY) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYYZ() (TW, TY, TY, TY, TZ) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYYW() (TW, TY, TY, TY, TW) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYYA() (TW, TY, TY, TY, TA) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYYB() (TW, TY, TY, TY, TB) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYZX() (TW, TY, TY, TZ, TX) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYZY() (TW, TY, TY, TZ, TY) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYZZ() (TW, TY, TY, TZ, TZ) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYZW() (TW, TY, TY, TZ, TW) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYZA() (TW, TY, TY, TZ, TA) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYZB() (TW, TY, TY, TZ, TB) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYWX() (TW, TY, TY, TW, TX) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYWY() (TW, TY, TY, TW, TY) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYWZ() (TW, TY, TY, TW, TZ) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYWW() (TW, TY, TY, TW, TW) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYWA() (TW, TY, TY, TW, TA) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYWB() (TW, TY, TY, TW, TB) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYAX() (TW, TY, TY, TA, TX) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYAY() (TW, TY, TY, TA, TY) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYAZ() (TW, TY, TY, TA, TZ) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYAW() (TW, TY, TY, TA, TW) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYAA() (TW, TY, TY, TA, TA) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYAB() (TW, TY, TY, TA, TB) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYBX() (TW, TY, TY, TB, TX) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYBY() (TW, TY, TY, TB, TY) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYBZ() (TW, TY, TY, TB, TZ) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYBW() (TW, TY, TY, TB, TW) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYBA() (TW, TY, TY, TB, TA) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYYBB() (TW, TY, TY, TB, TB) { return _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZXX() (TW, TY, TZ, TX, TX) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZXY() (TW, TY, TZ, TX, TY) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZXZ() (TW, TY, TZ, TX, TZ) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZXW() (TW, TY, TZ, TX, TW) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZXA() (TW, TY, TZ, TX, TA) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZXB() (TW, TY, TZ, TX, TB) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZYX() (TW, TY, TZ, TY, TX) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZYY() (TW, TY, TZ, TY, TY) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZYZ() (TW, TY, TZ, TY, TZ) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZYW() (TW, TY, TZ, TY, TW) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZYA() (TW, TY, TZ, TY, TA) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZYB() (TW, TY, TZ, TY, TB) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZZX() (TW, TY, TZ, TZ, TX) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZZY() (TW, TY, TZ, TZ, TY) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZZZ() (TW, TY, TZ, TZ, TZ) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZZW() (TW, TY, TZ, TZ, TW) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZZA() (TW, TY, TZ, TZ, TA) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZZB() (TW, TY, TZ, TZ, TB) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZWX() (TW, TY, TZ, TW, TX) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZWY() (TW, TY, TZ, TW, TY) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZWZ() (TW, TY, TZ, TW, TZ) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZWW() (TW, TY, TZ, TW, TW) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZWA() (TW, TY, TZ, TW, TA) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZWB() (TW, TY, TZ, TW, TB) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZAX() (TW, TY, TZ, TA, TX) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZAY() (TW, TY, TZ, TA, TY) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZAZ() (TW, TY, TZ, TA, TZ) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZAW() (TW, TY, TZ, TA, TW) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZAA() (TW, TY, TZ, TA, TA) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZAB() (TW, TY, TZ, TA, TB) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZBX() (TW, TY, TZ, TB, TX) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZBY() (TW, TY, TZ, TB, TY) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZBZ() (TW, TY, TZ, TB, TZ) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZBW() (TW, TY, TZ, TB, TW) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZBA() (TW, TY, TZ, TB, TA) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYZBB() (TW, TY, TZ, TB, TB) { return _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWXX() (TW, TY, TW, TX, TX) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWXY() (TW, TY, TW, TX, TY) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWXZ() (TW, TY, TW, TX, TZ) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWXW() (TW, TY, TW, TX, TW) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWXA() (TW, TY, TW, TX, TA) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWXB() (TW, TY, TW, TX, TB) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWYX() (TW, TY, TW, TY, TX) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWYY() (TW, TY, TW, TY, TY) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWYZ() (TW, TY, TW, TY, TZ) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWYW() (TW, TY, TW, TY, TW) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWYA() (TW, TY, TW, TY, TA) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWYB() (TW, TY, TW, TY, TB) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWZX() (TW, TY, TW, TZ, TX) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWZY() (TW, TY, TW, TZ, TY) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWZZ() (TW, TY, TW, TZ, TZ) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWZW() (TW, TY, TW, TZ, TW) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWZA() (TW, TY, TW, TZ, TA) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWZB() (TW, TY, TW, TZ, TB) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWWX() (TW, TY, TW, TW, TX) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWWY() (TW, TY, TW, TW, TY) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWWZ() (TW, TY, TW, TW, TZ) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWWW() (TW, TY, TW, TW, TW) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWWA() (TW, TY, TW, TW, TA) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWWB() (TW, TY, TW, TW, TB) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWAX() (TW, TY, TW, TA, TX) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWAY() (TW, TY, TW, TA, TY) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWAZ() (TW, TY, TW, TA, TZ) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWAW() (TW, TY, TW, TA, TW) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWAA() (TW, TY, TW, TA, TA) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWAB() (TW, TY, TW, TA, TB) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWBX() (TW, TY, TW, TB, TX) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWBY() (TW, TY, TW, TB, TY) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWBZ() (TW, TY, TW, TB, TZ) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWBW() (TW, TY, TW, TB, TW) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWBA() (TW, TY, TW, TB, TA) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYWBB() (TW, TY, TW, TB, TB) { return _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAXX() (TW, TY, TA, TX, TX) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAXY() (TW, TY, TA, TX, TY) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAXZ() (TW, TY, TA, TX, TZ) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAXW() (TW, TY, TA, TX, TW) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAXA() (TW, TY, TA, TX, TA) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAXB() (TW, TY, TA, TX, TB) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAYX() (TW, TY, TA, TY, TX) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAYY() (TW, TY, TA, TY, TY) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAYZ() (TW, TY, TA, TY, TZ) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAYW() (TW, TY, TA, TY, TW) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAYA() (TW, TY, TA, TY, TA) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAYB() (TW, TY, TA, TY, TB) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAZX() (TW, TY, TA, TZ, TX) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAZY() (TW, TY, TA, TZ, TY) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAZZ() (TW, TY, TA, TZ, TZ) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAZW() (TW, TY, TA, TZ, TW) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAZA() (TW, TY, TA, TZ, TA) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAZB() (TW, TY, TA, TZ, TB) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAWX() (TW, TY, TA, TW, TX) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAWY() (TW, TY, TA, TW, TY) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAWZ() (TW, TY, TA, TW, TZ) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAWW() (TW, TY, TA, TW, TW) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAWA() (TW, TY, TA, TW, TA) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAWB() (TW, TY, TA, TW, TB) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAAX() (TW, TY, TA, TA, TX) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAAY() (TW, TY, TA, TA, TY) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAAZ() (TW, TY, TA, TA, TZ) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAAW() (TW, TY, TA, TA, TW) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAAA() (TW, TY, TA, TA, TA) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYAAB() (TW, TY, TA, TA, TB) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYABX() (TW, TY, TA, TB, TX) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYABY() (TW, TY, TA, TB, TY) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYABZ() (TW, TY, TA, TB, TZ) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYABW() (TW, TY, TA, TB, TW) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYABA() (TW, TY, TA, TB, TA) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYABB() (TW, TY, TA, TB, TB) { return _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBXX() (TW, TY, TB, TX, TX) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBXY() (TW, TY, TB, TX, TY) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBXZ() (TW, TY, TB, TX, TZ) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBXW() (TW, TY, TB, TX, TW) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBXA() (TW, TY, TB, TX, TA) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBXB() (TW, TY, TB, TX, TB) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBYX() (TW, TY, TB, TY, TX) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBYY() (TW, TY, TB, TY, TY) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBYZ() (TW, TY, TB, TY, TZ) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBYW() (TW, TY, TB, TY, TW) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBYA() (TW, TY, TB, TY, TA) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBYB() (TW, TY, TB, TY, TB) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBZX() (TW, TY, TB, TZ, TX) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBZY() (TW, TY, TB, TZ, TY) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBZZ() (TW, TY, TB, TZ, TZ) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBZW() (TW, TY, TB, TZ, TW) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBZA() (TW, TY, TB, TZ, TA) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBZB() (TW, TY, TB, TZ, TB) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBWX() (TW, TY, TB, TW, TX) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBWY() (TW, TY, TB, TW, TY) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBWZ() (TW, TY, TB, TW, TZ) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBWW() (TW, TY, TB, TW, TW) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBWA() (TW, TY, TB, TW, TA) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBWB() (TW, TY, TB, TW, TB) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBAX() (TW, TY, TB, TA, TX) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBAY() (TW, TY, TB, TA, TY) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBAZ() (TW, TY, TB, TA, TZ) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBAW() (TW, TY, TB, TA, TW) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBAA() (TW, TY, TB, TA, TA) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBAB() (TW, TY, TB, TA, TB) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBBX() (TW, TY, TB, TB, TX) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBBY() (TW, TY, TB, TB, TY) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBBZ() (TW, TY, TB, TB, TZ) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBBW() (TW, TY, TB, TB, TW) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBBA() (TW, TY, TB, TB, TA) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WYBBB() (TW, TY, TB, TB, TB) { return _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXXX() (TW, TZ, TX, TX, TX) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXXY() (TW, TZ, TX, TX, TY) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXXZ() (TW, TZ, TX, TX, TZ) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXXW() (TW, TZ, TX, TX, TW) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXXA() (TW, TZ, TX, TX, TA) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXXB() (TW, TZ, TX, TX, TB) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXYX() (TW, TZ, TX, TY, TX) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXYY() (TW, TZ, TX, TY, TY) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXYZ() (TW, TZ, TX, TY, TZ) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXYW() (TW, TZ, TX, TY, TW) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXYA() (TW, TZ, TX, TY, TA) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXYB() (TW, TZ, TX, TY, TB) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXZX() (TW, TZ, TX, TZ, TX) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXZY() (TW, TZ, TX, TZ, TY) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXZZ() (TW, TZ, TX, TZ, TZ) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXZW() (TW, TZ, TX, TZ, TW) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXZA() (TW, TZ, TX, TZ, TA) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXZB() (TW, TZ, TX, TZ, TB) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXWX() (TW, TZ, TX, TW, TX) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXWY() (TW, TZ, TX, TW, TY) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXWZ() (TW, TZ, TX, TW, TZ) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXWW() (TW, TZ, TX, TW, TW) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXWA() (TW, TZ, TX, TW, TA) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXWB() (TW, TZ, TX, TW, TB) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXAX() (TW, TZ, TX, TA, TX) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXAY() (TW, TZ, TX, TA, TY) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXAZ() (TW, TZ, TX, TA, TZ) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXAW() (TW, TZ, TX, TA, TW) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXAA() (TW, TZ, TX, TA, TA) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXAB() (TW, TZ, TX, TA, TB) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXBX() (TW, TZ, TX, TB, TX) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXBY() (TW, TZ, TX, TB, TY) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXBZ() (TW, TZ, TX, TB, TZ) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXBW() (TW, TZ, TX, TB, TW) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXBA() (TW, TZ, TX, TB, TA) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZXBB() (TW, TZ, TX, TB, TB) { return _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYXX() (TW, TZ, TY, TX, TX) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYXY() (TW, TZ, TY, TX, TY) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYXZ() (TW, TZ, TY, TX, TZ) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYXW() (TW, TZ, TY, TX, TW) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYXA() (TW, TZ, TY, TX, TA) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYXB() (TW, TZ, TY, TX, TB) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYYX() (TW, TZ, TY, TY, TX) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYYY() (TW, TZ, TY, TY, TY) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYYZ() (TW, TZ, TY, TY, TZ) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYYW() (TW, TZ, TY, TY, TW) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYYA() (TW, TZ, TY, TY, TA) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYYB() (TW, TZ, TY, TY, TB) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYZX() (TW, TZ, TY, TZ, TX) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYZY() (TW, TZ, TY, TZ, TY) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYZZ() (TW, TZ, TY, TZ, TZ) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYZW() (TW, TZ, TY, TZ, TW) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYZA() (TW, TZ, TY, TZ, TA) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYZB() (TW, TZ, TY, TZ, TB) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYWX() (TW, TZ, TY, TW, TX) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYWY() (TW, TZ, TY, TW, TY) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYWZ() (TW, TZ, TY, TW, TZ) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYWW() (TW, TZ, TY, TW, TW) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYWA() (TW, TZ, TY, TW, TA) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYWB() (TW, TZ, TY, TW, TB) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYAX() (TW, TZ, TY, TA, TX) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYAY() (TW, TZ, TY, TA, TY) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYAZ() (TW, TZ, TY, TA, TZ) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYAW() (TW, TZ, TY, TA, TW) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYAA() (TW, TZ, TY, TA, TA) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYAB() (TW, TZ, TY, TA, TB) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYBX() (TW, TZ, TY, TB, TX) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYBY() (TW, TZ, TY, TB, TY) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYBZ() (TW, TZ, TY, TB, TZ) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYBW() (TW, TZ, TY, TB, TW) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYBA() (TW, TZ, TY, TB, TA) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZYBB() (TW, TZ, TY, TB, TB) { return _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZXX() (TW, TZ, TZ, TX, TX) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZXY() (TW, TZ, TZ, TX, TY) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZXZ() (TW, TZ, TZ, TX, TZ) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZXW() (TW, TZ, TZ, TX, TW) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZXA() (TW, TZ, TZ, TX, TA) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZXB() (TW, TZ, TZ, TX, TB) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZYX() (TW, TZ, TZ, TY, TX) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZYY() (TW, TZ, TZ, TY, TY) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZYZ() (TW, TZ, TZ, TY, TZ) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZYW() (TW, TZ, TZ, TY, TW) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZYA() (TW, TZ, TZ, TY, TA) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZYB() (TW, TZ, TZ, TY, TB) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZZX() (TW, TZ, TZ, TZ, TX) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZZY() (TW, TZ, TZ, TZ, TY) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZZZ() (TW, TZ, TZ, TZ, TZ) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZZW() (TW, TZ, TZ, TZ, TW) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZZA() (TW, TZ, TZ, TZ, TA) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZZB() (TW, TZ, TZ, TZ, TB) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZWX() (TW, TZ, TZ, TW, TX) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZWY() (TW, TZ, TZ, TW, TY) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZWZ() (TW, TZ, TZ, TW, TZ) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZWW() (TW, TZ, TZ, TW, TW) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZWA() (TW, TZ, TZ, TW, TA) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZWB() (TW, TZ, TZ, TW, TB) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZAX() (TW, TZ, TZ, TA, TX) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZAY() (TW, TZ, TZ, TA, TY) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZAZ() (TW, TZ, TZ, TA, TZ) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZAW() (TW, TZ, TZ, TA, TW) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZAA() (TW, TZ, TZ, TA, TA) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZAB() (TW, TZ, TZ, TA, TB) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZBX() (TW, TZ, TZ, TB, TX) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZBY() (TW, TZ, TZ, TB, TY) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZBZ() (TW, TZ, TZ, TB, TZ) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZBW() (TW, TZ, TZ, TB, TW) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZBA() (TW, TZ, TZ, TB, TA) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZZBB() (TW, TZ, TZ, TB, TB) { return _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWXX() (TW, TZ, TW, TX, TX) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWXY() (TW, TZ, TW, TX, TY) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWXZ() (TW, TZ, TW, TX, TZ) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWXW() (TW, TZ, TW, TX, TW) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWXA() (TW, TZ, TW, TX, TA) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWXB() (TW, TZ, TW, TX, TB) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWYX() (TW, TZ, TW, TY, TX) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWYY() (TW, TZ, TW, TY, TY) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWYZ() (TW, TZ, TW, TY, TZ) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWYW() (TW, TZ, TW, TY, TW) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWYA() (TW, TZ, TW, TY, TA) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWYB() (TW, TZ, TW, TY, TB) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWZX() (TW, TZ, TW, TZ, TX) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWZY() (TW, TZ, TW, TZ, TY) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWZZ() (TW, TZ, TW, TZ, TZ) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWZW() (TW, TZ, TW, TZ, TW) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWZA() (TW, TZ, TW, TZ, TA) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWZB() (TW, TZ, TW, TZ, TB) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWWX() (TW, TZ, TW, TW, TX) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWWY() (TW, TZ, TW, TW, TY) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWWZ() (TW, TZ, TW, TW, TZ) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWWW() (TW, TZ, TW, TW, TW) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWWA() (TW, TZ, TW, TW, TA) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWWB() (TW, TZ, TW, TW, TB) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWAX() (TW, TZ, TW, TA, TX) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWAY() (TW, TZ, TW, TA, TY) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWAZ() (TW, TZ, TW, TA, TZ) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWAW() (TW, TZ, TW, TA, TW) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWAA() (TW, TZ, TW, TA, TA) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWAB() (TW, TZ, TW, TA, TB) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWBX() (TW, TZ, TW, TB, TX) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWBY() (TW, TZ, TW, TB, TY) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWBZ() (TW, TZ, TW, TB, TZ) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWBW() (TW, TZ, TW, TB, TW) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWBA() (TW, TZ, TW, TB, TA) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZWBB() (TW, TZ, TW, TB, TB) { return _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAXX() (TW, TZ, TA, TX, TX) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAXY() (TW, TZ, TA, TX, TY) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAXZ() (TW, TZ, TA, TX, TZ) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAXW() (TW, TZ, TA, TX, TW) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAXA() (TW, TZ, TA, TX, TA) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAXB() (TW, TZ, TA, TX, TB) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAYX() (TW, TZ, TA, TY, TX) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAYY() (TW, TZ, TA, TY, TY) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAYZ() (TW, TZ, TA, TY, TZ) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAYW() (TW, TZ, TA, TY, TW) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAYA() (TW, TZ, TA, TY, TA) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAYB() (TW, TZ, TA, TY, TB) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAZX() (TW, TZ, TA, TZ, TX) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAZY() (TW, TZ, TA, TZ, TY) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAZZ() (TW, TZ, TA, TZ, TZ) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAZW() (TW, TZ, TA, TZ, TW) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAZA() (TW, TZ, TA, TZ, TA) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAZB() (TW, TZ, TA, TZ, TB) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAWX() (TW, TZ, TA, TW, TX) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAWY() (TW, TZ, TA, TW, TY) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAWZ() (TW, TZ, TA, TW, TZ) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAWW() (TW, TZ, TA, TW, TW) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAWA() (TW, TZ, TA, TW, TA) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAWB() (TW, TZ, TA, TW, TB) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAAX() (TW, TZ, TA, TA, TX) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAAY() (TW, TZ, TA, TA, TY) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAAZ() (TW, TZ, TA, TA, TZ) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAAW() (TW, TZ, TA, TA, TW) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAAA() (TW, TZ, TA, TA, TA) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZAAB() (TW, TZ, TA, TA, TB) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZABX() (TW, TZ, TA, TB, TX) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZABY() (TW, TZ, TA, TB, TY) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZABZ() (TW, TZ, TA, TB, TZ) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZABW() (TW, TZ, TA, TB, TW) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZABA() (TW, TZ, TA, TB, TA) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZABB() (TW, TZ, TA, TB, TB) { return _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBXX() (TW, TZ, TB, TX, TX) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBXY() (TW, TZ, TB, TX, TY) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBXZ() (TW, TZ, TB, TX, TZ) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBXW() (TW, TZ, TB, TX, TW) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBXA() (TW, TZ, TB, TX, TA) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBXB() (TW, TZ, TB, TX, TB) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBYX() (TW, TZ, TB, TY, TX) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBYY() (TW, TZ, TB, TY, TY) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBYZ() (TW, TZ, TB, TY, TZ) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBYW() (TW, TZ, TB, TY, TW) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBYA() (TW, TZ, TB, TY, TA) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBYB() (TW, TZ, TB, TY, TB) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBZX() (TW, TZ, TB, TZ, TX) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBZY() (TW, TZ, TB, TZ, TY) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBZZ() (TW, TZ, TB, TZ, TZ) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBZW() (TW, TZ, TB, TZ, TW) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBZA() (TW, TZ, TB, TZ, TA) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBZB() (TW, TZ, TB, TZ, TB) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBWX() (TW, TZ, TB, TW, TX) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBWY() (TW, TZ, TB, TW, TY) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBWZ() (TW, TZ, TB, TW, TZ) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBWW() (TW, TZ, TB, TW, TW) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBWA() (TW, TZ, TB, TW, TA) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBWB() (TW, TZ, TB, TW, TB) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBAX() (TW, TZ, TB, TA, TX) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBAY() (TW, TZ, TB, TA, TY) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBAZ() (TW, TZ, TB, TA, TZ) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBAW() (TW, TZ, TB, TA, TW) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBAA() (TW, TZ, TB, TA, TA) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBAB() (TW, TZ, TB, TA, TB) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBBX() (TW, TZ, TB, TB, TX) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBBY() (TW, TZ, TB, TB, TY) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBBZ() (TW, TZ, TB, TB, TZ) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBBW() (TW, TZ, TB, TB, TW) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBBA() (TW, TZ, TB, TB, TA) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WZBBB() (TW, TZ, TB, TB, TB) { return _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXXX() (TW, TW, TX, TX, TX) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXXY() (TW, TW, TX, TX, TY) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXXZ() (TW, TW, TX, TX, TZ) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXXW() (TW, TW, TX, TX, TW) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXXA() (TW, TW, TX, TX, TA) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXXB() (TW, TW, TX, TX, TB) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXYX() (TW, TW, TX, TY, TX) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXYY() (TW, TW, TX, TY, TY) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXYZ() (TW, TW, TX, TY, TZ) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXYW() (TW, TW, TX, TY, TW) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXYA() (TW, TW, TX, TY, TA) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXYB() (TW, TW, TX, TY, TB) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXZX() (TW, TW, TX, TZ, TX) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXZY() (TW, TW, TX, TZ, TY) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXZZ() (TW, TW, TX, TZ, TZ) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXZW() (TW, TW, TX, TZ, TW) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXZA() (TW, TW, TX, TZ, TA) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXZB() (TW, TW, TX, TZ, TB) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXWX() (TW, TW, TX, TW, TX) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXWY() (TW, TW, TX, TW, TY) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXWZ() (TW, TW, TX, TW, TZ) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXWW() (TW, TW, TX, TW, TW) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXWA() (TW, TW, TX, TW, TA) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXWB() (TW, TW, TX, TW, TB) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXAX() (TW, TW, TX, TA, TX) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXAY() (TW, TW, TX, TA, TY) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXAZ() (TW, TW, TX, TA, TZ) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXAW() (TW, TW, TX, TA, TW) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXAA() (TW, TW, TX, TA, TA) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXAB() (TW, TW, TX, TA, TB) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXBX() (TW, TW, TX, TB, TX) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXBY() (TW, TW, TX, TB, TY) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXBZ() (TW, TW, TX, TB, TZ) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXBW() (TW, TW, TX, TB, TW) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXBA() (TW, TW, TX, TB, TA) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWXBB() (TW, TW, TX, TB, TB) { return _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYXX() (TW, TW, TY, TX, TX) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYXY() (TW, TW, TY, TX, TY) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYXZ() (TW, TW, TY, TX, TZ) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYXW() (TW, TW, TY, TX, TW) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYXA() (TW, TW, TY, TX, TA) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYXB() (TW, TW, TY, TX, TB) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYYX() (TW, TW, TY, TY, TX) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYYY() (TW, TW, TY, TY, TY) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYYZ() (TW, TW, TY, TY, TZ) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYYW() (TW, TW, TY, TY, TW) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYYA() (TW, TW, TY, TY, TA) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYYB() (TW, TW, TY, TY, TB) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYZX() (TW, TW, TY, TZ, TX) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYZY() (TW, TW, TY, TZ, TY) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYZZ() (TW, TW, TY, TZ, TZ) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYZW() (TW, TW, TY, TZ, TW) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYZA() (TW, TW, TY, TZ, TA) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYZB() (TW, TW, TY, TZ, TB) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYWX() (TW, TW, TY, TW, TX) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYWY() (TW, TW, TY, TW, TY) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYWZ() (TW, TW, TY, TW, TZ) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYWW() (TW, TW, TY, TW, TW) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYWA() (TW, TW, TY, TW, TA) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYWB() (TW, TW, TY, TW, TB) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYAX() (TW, TW, TY, TA, TX) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYAY() (TW, TW, TY, TA, TY) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYAZ() (TW, TW, TY, TA, TZ) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYAW() (TW, TW, TY, TA, TW) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYAA() (TW, TW, TY, TA, TA) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYAB() (TW, TW, TY, TA, TB) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYBX() (TW, TW, TY, TB, TX) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYBY() (TW, TW, TY, TB, TY) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYBZ() (TW, TW, TY, TB, TZ) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYBW() (TW, TW, TY, TB, TW) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYBA() (TW, TW, TY, TB, TA) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWYBB() (TW, TW, TY, TB, TB) { return _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZXX() (TW, TW, TZ, TX, TX) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZXY() (TW, TW, TZ, TX, TY) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZXZ() (TW, TW, TZ, TX, TZ) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZXW() (TW, TW, TZ, TX, TW) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZXA() (TW, TW, TZ, TX, TA) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZXB() (TW, TW, TZ, TX, TB) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZYX() (TW, TW, TZ, TY, TX) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZYY() (TW, TW, TZ, TY, TY) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZYZ() (TW, TW, TZ, TY, TZ) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZYW() (TW, TW, TZ, TY, TW) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZYA() (TW, TW, TZ, TY, TA) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZYB() (TW, TW, TZ, TY, TB) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZZX() (TW, TW, TZ, TZ, TX) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZZY() (TW, TW, TZ, TZ, TY) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZZZ() (TW, TW, TZ, TZ, TZ) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZZW() (TW, TW, TZ, TZ, TW) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZZA() (TW, TW, TZ, TZ, TA) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZZB() (TW, TW, TZ, TZ, TB) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZWX() (TW, TW, TZ, TW, TX) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZWY() (TW, TW, TZ, TW, TY) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZWZ() (TW, TW, TZ, TW, TZ) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZWW() (TW, TW, TZ, TW, TW) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZWA() (TW, TW, TZ, TW, TA) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZWB() (TW, TW, TZ, TW, TB) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZAX() (TW, TW, TZ, TA, TX) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZAY() (TW, TW, TZ, TA, TY) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZAZ() (TW, TW, TZ, TA, TZ) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZAW() (TW, TW, TZ, TA, TW) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZAA() (TW, TW, TZ, TA, TA) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZAB() (TW, TW, TZ, TA, TB) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZBX() (TW, TW, TZ, TB, TX) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZBY() (TW, TW, TZ, TB, TY) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZBZ() (TW, TW, TZ, TB, TZ) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZBW() (TW, TW, TZ, TB, TW) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZBA() (TW, TW, TZ, TB, TA) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWZBB() (TW, TW, TZ, TB, TB) { return _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWXX() (TW, TW, TW, TX, TX) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWXY() (TW, TW, TW, TX, TY) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWXZ() (TW, TW, TW, TX, TZ) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWXW() (TW, TW, TW, TX, TW) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWXA() (TW, TW, TW, TX, TA) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWXB() (TW, TW, TW, TX, TB) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWYX() (TW, TW, TW, TY, TX) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWYY() (TW, TW, TW, TY, TY) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWYZ() (TW, TW, TW, TY, TZ) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWYW() (TW, TW, TW, TY, TW) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWYA() (TW, TW, TW, TY, TA) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWYB() (TW, TW, TW, TY, TB) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWZX() (TW, TW, TW, TZ, TX) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWZY() (TW, TW, TW, TZ, TY) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWZZ() (TW, TW, TW, TZ, TZ) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWZW() (TW, TW, TW, TZ, TW) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWZA() (TW, TW, TW, TZ, TA) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWZB() (TW, TW, TW, TZ, TB) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWWX() (TW, TW, TW, TW, TX) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWWY() (TW, TW, TW, TW, TY) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWWZ() (TW, TW, TW, TW, TZ) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWWW() (TW, TW, TW, TW, TW) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWWA() (TW, TW, TW, TW, TA) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWWB() (TW, TW, TW, TW, TB) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWAX() (TW, TW, TW, TA, TX) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWAY() (TW, TW, TW, TA, TY) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWAZ() (TW, TW, TW, TA, TZ) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWAW() (TW, TW, TW, TA, TW) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWAA() (TW, TW, TW, TA, TA) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWAB() (TW, TW, TW, TA, TB) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWBX() (TW, TW, TW, TB, TX) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWBY() (TW, TW, TW, TB, TY) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWBZ() (TW, TW, TW, TB, TZ) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWBW() (TW, TW, TW, TB, TW) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWBA() (TW, TW, TW, TB, TA) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWWBB() (TW, TW, TW, TB, TB) { return _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAXX() (TW, TW, TA, TX, TX) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAXY() (TW, TW, TA, TX, TY) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAXZ() (TW, TW, TA, TX, TZ) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAXW() (TW, TW, TA, TX, TW) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAXA() (TW, TW, TA, TX, TA) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAXB() (TW, TW, TA, TX, TB) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAYX() (TW, TW, TA, TY, TX) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAYY() (TW, TW, TA, TY, TY) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAYZ() (TW, TW, TA, TY, TZ) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAYW() (TW, TW, TA, TY, TW) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAYA() (TW, TW, TA, TY, TA) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAYB() (TW, TW, TA, TY, TB) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAZX() (TW, TW, TA, TZ, TX) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAZY() (TW, TW, TA, TZ, TY) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAZZ() (TW, TW, TA, TZ, TZ) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAZW() (TW, TW, TA, TZ, TW) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAZA() (TW, TW, TA, TZ, TA) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAZB() (TW, TW, TA, TZ, TB) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAWX() (TW, TW, TA, TW, TX) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAWY() (TW, TW, TA, TW, TY) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAWZ() (TW, TW, TA, TW, TZ) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAWW() (TW, TW, TA, TW, TW) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAWA() (TW, TW, TA, TW, TA) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAWB() (TW, TW, TA, TW, TB) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAAX() (TW, TW, TA, TA, TX) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAAY() (TW, TW, TA, TA, TY) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAAZ() (TW, TW, TA, TA, TZ) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAAW() (TW, TW, TA, TA, TW) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAAA() (TW, TW, TA, TA, TA) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWAAB() (TW, TW, TA, TA, TB) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWABX() (TW, TW, TA, TB, TX) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWABY() (TW, TW, TA, TB, TY) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWABZ() (TW, TW, TA, TB, TZ) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWABW() (TW, TW, TA, TB, TW) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWABA() (TW, TW, TA, TB, TA) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWABB() (TW, TW, TA, TB, TB) { return _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBXX() (TW, TW, TB, TX, TX) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBXY() (TW, TW, TB, TX, TY) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBXZ() (TW, TW, TB, TX, TZ) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBXW() (TW, TW, TB, TX, TW) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBXA() (TW, TW, TB, TX, TA) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBXB() (TW, TW, TB, TX, TB) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBYX() (TW, TW, TB, TY, TX) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBYY() (TW, TW, TB, TY, TY) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBYZ() (TW, TW, TB, TY, TZ) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBYW() (TW, TW, TB, TY, TW) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBYA() (TW, TW, TB, TY, TA) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBYB() (TW, TW, TB, TY, TB) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBZX() (TW, TW, TB, TZ, TX) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBZY() (TW, TW, TB, TZ, TY) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBZZ() (TW, TW, TB, TZ, TZ) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBZW() (TW, TW, TB, TZ, TW) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBZA() (TW, TW, TB, TZ, TA) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBZB() (TW, TW, TB, TZ, TB) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBWX() (TW, TW, TB, TW, TX) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBWY() (TW, TW, TB, TW, TY) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBWZ() (TW, TW, TB, TW, TZ) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBWW() (TW, TW, TB, TW, TW) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBWA() (TW, TW, TB, TW, TA) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBWB() (TW, TW, TB, TW, TB) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBAX() (TW, TW, TB, TA, TX) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBAY() (TW, TW, TB, TA, TY) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBAZ() (TW, TW, TB, TA, TZ) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBAW() (TW, TW, TB, TA, TW) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBAA() (TW, TW, TB, TA, TA) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBAB() (TW, TW, TB, TA, TB) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBBX() (TW, TW, TB, TB, TX) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBBY() (TW, TW, TB, TB, TY) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBBZ() (TW, TW, TB, TB, TZ) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBBW() (TW, TW, TB, TB, TW) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBBA() (TW, TW, TB, TB, TA) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WWBBB() (TW, TW, TB, TB, TB) { return _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXXX() (TW, TA, TX, TX, TX) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXXY() (TW, TA, TX, TX, TY) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXXZ() (TW, TA, TX, TX, TZ) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXXW() (TW, TA, TX, TX, TW) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXXA() (TW, TA, TX, TX, TA) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXXB() (TW, TA, TX, TX, TB) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXYX() (TW, TA, TX, TY, TX) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXYY() (TW, TA, TX, TY, TY) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXYZ() (TW, TA, TX, TY, TZ) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXYW() (TW, TA, TX, TY, TW) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXYA() (TW, TA, TX, TY, TA) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXYB() (TW, TA, TX, TY, TB) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXZX() (TW, TA, TX, TZ, TX) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXZY() (TW, TA, TX, TZ, TY) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXZZ() (TW, TA, TX, TZ, TZ) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXZW() (TW, TA, TX, TZ, TW) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXZA() (TW, TA, TX, TZ, TA) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXZB() (TW, TA, TX, TZ, TB) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXWX() (TW, TA, TX, TW, TX) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXWY() (TW, TA, TX, TW, TY) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXWZ() (TW, TA, TX, TW, TZ) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXWW() (TW, TA, TX, TW, TW) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXWA() (TW, TA, TX, TW, TA) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXWB() (TW, TA, TX, TW, TB) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXAX() (TW, TA, TX, TA, TX) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXAY() (TW, TA, TX, TA, TY) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXAZ() (TW, TA, TX, TA, TZ) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXAW() (TW, TA, TX, TA, TW) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXAA() (TW, TA, TX, TA, TA) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXAB() (TW, TA, TX, TA, TB) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXBX() (TW, TA, TX, TB, TX) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXBY() (TW, TA, TX, TB, TY) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXBZ() (TW, TA, TX, TB, TZ) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXBW() (TW, TA, TX, TB, TW) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXBA() (TW, TA, TX, TB, TA) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAXBB() (TW, TA, TX, TB, TB) { return _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYXX() (TW, TA, TY, TX, TX) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYXY() (TW, TA, TY, TX, TY) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYXZ() (TW, TA, TY, TX, TZ) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYXW() (TW, TA, TY, TX, TW) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYXA() (TW, TA, TY, TX, TA) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYXB() (TW, TA, TY, TX, TB) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYYX() (TW, TA, TY, TY, TX) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYYY() (TW, TA, TY, TY, TY) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYYZ() (TW, TA, TY, TY, TZ) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYYW() (TW, TA, TY, TY, TW) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYYA() (TW, TA, TY, TY, TA) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYYB() (TW, TA, TY, TY, TB) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYZX() (TW, TA, TY, TZ, TX) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYZY() (TW, TA, TY, TZ, TY) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYZZ() (TW, TA, TY, TZ, TZ) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYZW() (TW, TA, TY, TZ, TW) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYZA() (TW, TA, TY, TZ, TA) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYZB() (TW, TA, TY, TZ, TB) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYWX() (TW, TA, TY, TW, TX) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYWY() (TW, TA, TY, TW, TY) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYWZ() (TW, TA, TY, TW, TZ) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYWW() (TW, TA, TY, TW, TW) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYWA() (TW, TA, TY, TW, TA) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYWB() (TW, TA, TY, TW, TB) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYAX() (TW, TA, TY, TA, TX) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYAY() (TW, TA, TY, TA, TY) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYAZ() (TW, TA, TY, TA, TZ) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYAW() (TW, TA, TY, TA, TW) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYAA() (TW, TA, TY, TA, TA) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYAB() (TW, TA, TY, TA, TB) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYBX() (TW, TA, TY, TB, TX) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYBY() (TW, TA, TY, TB, TY) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYBZ() (TW, TA, TY, TB, TZ) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYBW() (TW, TA, TY, TB, TW) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYBA() (TW, TA, TY, TB, TA) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAYBB() (TW, TA, TY, TB, TB) { return _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZXX() (TW, TA, TZ, TX, TX) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZXY() (TW, TA, TZ, TX, TY) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZXZ() (TW, TA, TZ, TX, TZ) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZXW() (TW, TA, TZ, TX, TW) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZXA() (TW, TA, TZ, TX, TA) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZXB() (TW, TA, TZ, TX, TB) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZYX() (TW, TA, TZ, TY, TX) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZYY() (TW, TA, TZ, TY, TY) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZYZ() (TW, TA, TZ, TY, TZ) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZYW() (TW, TA, TZ, TY, TW) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZYA() (TW, TA, TZ, TY, TA) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZYB() (TW, TA, TZ, TY, TB) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZZX() (TW, TA, TZ, TZ, TX) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZZY() (TW, TA, TZ, TZ, TY) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZZZ() (TW, TA, TZ, TZ, TZ) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZZW() (TW, TA, TZ, TZ, TW) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZZA() (TW, TA, TZ, TZ, TA) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZZB() (TW, TA, TZ, TZ, TB) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZWX() (TW, TA, TZ, TW, TX) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZWY() (TW, TA, TZ, TW, TY) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZWZ() (TW, TA, TZ, TW, TZ) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZWW() (TW, TA, TZ, TW, TW) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZWA() (TW, TA, TZ, TW, TA) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZWB() (TW, TA, TZ, TW, TB) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZAX() (TW, TA, TZ, TA, TX) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZAY() (TW, TA, TZ, TA, TY) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZAZ() (TW, TA, TZ, TA, TZ) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZAW() (TW, TA, TZ, TA, TW) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZAA() (TW, TA, TZ, TA, TA) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZAB() (TW, TA, TZ, TA, TB) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZBX() (TW, TA, TZ, TB, TX) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZBY() (TW, TA, TZ, TB, TY) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZBZ() (TW, TA, TZ, TB, TZ) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZBW() (TW, TA, TZ, TB, TW) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZBA() (TW, TA, TZ, TB, TA) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAZBB() (TW, TA, TZ, TB, TB) { return _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWXX() (TW, TA, TW, TX, TX) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWXY() (TW, TA, TW, TX, TY) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWXZ() (TW, TA, TW, TX, TZ) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWXW() (TW, TA, TW, TX, TW) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWXA() (TW, TA, TW, TX, TA) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWXB() (TW, TA, TW, TX, TB) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWYX() (TW, TA, TW, TY, TX) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWYY() (TW, TA, TW, TY, TY) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWYZ() (TW, TA, TW, TY, TZ) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWYW() (TW, TA, TW, TY, TW) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWYA() (TW, TA, TW, TY, TA) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWYB() (TW, TA, TW, TY, TB) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWZX() (TW, TA, TW, TZ, TX) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWZY() (TW, TA, TW, TZ, TY) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWZZ() (TW, TA, TW, TZ, TZ) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWZW() (TW, TA, TW, TZ, TW) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWZA() (TW, TA, TW, TZ, TA) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWZB() (TW, TA, TW, TZ, TB) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWWX() (TW, TA, TW, TW, TX) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWWY() (TW, TA, TW, TW, TY) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWWZ() (TW, TA, TW, TW, TZ) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWWW() (TW, TA, TW, TW, TW) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWWA() (TW, TA, TW, TW, TA) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWWB() (TW, TA, TW, TW, TB) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWAX() (TW, TA, TW, TA, TX) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWAY() (TW, TA, TW, TA, TY) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWAZ() (TW, TA, TW, TA, TZ) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWAW() (TW, TA, TW, TA, TW) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWAA() (TW, TA, TW, TA, TA) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWAB() (TW, TA, TW, TA, TB) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWBX() (TW, TA, TW, TB, TX) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWBY() (TW, TA, TW, TB, TY) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWBZ() (TW, TA, TW, TB, TZ) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWBW() (TW, TA, TW, TB, TW) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWBA() (TW, TA, TW, TB, TA) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAWBB() (TW, TA, TW, TB, TB) { return _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAXX() (TW, TA, TA, TX, TX) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAXY() (TW, TA, TA, TX, TY) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAXZ() (TW, TA, TA, TX, TZ) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAXW() (TW, TA, TA, TX, TW) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAXA() (TW, TA, TA, TX, TA) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAXB() (TW, TA, TA, TX, TB) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAYX() (TW, TA, TA, TY, TX) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAYY() (TW, TA, TA, TY, TY) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAYZ() (TW, TA, TA, TY, TZ) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAYW() (TW, TA, TA, TY, TW) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAYA() (TW, TA, TA, TY, TA) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAYB() (TW, TA, TA, TY, TB) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAZX() (TW, TA, TA, TZ, TX) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAZY() (TW, TA, TA, TZ, TY) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAZZ() (TW, TA, TA, TZ, TZ) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAZW() (TW, TA, TA, TZ, TW) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAZA() (TW, TA, TA, TZ, TA) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAZB() (TW, TA, TA, TZ, TB) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAWX() (TW, TA, TA, TW, TX) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAWY() (TW, TA, TA, TW, TY) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAWZ() (TW, TA, TA, TW, TZ) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAWW() (TW, TA, TA, TW, TW) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAWA() (TW, TA, TA, TW, TA) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAWB() (TW, TA, TA, TW, TB) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAAX() (TW, TA, TA, TA, TX) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAAY() (TW, TA, TA, TA, TY) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAAZ() (TW, TA, TA, TA, TZ) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAAW() (TW, TA, TA, TA, TW) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAAA() (TW, TA, TA, TA, TA) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAAAB() (TW, TA, TA, TA, TB) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAABX() (TW, TA, TA, TB, TX) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAABY() (TW, TA, TA, TB, TY) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAABZ() (TW, TA, TA, TB, TZ) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAABW() (TW, TA, TA, TB, TW) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAABA() (TW, TA, TA, TB, TA) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WAABB() (TW, TA, TA, TB, TB) { return _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABXX() (TW, TA, TB, TX, TX) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABXY() (TW, TA, TB, TX, TY) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABXZ() (TW, TA, TB, TX, TZ) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABXW() (TW, TA, TB, TX, TW) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABXA() (TW, TA, TB, TX, TA) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABXB() (TW, TA, TB, TX, TB) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABYX() (TW, TA, TB, TY, TX) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABYY() (TW, TA, TB, TY, TY) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABYZ() (TW, TA, TB, TY, TZ) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABYW() (TW, TA, TB, TY, TW) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABYA() (TW, TA, TB, TY, TA) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABYB() (TW, TA, TB, TY, TB) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABZX() (TW, TA, TB, TZ, TX) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABZY() (TW, TA, TB, TZ, TY) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABZZ() (TW, TA, TB, TZ, TZ) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABZW() (TW, TA, TB, TZ, TW) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABZA() (TW, TA, TB, TZ, TA) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABZB() (TW, TA, TB, TZ, TB) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABWX() (TW, TA, TB, TW, TX) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABWY() (TW, TA, TB, TW, TY) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABWZ() (TW, TA, TB, TW, TZ) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABWW() (TW, TA, TB, TW, TW) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABWA() (TW, TA, TB, TW, TA) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABWB() (TW, TA, TB, TW, TB) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABAX() (TW, TA, TB, TA, TX) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABAY() (TW, TA, TB, TA, TY) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABAZ() (TW, TA, TB, TA, TZ) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABAW() (TW, TA, TB, TA, TW) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABAA() (TW, TA, TB, TA, TA) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABAB() (TW, TA, TB, TA, TB) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABBX() (TW, TA, TB, TB, TX) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABBY() (TW, TA, TB, TB, TY) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABBZ() (TW, TA, TB, TB, TZ) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABBW() (TW, TA, TB, TB, TW) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABBA() (TW, TA, TB, TB, TA) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WABBB() (TW, TA, TB, TB, TB) { return _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXXX() (TW, TB, TX, TX, TX) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXXY() (TW, TB, TX, TX, TY) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXXZ() (TW, TB, TX, TX, TZ) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXXW() (TW, TB, TX, TX, TW) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXXA() (TW, TB, TX, TX, TA) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXXB() (TW, TB, TX, TX, TB) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXYX() (TW, TB, TX, TY, TX) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXYY() (TW, TB, TX, TY, TY) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXYZ() (TW, TB, TX, TY, TZ) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXYW() (TW, TB, TX, TY, TW) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXYA() (TW, TB, TX, TY, TA) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXYB() (TW, TB, TX, TY, TB) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXZX() (TW, TB, TX, TZ, TX) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXZY() (TW, TB, TX, TZ, TY) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXZZ() (TW, TB, TX, TZ, TZ) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXZW() (TW, TB, TX, TZ, TW) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXZA() (TW, TB, TX, TZ, TA) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXZB() (TW, TB, TX, TZ, TB) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXWX() (TW, TB, TX, TW, TX) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXWY() (TW, TB, TX, TW, TY) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXWZ() (TW, TB, TX, TW, TZ) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXWW() (TW, TB, TX, TW, TW) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXWA() (TW, TB, TX, TW, TA) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXWB() (TW, TB, TX, TW, TB) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXAX() (TW, TB, TX, TA, TX) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXAY() (TW, TB, TX, TA, TY) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXAZ() (TW, TB, TX, TA, TZ) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXAW() (TW, TB, TX, TA, TW) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXAA() (TW, TB, TX, TA, TA) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXAB() (TW, TB, TX, TA, TB) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXBX() (TW, TB, TX, TB, TX) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXBY() (TW, TB, TX, TB, TY) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXBZ() (TW, TB, TX, TB, TZ) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXBW() (TW, TB, TX, TB, TW) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXBA() (TW, TB, TX, TB, TA) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBXBB() (TW, TB, TX, TB, TB) { return _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYXX() (TW, TB, TY, TX, TX) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYXY() (TW, TB, TY, TX, TY) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYXZ() (TW, TB, TY, TX, TZ) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYXW() (TW, TB, TY, TX, TW) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYXA() (TW, TB, TY, TX, TA) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYXB() (TW, TB, TY, TX, TB) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYYX() (TW, TB, TY, TY, TX) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYYY() (TW, TB, TY, TY, TY) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYYZ() (TW, TB, TY, TY, TZ) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYYW() (TW, TB, TY, TY, TW) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYYA() (TW, TB, TY, TY, TA) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYYB() (TW, TB, TY, TY, TB) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYZX() (TW, TB, TY, TZ, TX) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYZY() (TW, TB, TY, TZ, TY) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYZZ() (TW, TB, TY, TZ, TZ) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYZW() (TW, TB, TY, TZ, TW) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYZA() (TW, TB, TY, TZ, TA) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYZB() (TW, TB, TY, TZ, TB) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYWX() (TW, TB, TY, TW, TX) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYWY() (TW, TB, TY, TW, TY) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYWZ() (TW, TB, TY, TW, TZ) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYWW() (TW, TB, TY, TW, TW) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYWA() (TW, TB, TY, TW, TA) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYWB() (TW, TB, TY, TW, TB) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYAX() (TW, TB, TY, TA, TX) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYAY() (TW, TB, TY, TA, TY) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYAZ() (TW, TB, TY, TA, TZ) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYAW() (TW, TB, TY, TA, TW) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYAA() (TW, TB, TY, TA, TA) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYAB() (TW, TB, TY, TA, TB) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYBX() (TW, TB, TY, TB, TX) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYBY() (TW, TB, TY, TB, TY) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYBZ() (TW, TB, TY, TB, TZ) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYBW() (TW, TB, TY, TB, TW) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYBA() (TW, TB, TY, TB, TA) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBYBB() (TW, TB, TY, TB, TB) { return _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZXX() (TW, TB, TZ, TX, TX) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZXY() (TW, TB, TZ, TX, TY) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZXZ() (TW, TB, TZ, TX, TZ) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZXW() (TW, TB, TZ, TX, TW) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZXA() (TW, TB, TZ, TX, TA) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZXB() (TW, TB, TZ, TX, TB) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZYX() (TW, TB, TZ, TY, TX) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZYY() (TW, TB, TZ, TY, TY) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZYZ() (TW, TB, TZ, TY, TZ) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZYW() (TW, TB, TZ, TY, TW) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZYA() (TW, TB, TZ, TY, TA) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZYB() (TW, TB, TZ, TY, TB) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZZX() (TW, TB, TZ, TZ, TX) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZZY() (TW, TB, TZ, TZ, TY) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZZZ() (TW, TB, TZ, TZ, TZ) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZZW() (TW, TB, TZ, TZ, TW) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZZA() (TW, TB, TZ, TZ, TA) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZZB() (TW, TB, TZ, TZ, TB) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZWX() (TW, TB, TZ, TW, TX) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZWY() (TW, TB, TZ, TW, TY) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZWZ() (TW, TB, TZ, TW, TZ) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZWW() (TW, TB, TZ, TW, TW) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZWA() (TW, TB, TZ, TW, TA) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZWB() (TW, TB, TZ, TW, TB) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZAX() (TW, TB, TZ, TA, TX) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZAY() (TW, TB, TZ, TA, TY) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZAZ() (TW, TB, TZ, TA, TZ) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZAW() (TW, TB, TZ, TA, TW) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZAA() (TW, TB, TZ, TA, TA) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZAB() (TW, TB, TZ, TA, TB) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZBX() (TW, TB, TZ, TB, TX) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZBY() (TW, TB, TZ, TB, TY) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZBZ() (TW, TB, TZ, TB, TZ) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZBW() (TW, TB, TZ, TB, TW) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZBA() (TW, TB, TZ, TB, TA) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBZBB() (TW, TB, TZ, TB, TB) { return _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWXX() (TW, TB, TW, TX, TX) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWXY() (TW, TB, TW, TX, TY) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWXZ() (TW, TB, TW, TX, TZ) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWXW() (TW, TB, TW, TX, TW) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWXA() (TW, TB, TW, TX, TA) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWXB() (TW, TB, TW, TX, TB) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWYX() (TW, TB, TW, TY, TX) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWYY() (TW, TB, TW, TY, TY) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWYZ() (TW, TB, TW, TY, TZ) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWYW() (TW, TB, TW, TY, TW) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWYA() (TW, TB, TW, TY, TA) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWYB() (TW, TB, TW, TY, TB) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWZX() (TW, TB, TW, TZ, TX) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWZY() (TW, TB, TW, TZ, TY) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWZZ() (TW, TB, TW, TZ, TZ) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWZW() (TW, TB, TW, TZ, TW) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWZA() (TW, TB, TW, TZ, TA) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWZB() (TW, TB, TW, TZ, TB) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWWX() (TW, TB, TW, TW, TX) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWWY() (TW, TB, TW, TW, TY) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWWZ() (TW, TB, TW, TW, TZ) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWWW() (TW, TB, TW, TW, TW) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWWA() (TW, TB, TW, TW, TA) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWWB() (TW, TB, TW, TW, TB) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWAX() (TW, TB, TW, TA, TX) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWAY() (TW, TB, TW, TA, TY) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWAZ() (TW, TB, TW, TA, TZ) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWAW() (TW, TB, TW, TA, TW) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWAA() (TW, TB, TW, TA, TA) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWAB() (TW, TB, TW, TA, TB) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWBX() (TW, TB, TW, TB, TX) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWBY() (TW, TB, TW, TB, TY) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWBZ() (TW, TB, TW, TB, TZ) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWBW() (TW, TB, TW, TB, TW) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWBA() (TW, TB, TW, TB, TA) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBWBB() (TW, TB, TW, TB, TB) { return _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAXX() (TW, TB, TA, TX, TX) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAXY() (TW, TB, TA, TX, TY) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAXZ() (TW, TB, TA, TX, TZ) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAXW() (TW, TB, TA, TX, TW) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAXA() (TW, TB, TA, TX, TA) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAXB() (TW, TB, TA, TX, TB) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAYX() (TW, TB, TA, TY, TX) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAYY() (TW, TB, TA, TY, TY) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAYZ() (TW, TB, TA, TY, TZ) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAYW() (TW, TB, TA, TY, TW) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAYA() (TW, TB, TA, TY, TA) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAYB() (TW, TB, TA, TY, TB) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAZX() (TW, TB, TA, TZ, TX) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAZY() (TW, TB, TA, TZ, TY) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAZZ() (TW, TB, TA, TZ, TZ) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAZW() (TW, TB, TA, TZ, TW) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAZA() (TW, TB, TA, TZ, TA) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAZB() (TW, TB, TA, TZ, TB) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAWX() (TW, TB, TA, TW, TX) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAWY() (TW, TB, TA, TW, TY) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAWZ() (TW, TB, TA, TW, TZ) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAWW() (TW, TB, TA, TW, TW) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAWA() (TW, TB, TA, TW, TA) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAWB() (TW, TB, TA, TW, TB) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAAX() (TW, TB, TA, TA, TX) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAAY() (TW, TB, TA, TA, TY) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAAZ() (TW, TB, TA, TA, TZ) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAAW() (TW, TB, TA, TA, TW) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAAA() (TW, TB, TA, TA, TA) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBAAB() (TW, TB, TA, TA, TB) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBABX() (TW, TB, TA, TB, TX) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBABY() (TW, TB, TA, TB, TY) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBABZ() (TW, TB, TA, TB, TZ) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBABW() (TW, TB, TA, TB, TW) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBABA() (TW, TB, TA, TB, TA) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBABB() (TW, TB, TA, TB, TB) { return _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBXX() (TW, TB, TB, TX, TX) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBXY() (TW, TB, TB, TX, TY) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBXZ() (TW, TB, TB, TX, TZ) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBXW() (TW, TB, TB, TX, TW) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBXA() (TW, TB, TB, TX, TA) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBXB() (TW, TB, TB, TX, TB) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBYX() (TW, TB, TB, TY, TX) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBYY() (TW, TB, TB, TY, TY) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBYZ() (TW, TB, TB, TY, TZ) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBYW() (TW, TB, TB, TY, TW) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBYA() (TW, TB, TB, TY, TA) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBYB() (TW, TB, TB, TY, TB) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBZX() (TW, TB, TB, TZ, TX) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBZY() (TW, TB, TB, TZ, TY) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBZZ() (TW, TB, TB, TZ, TZ) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBZW() (TW, TB, TB, TZ, TW) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBZA() (TW, TB, TB, TZ, TA) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBZB() (TW, TB, TB, TZ, TB) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBWX() (TW, TB, TB, TW, TX) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBWY() (TW, TB, TB, TW, TY) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBWZ() (TW, TB, TB, TW, TZ) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBWW() (TW, TB, TB, TW, TW) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBWA() (TW, TB, TB, TW, TA) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBWB() (TW, TB, TB, TW, TB) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBAX() (TW, TB, TB, TA, TX) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBAY() (TW, TB, TB, TA, TY) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBAZ() (TW, TB, TB, TA, TZ) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBAW() (TW, TB, TB, TA, TW) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBAA() (TW, TB, TB, TA, TA) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBAB() (TW, TB, TB, TA, TB) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBBX() (TW, TB, TB, TB, TX) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBBY() (TW, TB, TB, TB, TY) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBBZ() (TW, TB, TB, TB, TZ) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBBW() (TW, TB, TB, TB, TW) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBBA() (TW, TB, TB, TB, TA) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) WBBBB() (TW, TB, TB, TB, TB) { return _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXXX() (TA, TX, TX, TX, TX) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXXY() (TA, TX, TX, TX, TY) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXXZ() (TA, TX, TX, TX, TZ) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXXW() (TA, TX, TX, TX, TW) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXXA() (TA, TX, TX, TX, TA) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXXB() (TA, TX, TX, TX, TB) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXYX() (TA, TX, TX, TY, TX) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXYY() (TA, TX, TX, TY, TY) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXYZ() (TA, TX, TX, TY, TZ) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXYW() (TA, TX, TX, TY, TW) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXYA() (TA, TX, TX, TY, TA) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXYB() (TA, TX, TX, TY, TB) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXZX() (TA, TX, TX, TZ, TX) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXZY() (TA, TX, TX, TZ, TY) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXZZ() (TA, TX, TX, TZ, TZ) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXZW() (TA, TX, TX, TZ, TW) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXZA() (TA, TX, TX, TZ, TA) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXZB() (TA, TX, TX, TZ, TB) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXWX() (TA, TX, TX, TW, TX) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXWY() (TA, TX, TX, TW, TY) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXWZ() (TA, TX, TX, TW, TZ) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXWW() (TA, TX, TX, TW, TW) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXWA() (TA, TX, TX, TW, TA) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXWB() (TA, TX, TX, TW, TB) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXAX() (TA, TX, TX, TA, TX) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXAY() (TA, TX, TX, TA, TY) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXAZ() (TA, TX, TX, TA, TZ) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXAW() (TA, TX, TX, TA, TW) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXAA() (TA, TX, TX, TA, TA) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXAB() (TA, TX, TX, TA, TB) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXBX() (TA, TX, TX, TB, TX) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXBY() (TA, TX, TX, TB, TY) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXBZ() (TA, TX, TX, TB, TZ) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXBW() (TA, TX, TX, TB, TW) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXBA() (TA, TX, TX, TB, TA) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXXBB() (TA, TX, TX, TB, TB) { return _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYXX() (TA, TX, TY, TX, TX) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYXY() (TA, TX, TY, TX, TY) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYXZ() (TA, TX, TY, TX, TZ) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYXW() (TA, TX, TY, TX, TW) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYXA() (TA, TX, TY, TX, TA) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYXB() (TA, TX, TY, TX, TB) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYYX() (TA, TX, TY, TY, TX) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYYY() (TA, TX, TY, TY, TY) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYYZ() (TA, TX, TY, TY, TZ) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYYW() (TA, TX, TY, TY, TW) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYYA() (TA, TX, TY, TY, TA) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYYB() (TA, TX, TY, TY, TB) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYZX() (TA, TX, TY, TZ, TX) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYZY() (TA, TX, TY, TZ, TY) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYZZ() (TA, TX, TY, TZ, TZ) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYZW() (TA, TX, TY, TZ, TW) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYZA() (TA, TX, TY, TZ, TA) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYZB() (TA, TX, TY, TZ, TB) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYWX() (TA, TX, TY, TW, TX) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYWY() (TA, TX, TY, TW, TY) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYWZ() (TA, TX, TY, TW, TZ) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYWW() (TA, TX, TY, TW, TW) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYWA() (TA, TX, TY, TW, TA) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYWB() (TA, TX, TY, TW, TB) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYAX() (TA, TX, TY, TA, TX) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYAY() (TA, TX, TY, TA, TY) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYAZ() (TA, TX, TY, TA, TZ) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYAW() (TA, TX, TY, TA, TW) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYAA() (TA, TX, TY, TA, TA) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYAB() (TA, TX, TY, TA, TB) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYBX() (TA, TX, TY, TB, TX) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYBY() (TA, TX, TY, TB, TY) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYBZ() (TA, TX, TY, TB, TZ) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYBW() (TA, TX, TY, TB, TW) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYBA() (TA, TX, TY, TB, TA) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXYBB() (TA, TX, TY, TB, TB) { return _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZXX() (TA, TX, TZ, TX, TX) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZXY() (TA, TX, TZ, TX, TY) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZXZ() (TA, TX, TZ, TX, TZ) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZXW() (TA, TX, TZ, TX, TW) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZXA() (TA, TX, TZ, TX, TA) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZXB() (TA, TX, TZ, TX, TB) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZYX() (TA, TX, TZ, TY, TX) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZYY() (TA, TX, TZ, TY, TY) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZYZ() (TA, TX, TZ, TY, TZ) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZYW() (TA, TX, TZ, TY, TW) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZYA() (TA, TX, TZ, TY, TA) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZYB() (TA, TX, TZ, TY, TB) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZZX() (TA, TX, TZ, TZ, TX) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZZY() (TA, TX, TZ, TZ, TY) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZZZ() (TA, TX, TZ, TZ, TZ) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZZW() (TA, TX, TZ, TZ, TW) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZZA() (TA, TX, TZ, TZ, TA) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZZB() (TA, TX, TZ, TZ, TB) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZWX() (TA, TX, TZ, TW, TX) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZWY() (TA, TX, TZ, TW, TY) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZWZ() (TA, TX, TZ, TW, TZ) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZWW() (TA, TX, TZ, TW, TW) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZWA() (TA, TX, TZ, TW, TA) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZWB() (TA, TX, TZ, TW, TB) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZAX() (TA, TX, TZ, TA, TX) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZAY() (TA, TX, TZ, TA, TY) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZAZ() (TA, TX, TZ, TA, TZ) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZAW() (TA, TX, TZ, TA, TW) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZAA() (TA, TX, TZ, TA, TA) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZAB() (TA, TX, TZ, TA, TB) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZBX() (TA, TX, TZ, TB, TX) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZBY() (TA, TX, TZ, TB, TY) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZBZ() (TA, TX, TZ, TB, TZ) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZBW() (TA, TX, TZ, TB, TW) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZBA() (TA, TX, TZ, TB, TA) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXZBB() (TA, TX, TZ, TB, TB) { return _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWXX() (TA, TX, TW, TX, TX) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWXY() (TA, TX, TW, TX, TY) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWXZ() (TA, TX, TW, TX, TZ) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWXW() (TA, TX, TW, TX, TW) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWXA() (TA, TX, TW, TX, TA) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWXB() (TA, TX, TW, TX, TB) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWYX() (TA, TX, TW, TY, TX) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWYY() (TA, TX, TW, TY, TY) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWYZ() (TA, TX, TW, TY, TZ) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWYW() (TA, TX, TW, TY, TW) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWYA() (TA, TX, TW, TY, TA) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWYB() (TA, TX, TW, TY, TB) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWZX() (TA, TX, TW, TZ, TX) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWZY() (TA, TX, TW, TZ, TY) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWZZ() (TA, TX, TW, TZ, TZ) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWZW() (TA, TX, TW, TZ, TW) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWZA() (TA, TX, TW, TZ, TA) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWZB() (TA, TX, TW, TZ, TB) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWWX() (TA, TX, TW, TW, TX) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWWY() (TA, TX, TW, TW, TY) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWWZ() (TA, TX, TW, TW, TZ) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWWW() (TA, TX, TW, TW, TW) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWWA() (TA, TX, TW, TW, TA) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWWB() (TA, TX, TW, TW, TB) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWAX() (TA, TX, TW, TA, TX) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWAY() (TA, TX, TW, TA, TY) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWAZ() (TA, TX, TW, TA, TZ) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWAW() (TA, TX, TW, TA, TW) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWAA() (TA, TX, TW, TA, TA) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWAB() (TA, TX, TW, TA, TB) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWBX() (TA, TX, TW, TB, TX) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWBY() (TA, TX, TW, TB, TY) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWBZ() (TA, TX, TW, TB, TZ) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWBW() (TA, TX, TW, TB, TW) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWBA() (TA, TX, TW, TB, TA) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXWBB() (TA, TX, TW, TB, TB) { return _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAXX() (TA, TX, TA, TX, TX) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAXY() (TA, TX, TA, TX, TY) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAXZ() (TA, TX, TA, TX, TZ) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAXW() (TA, TX, TA, TX, TW) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAXA() (TA, TX, TA, TX, TA) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAXB() (TA, TX, TA, TX, TB) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAYX() (TA, TX, TA, TY, TX) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAYY() (TA, TX, TA, TY, TY) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAYZ() (TA, TX, TA, TY, TZ) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAYW() (TA, TX, TA, TY, TW) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAYA() (TA, TX, TA, TY, TA) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAYB() (TA, TX, TA, TY, TB) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAZX() (TA, TX, TA, TZ, TX) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAZY() (TA, TX, TA, TZ, TY) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAZZ() (TA, TX, TA, TZ, TZ) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAZW() (TA, TX, TA, TZ, TW) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAZA() (TA, TX, TA, TZ, TA) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAZB() (TA, TX, TA, TZ, TB) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAWX() (TA, TX, TA, TW, TX) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAWY() (TA, TX, TA, TW, TY) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAWZ() (TA, TX, TA, TW, TZ) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAWW() (TA, TX, TA, TW, TW) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAWA() (TA, TX, TA, TW, TA) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAWB() (TA, TX, TA, TW, TB) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAAX() (TA, TX, TA, TA, TX) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAAY() (TA, TX, TA, TA, TY) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAAZ() (TA, TX, TA, TA, TZ) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAAW() (TA, TX, TA, TA, TW) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAAA() (TA, TX, TA, TA, TA) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXAAB() (TA, TX, TA, TA, TB) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXABX() (TA, TX, TA, TB, TX) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXABY() (TA, TX, TA, TB, TY) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXABZ() (TA, TX, TA, TB, TZ) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXABW() (TA, TX, TA, TB, TW) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXABA() (TA, TX, TA, TB, TA) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXABB() (TA, TX, TA, TB, TB) { return _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBXX() (TA, TX, TB, TX, TX) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBXY() (TA, TX, TB, TX, TY) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBXZ() (TA, TX, TB, TX, TZ) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBXW() (TA, TX, TB, TX, TW) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBXA() (TA, TX, TB, TX, TA) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBXB() (TA, TX, TB, TX, TB) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBYX() (TA, TX, TB, TY, TX) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBYY() (TA, TX, TB, TY, TY) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBYZ() (TA, TX, TB, TY, TZ) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBYW() (TA, TX, TB, TY, TW) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBYA() (TA, TX, TB, TY, TA) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBYB() (TA, TX, TB, TY, TB) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBZX() (TA, TX, TB, TZ, TX) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBZY() (TA, TX, TB, TZ, TY) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBZZ() (TA, TX, TB, TZ, TZ) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBZW() (TA, TX, TB, TZ, TW) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBZA() (TA, TX, TB, TZ, TA) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBZB() (TA, TX, TB, TZ, TB) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBWX() (TA, TX, TB, TW, TX) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBWY() (TA, TX, TB, TW, TY) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBWZ() (TA, TX, TB, TW, TZ) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBWW() (TA, TX, TB, TW, TW) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBWA() (TA, TX, TB, TW, TA) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBWB() (TA, TX, TB, TW, TB) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBAX() (TA, TX, TB, TA, TX) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBAY() (TA, TX, TB, TA, TY) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBAZ() (TA, TX, TB, TA, TZ) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBAW() (TA, TX, TB, TA, TW) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBAA() (TA, TX, TB, TA, TA) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBAB() (TA, TX, TB, TA, TB) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBBX() (TA, TX, TB, TB, TX) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBBY() (TA, TX, TB, TB, TY) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBBZ() (TA, TX, TB, TB, TZ) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBBW() (TA, TX, TB, TB, TW) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBBA() (TA, TX, TB, TB, TA) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AXBBB() (TA, TX, TB, TB, TB) { return _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXXX() (TA, TY, TX, TX, TX) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXXY() (TA, TY, TX, TX, TY) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXXZ() (TA, TY, TX, TX, TZ) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXXW() (TA, TY, TX, TX, TW) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXXA() (TA, TY, TX, TX, TA) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXXB() (TA, TY, TX, TX, TB) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXYX() (TA, TY, TX, TY, TX) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXYY() (TA, TY, TX, TY, TY) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXYZ() (TA, TY, TX, TY, TZ) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXYW() (TA, TY, TX, TY, TW) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXYA() (TA, TY, TX, TY, TA) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXYB() (TA, TY, TX, TY, TB) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXZX() (TA, TY, TX, TZ, TX) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXZY() (TA, TY, TX, TZ, TY) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXZZ() (TA, TY, TX, TZ, TZ) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXZW() (TA, TY, TX, TZ, TW) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXZA() (TA, TY, TX, TZ, TA) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXZB() (TA, TY, TX, TZ, TB) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXWX() (TA, TY, TX, TW, TX) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXWY() (TA, TY, TX, TW, TY) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXWZ() (TA, TY, TX, TW, TZ) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXWW() (TA, TY, TX, TW, TW) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXWA() (TA, TY, TX, TW, TA) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXWB() (TA, TY, TX, TW, TB) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXAX() (TA, TY, TX, TA, TX) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXAY() (TA, TY, TX, TA, TY) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXAZ() (TA, TY, TX, TA, TZ) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXAW() (TA, TY, TX, TA, TW) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXAA() (TA, TY, TX, TA, TA) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXAB() (TA, TY, TX, TA, TB) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXBX() (TA, TY, TX, TB, TX) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXBY() (TA, TY, TX, TB, TY) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXBZ() (TA, TY, TX, TB, TZ) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXBW() (TA, TY, TX, TB, TW) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXBA() (TA, TY, TX, TB, TA) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYXBB() (TA, TY, TX, TB, TB) { return _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYXX() (TA, TY, TY, TX, TX) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYXY() (TA, TY, TY, TX, TY) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYXZ() (TA, TY, TY, TX, TZ) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYXW() (TA, TY, TY, TX, TW) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYXA() (TA, TY, TY, TX, TA) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYXB() (TA, TY, TY, TX, TB) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYYX() (TA, TY, TY, TY, TX) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYYY() (TA, TY, TY, TY, TY) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYYZ() (TA, TY, TY, TY, TZ) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYYW() (TA, TY, TY, TY, TW) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYYA() (TA, TY, TY, TY, TA) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYYB() (TA, TY, TY, TY, TB) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYZX() (TA, TY, TY, TZ, TX) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYZY() (TA, TY, TY, TZ, TY) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYZZ() (TA, TY, TY, TZ, TZ) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYZW() (TA, TY, TY, TZ, TW) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYZA() (TA, TY, TY, TZ, TA) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYZB() (TA, TY, TY, TZ, TB) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYWX() (TA, TY, TY, TW, TX) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYWY() (TA, TY, TY, TW, TY) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYWZ() (TA, TY, TY, TW, TZ) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYWW() (TA, TY, TY, TW, TW) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYWA() (TA, TY, TY, TW, TA) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYWB() (TA, TY, TY, TW, TB) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYAX() (TA, TY, TY, TA, TX) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYAY() (TA, TY, TY, TA, TY) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYAZ() (TA, TY, TY, TA, TZ) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYAW() (TA, TY, TY, TA, TW) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYAA() (TA, TY, TY, TA, TA) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYAB() (TA, TY, TY, TA, TB) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYBX() (TA, TY, TY, TB, TX) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYBY() (TA, TY, TY, TB, TY) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYBZ() (TA, TY, TY, TB, TZ) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYBW() (TA, TY, TY, TB, TW) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYBA() (TA, TY, TY, TB, TA) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYYBB() (TA, TY, TY, TB, TB) { return _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZXX() (TA, TY, TZ, TX, TX) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZXY() (TA, TY, TZ, TX, TY) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZXZ() (TA, TY, TZ, TX, TZ) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZXW() (TA, TY, TZ, TX, TW) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZXA() (TA, TY, TZ, TX, TA) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZXB() (TA, TY, TZ, TX, TB) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZYX() (TA, TY, TZ, TY, TX) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZYY() (TA, TY, TZ, TY, TY) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZYZ() (TA, TY, TZ, TY, TZ) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZYW() (TA, TY, TZ, TY, TW) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZYA() (TA, TY, TZ, TY, TA) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZYB() (TA, TY, TZ, TY, TB) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZZX() (TA, TY, TZ, TZ, TX) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZZY() (TA, TY, TZ, TZ, TY) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZZZ() (TA, TY, TZ, TZ, TZ) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZZW() (TA, TY, TZ, TZ, TW) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZZA() (TA, TY, TZ, TZ, TA) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZZB() (TA, TY, TZ, TZ, TB) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZWX() (TA, TY, TZ, TW, TX) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZWY() (TA, TY, TZ, TW, TY) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZWZ() (TA, TY, TZ, TW, TZ) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZWW() (TA, TY, TZ, TW, TW) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZWA() (TA, TY, TZ, TW, TA) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZWB() (TA, TY, TZ, TW, TB) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZAX() (TA, TY, TZ, TA, TX) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZAY() (TA, TY, TZ, TA, TY) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZAZ() (TA, TY, TZ, TA, TZ) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZAW() (TA, TY, TZ, TA, TW) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZAA() (TA, TY, TZ, TA, TA) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZAB() (TA, TY, TZ, TA, TB) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZBX() (TA, TY, TZ, TB, TX) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZBY() (TA, TY, TZ, TB, TY) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZBZ() (TA, TY, TZ, TB, TZ) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZBW() (TA, TY, TZ, TB, TW) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZBA() (TA, TY, TZ, TB, TA) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYZBB() (TA, TY, TZ, TB, TB) { return _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWXX() (TA, TY, TW, TX, TX) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWXY() (TA, TY, TW, TX, TY) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWXZ() (TA, TY, TW, TX, TZ) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWXW() (TA, TY, TW, TX, TW) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWXA() (TA, TY, TW, TX, TA) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWXB() (TA, TY, TW, TX, TB) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWYX() (TA, TY, TW, TY, TX) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWYY() (TA, TY, TW, TY, TY) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWYZ() (TA, TY, TW, TY, TZ) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWYW() (TA, TY, TW, TY, TW) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWYA() (TA, TY, TW, TY, TA) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWYB() (TA, TY, TW, TY, TB) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWZX() (TA, TY, TW, TZ, TX) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWZY() (TA, TY, TW, TZ, TY) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWZZ() (TA, TY, TW, TZ, TZ) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWZW() (TA, TY, TW, TZ, TW) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWZA() (TA, TY, TW, TZ, TA) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWZB() (TA, TY, TW, TZ, TB) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWWX() (TA, TY, TW, TW, TX) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWWY() (TA, TY, TW, TW, TY) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWWZ() (TA, TY, TW, TW, TZ) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWWW() (TA, TY, TW, TW, TW) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWWA() (TA, TY, TW, TW, TA) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWWB() (TA, TY, TW, TW, TB) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWAX() (TA, TY, TW, TA, TX) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWAY() (TA, TY, TW, TA, TY) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWAZ() (TA, TY, TW, TA, TZ) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWAW() (TA, TY, TW, TA, TW) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWAA() (TA, TY, TW, TA, TA) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWAB() (TA, TY, TW, TA, TB) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWBX() (TA, TY, TW, TB, TX) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWBY() (TA, TY, TW, TB, TY) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWBZ() (TA, TY, TW, TB, TZ) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWBW() (TA, TY, TW, TB, TW) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWBA() (TA, TY, TW, TB, TA) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYWBB() (TA, TY, TW, TB, TB) { return _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAXX() (TA, TY, TA, TX, TX) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAXY() (TA, TY, TA, TX, TY) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAXZ() (TA, TY, TA, TX, TZ) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAXW() (TA, TY, TA, TX, TW) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAXA() (TA, TY, TA, TX, TA) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAXB() (TA, TY, TA, TX, TB) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAYX() (TA, TY, TA, TY, TX) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAYY() (TA, TY, TA, TY, TY) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAYZ() (TA, TY, TA, TY, TZ) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAYW() (TA, TY, TA, TY, TW) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAYA() (TA, TY, TA, TY, TA) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAYB() (TA, TY, TA, TY, TB) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAZX() (TA, TY, TA, TZ, TX) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAZY() (TA, TY, TA, TZ, TY) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAZZ() (TA, TY, TA, TZ, TZ) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAZW() (TA, TY, TA, TZ, TW) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAZA() (TA, TY, TA, TZ, TA) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAZB() (TA, TY, TA, TZ, TB) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAWX() (TA, TY, TA, TW, TX) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAWY() (TA, TY, TA, TW, TY) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAWZ() (TA, TY, TA, TW, TZ) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAWW() (TA, TY, TA, TW, TW) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAWA() (TA, TY, TA, TW, TA) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAWB() (TA, TY, TA, TW, TB) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAAX() (TA, TY, TA, TA, TX) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAAY() (TA, TY, TA, TA, TY) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAAZ() (TA, TY, TA, TA, TZ) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAAW() (TA, TY, TA, TA, TW) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAAA() (TA, TY, TA, TA, TA) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYAAB() (TA, TY, TA, TA, TB) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYABX() (TA, TY, TA, TB, TX) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYABY() (TA, TY, TA, TB, TY) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYABZ() (TA, TY, TA, TB, TZ) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYABW() (TA, TY, TA, TB, TW) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYABA() (TA, TY, TA, TB, TA) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYABB() (TA, TY, TA, TB, TB) { return _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBXX() (TA, TY, TB, TX, TX) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBXY() (TA, TY, TB, TX, TY) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBXZ() (TA, TY, TB, TX, TZ) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBXW() (TA, TY, TB, TX, TW) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBXA() (TA, TY, TB, TX, TA) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBXB() (TA, TY, TB, TX, TB) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBYX() (TA, TY, TB, TY, TX) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBYY() (TA, TY, TB, TY, TY) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBYZ() (TA, TY, TB, TY, TZ) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBYW() (TA, TY, TB, TY, TW) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBYA() (TA, TY, TB, TY, TA) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBYB() (TA, TY, TB, TY, TB) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBZX() (TA, TY, TB, TZ, TX) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBZY() (TA, TY, TB, TZ, TY) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBZZ() (TA, TY, TB, TZ, TZ) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBZW() (TA, TY, TB, TZ, TW) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBZA() (TA, TY, TB, TZ, TA) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBZB() (TA, TY, TB, TZ, TB) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBWX() (TA, TY, TB, TW, TX) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBWY() (TA, TY, TB, TW, TY) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBWZ() (TA, TY, TB, TW, TZ) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBWW() (TA, TY, TB, TW, TW) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBWA() (TA, TY, TB, TW, TA) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBWB() (TA, TY, TB, TW, TB) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBAX() (TA, TY, TB, TA, TX) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBAY() (TA, TY, TB, TA, TY) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBAZ() (TA, TY, TB, TA, TZ) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBAW() (TA, TY, TB, TA, TW) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBAA() (TA, TY, TB, TA, TA) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBAB() (TA, TY, TB, TA, TB) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBBX() (TA, TY, TB, TB, TX) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBBY() (TA, TY, TB, TB, TY) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBBZ() (TA, TY, TB, TB, TZ) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBBW() (TA, TY, TB, TB, TW) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBBA() (TA, TY, TB, TB, TA) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AYBBB() (TA, TY, TB, TB, TB) { return _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXXX() (TA, TZ, TX, TX, TX) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXXY() (TA, TZ, TX, TX, TY) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXXZ() (TA, TZ, TX, TX, TZ) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXXW() (TA, TZ, TX, TX, TW) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXXA() (TA, TZ, TX, TX, TA) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXXB() (TA, TZ, TX, TX, TB) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXYX() (TA, TZ, TX, TY, TX) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXYY() (TA, TZ, TX, TY, TY) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXYZ() (TA, TZ, TX, TY, TZ) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXYW() (TA, TZ, TX, TY, TW) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXYA() (TA, TZ, TX, TY, TA) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXYB() (TA, TZ, TX, TY, TB) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXZX() (TA, TZ, TX, TZ, TX) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXZY() (TA, TZ, TX, TZ, TY) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXZZ() (TA, TZ, TX, TZ, TZ) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXZW() (TA, TZ, TX, TZ, TW) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXZA() (TA, TZ, TX, TZ, TA) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXZB() (TA, TZ, TX, TZ, TB) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXWX() (TA, TZ, TX, TW, TX) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXWY() (TA, TZ, TX, TW, TY) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXWZ() (TA, TZ, TX, TW, TZ) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXWW() (TA, TZ, TX, TW, TW) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXWA() (TA, TZ, TX, TW, TA) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXWB() (TA, TZ, TX, TW, TB) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXAX() (TA, TZ, TX, TA, TX) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXAY() (TA, TZ, TX, TA, TY) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXAZ() (TA, TZ, TX, TA, TZ) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXAW() (TA, TZ, TX, TA, TW) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXAA() (TA, TZ, TX, TA, TA) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXAB() (TA, TZ, TX, TA, TB) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXBX() (TA, TZ, TX, TB, TX) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXBY() (TA, TZ, TX, TB, TY) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXBZ() (TA, TZ, TX, TB, TZ) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXBW() (TA, TZ, TX, TB, TW) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXBA() (TA, TZ, TX, TB, TA) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZXBB() (TA, TZ, TX, TB, TB) { return _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYXX() (TA, TZ, TY, TX, TX) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYXY() (TA, TZ, TY, TX, TY) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYXZ() (TA, TZ, TY, TX, TZ) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYXW() (TA, TZ, TY, TX, TW) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYXA() (TA, TZ, TY, TX, TA) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYXB() (TA, TZ, TY, TX, TB) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYYX() (TA, TZ, TY, TY, TX) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYYY() (TA, TZ, TY, TY, TY) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYYZ() (TA, TZ, TY, TY, TZ) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYYW() (TA, TZ, TY, TY, TW) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYYA() (TA, TZ, TY, TY, TA) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYYB() (TA, TZ, TY, TY, TB) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYZX() (TA, TZ, TY, TZ, TX) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYZY() (TA, TZ, TY, TZ, TY) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYZZ() (TA, TZ, TY, TZ, TZ) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYZW() (TA, TZ, TY, TZ, TW) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYZA() (TA, TZ, TY, TZ, TA) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYZB() (TA, TZ, TY, TZ, TB) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYWX() (TA, TZ, TY, TW, TX) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYWY() (TA, TZ, TY, TW, TY) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYWZ() (TA, TZ, TY, TW, TZ) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYWW() (TA, TZ, TY, TW, TW) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYWA() (TA, TZ, TY, TW, TA) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYWB() (TA, TZ, TY, TW, TB) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYAX() (TA, TZ, TY, TA, TX) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYAY() (TA, TZ, TY, TA, TY) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYAZ() (TA, TZ, TY, TA, TZ) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYAW() (TA, TZ, TY, TA, TW) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYAA() (TA, TZ, TY, TA, TA) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYAB() (TA, TZ, TY, TA, TB) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYBX() (TA, TZ, TY, TB, TX) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYBY() (TA, TZ, TY, TB, TY) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYBZ() (TA, TZ, TY, TB, TZ) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYBW() (TA, TZ, TY, TB, TW) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYBA() (TA, TZ, TY, TB, TA) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZYBB() (TA, TZ, TY, TB, TB) { return _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZXX() (TA, TZ, TZ, TX, TX) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZXY() (TA, TZ, TZ, TX, TY) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZXZ() (TA, TZ, TZ, TX, TZ) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZXW() (TA, TZ, TZ, TX, TW) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZXA() (TA, TZ, TZ, TX, TA) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZXB() (TA, TZ, TZ, TX, TB) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZYX() (TA, TZ, TZ, TY, TX) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZYY() (TA, TZ, TZ, TY, TY) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZYZ() (TA, TZ, TZ, TY, TZ) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZYW() (TA, TZ, TZ, TY, TW) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZYA() (TA, TZ, TZ, TY, TA) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZYB() (TA, TZ, TZ, TY, TB) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZZX() (TA, TZ, TZ, TZ, TX) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZZY() (TA, TZ, TZ, TZ, TY) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZZZ() (TA, TZ, TZ, TZ, TZ) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZZW() (TA, TZ, TZ, TZ, TW) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZZA() (TA, TZ, TZ, TZ, TA) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZZB() (TA, TZ, TZ, TZ, TB) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZWX() (TA, TZ, TZ, TW, TX) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZWY() (TA, TZ, TZ, TW, TY) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZWZ() (TA, TZ, TZ, TW, TZ) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZWW() (TA, TZ, TZ, TW, TW) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZWA() (TA, TZ, TZ, TW, TA) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZWB() (TA, TZ, TZ, TW, TB) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZAX() (TA, TZ, TZ, TA, TX) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZAY() (TA, TZ, TZ, TA, TY) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZAZ() (TA, TZ, TZ, TA, TZ) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZAW() (TA, TZ, TZ, TA, TW) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZAA() (TA, TZ, TZ, TA, TA) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZAB() (TA, TZ, TZ, TA, TB) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZBX() (TA, TZ, TZ, TB, TX) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZBY() (TA, TZ, TZ, TB, TY) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZBZ() (TA, TZ, TZ, TB, TZ) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZBW() (TA, TZ, TZ, TB, TW) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZBA() (TA, TZ, TZ, TB, TA) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZZBB() (TA, TZ, TZ, TB, TB) { return _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWXX() (TA, TZ, TW, TX, TX) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWXY() (TA, TZ, TW, TX, TY) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWXZ() (TA, TZ, TW, TX, TZ) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWXW() (TA, TZ, TW, TX, TW) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWXA() (TA, TZ, TW, TX, TA) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWXB() (TA, TZ, TW, TX, TB) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWYX() (TA, TZ, TW, TY, TX) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWYY() (TA, TZ, TW, TY, TY) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWYZ() (TA, TZ, TW, TY, TZ) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWYW() (TA, TZ, TW, TY, TW) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWYA() (TA, TZ, TW, TY, TA) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWYB() (TA, TZ, TW, TY, TB) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWZX() (TA, TZ, TW, TZ, TX) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWZY() (TA, TZ, TW, TZ, TY) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWZZ() (TA, TZ, TW, TZ, TZ) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWZW() (TA, TZ, TW, TZ, TW) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWZA() (TA, TZ, TW, TZ, TA) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWZB() (TA, TZ, TW, TZ, TB) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWWX() (TA, TZ, TW, TW, TX) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWWY() (TA, TZ, TW, TW, TY) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWWZ() (TA, TZ, TW, TW, TZ) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWWW() (TA, TZ, TW, TW, TW) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWWA() (TA, TZ, TW, TW, TA) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWWB() (TA, TZ, TW, TW, TB) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWAX() (TA, TZ, TW, TA, TX) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWAY() (TA, TZ, TW, TA, TY) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWAZ() (TA, TZ, TW, TA, TZ) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWAW() (TA, TZ, TW, TA, TW) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWAA() (TA, TZ, TW, TA, TA) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWAB() (TA, TZ, TW, TA, TB) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWBX() (TA, TZ, TW, TB, TX) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWBY() (TA, TZ, TW, TB, TY) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWBZ() (TA, TZ, TW, TB, TZ) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWBW() (TA, TZ, TW, TB, TW) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWBA() (TA, TZ, TW, TB, TA) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZWBB() (TA, TZ, TW, TB, TB) { return _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAXX() (TA, TZ, TA, TX, TX) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAXY() (TA, TZ, TA, TX, TY) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAXZ() (TA, TZ, TA, TX, TZ) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAXW() (TA, TZ, TA, TX, TW) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAXA() (TA, TZ, TA, TX, TA) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAXB() (TA, TZ, TA, TX, TB) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAYX() (TA, TZ, TA, TY, TX) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAYY() (TA, TZ, TA, TY, TY) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAYZ() (TA, TZ, TA, TY, TZ) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAYW() (TA, TZ, TA, TY, TW) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAYA() (TA, TZ, TA, TY, TA) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAYB() (TA, TZ, TA, TY, TB) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAZX() (TA, TZ, TA, TZ, TX) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAZY() (TA, TZ, TA, TZ, TY) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAZZ() (TA, TZ, TA, TZ, TZ) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAZW() (TA, TZ, TA, TZ, TW) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAZA() (TA, TZ, TA, TZ, TA) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAZB() (TA, TZ, TA, TZ, TB) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAWX() (TA, TZ, TA, TW, TX) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAWY() (TA, TZ, TA, TW, TY) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAWZ() (TA, TZ, TA, TW, TZ) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAWW() (TA, TZ, TA, TW, TW) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAWA() (TA, TZ, TA, TW, TA) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAWB() (TA, TZ, TA, TW, TB) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAAX() (TA, TZ, TA, TA, TX) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAAY() (TA, TZ, TA, TA, TY) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAAZ() (TA, TZ, TA, TA, TZ) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAAW() (TA, TZ, TA, TA, TW) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAAA() (TA, TZ, TA, TA, TA) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZAAB() (TA, TZ, TA, TA, TB) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZABX() (TA, TZ, TA, TB, TX) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZABY() (TA, TZ, TA, TB, TY) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZABZ() (TA, TZ, TA, TB, TZ) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZABW() (TA, TZ, TA, TB, TW) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZABA() (TA, TZ, TA, TB, TA) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZABB() (TA, TZ, TA, TB, TB) { return _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBXX() (TA, TZ, TB, TX, TX) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBXY() (TA, TZ, TB, TX, TY) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBXZ() (TA, TZ, TB, TX, TZ) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBXW() (TA, TZ, TB, TX, TW) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBXA() (TA, TZ, TB, TX, TA) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBXB() (TA, TZ, TB, TX, TB) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBYX() (TA, TZ, TB, TY, TX) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBYY() (TA, TZ, TB, TY, TY) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBYZ() (TA, TZ, TB, TY, TZ) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBYW() (TA, TZ, TB, TY, TW) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBYA() (TA, TZ, TB, TY, TA) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBYB() (TA, TZ, TB, TY, TB) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBZX() (TA, TZ, TB, TZ, TX) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBZY() (TA, TZ, TB, TZ, TY) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBZZ() (TA, TZ, TB, TZ, TZ) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBZW() (TA, TZ, TB, TZ, TW) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBZA() (TA, TZ, TB, TZ, TA) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBZB() (TA, TZ, TB, TZ, TB) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBWX() (TA, TZ, TB, TW, TX) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBWY() (TA, TZ, TB, TW, TY) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBWZ() (TA, TZ, TB, TW, TZ) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBWW() (TA, TZ, TB, TW, TW) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBWA() (TA, TZ, TB, TW, TA) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBWB() (TA, TZ, TB, TW, TB) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBAX() (TA, TZ, TB, TA, TX) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBAY() (TA, TZ, TB, TA, TY) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBAZ() (TA, TZ, TB, TA, TZ) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBAW() (TA, TZ, TB, TA, TW) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBAA() (TA, TZ, TB, TA, TA) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBAB() (TA, TZ, TB, TA, TB) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBBX() (TA, TZ, TB, TB, TX) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBBY() (TA, TZ, TB, TB, TY) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBBZ() (TA, TZ, TB, TB, TZ) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBBW() (TA, TZ, TB, TB, TW) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBBA() (TA, TZ, TB, TB, TA) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AZBBB() (TA, TZ, TB, TB, TB) { return _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXXX() (TA, TW, TX, TX, TX) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXXY() (TA, TW, TX, TX, TY) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXXZ() (TA, TW, TX, TX, TZ) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXXW() (TA, TW, TX, TX, TW) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXXA() (TA, TW, TX, TX, TA) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXXB() (TA, TW, TX, TX, TB) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXYX() (TA, TW, TX, TY, TX) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXYY() (TA, TW, TX, TY, TY) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXYZ() (TA, TW, TX, TY, TZ) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXYW() (TA, TW, TX, TY, TW) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXYA() (TA, TW, TX, TY, TA) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXYB() (TA, TW, TX, TY, TB) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXZX() (TA, TW, TX, TZ, TX) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXZY() (TA, TW, TX, TZ, TY) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXZZ() (TA, TW, TX, TZ, TZ) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXZW() (TA, TW, TX, TZ, TW) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXZA() (TA, TW, TX, TZ, TA) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXZB() (TA, TW, TX, TZ, TB) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXWX() (TA, TW, TX, TW, TX) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXWY() (TA, TW, TX, TW, TY) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXWZ() (TA, TW, TX, TW, TZ) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXWW() (TA, TW, TX, TW, TW) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXWA() (TA, TW, TX, TW, TA) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXWB() (TA, TW, TX, TW, TB) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXAX() (TA, TW, TX, TA, TX) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXAY() (TA, TW, TX, TA, TY) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXAZ() (TA, TW, TX, TA, TZ) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXAW() (TA, TW, TX, TA, TW) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXAA() (TA, TW, TX, TA, TA) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXAB() (TA, TW, TX, TA, TB) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXBX() (TA, TW, TX, TB, TX) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXBY() (TA, TW, TX, TB, TY) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXBZ() (TA, TW, TX, TB, TZ) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXBW() (TA, TW, TX, TB, TW) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXBA() (TA, TW, TX, TB, TA) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWXBB() (TA, TW, TX, TB, TB) { return _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYXX() (TA, TW, TY, TX, TX) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYXY() (TA, TW, TY, TX, TY) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYXZ() (TA, TW, TY, TX, TZ) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYXW() (TA, TW, TY, TX, TW) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYXA() (TA, TW, TY, TX, TA) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYXB() (TA, TW, TY, TX, TB) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYYX() (TA, TW, TY, TY, TX) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYYY() (TA, TW, TY, TY, TY) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYYZ() (TA, TW, TY, TY, TZ) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYYW() (TA, TW, TY, TY, TW) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYYA() (TA, TW, TY, TY, TA) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYYB() (TA, TW, TY, TY, TB) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYZX() (TA, TW, TY, TZ, TX) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYZY() (TA, TW, TY, TZ, TY) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYZZ() (TA, TW, TY, TZ, TZ) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYZW() (TA, TW, TY, TZ, TW) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYZA() (TA, TW, TY, TZ, TA) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYZB() (TA, TW, TY, TZ, TB) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYWX() (TA, TW, TY, TW, TX) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYWY() (TA, TW, TY, TW, TY) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYWZ() (TA, TW, TY, TW, TZ) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYWW() (TA, TW, TY, TW, TW) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYWA() (TA, TW, TY, TW, TA) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYWB() (TA, TW, TY, TW, TB) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYAX() (TA, TW, TY, TA, TX) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYAY() (TA, TW, TY, TA, TY) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYAZ() (TA, TW, TY, TA, TZ) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYAW() (TA, TW, TY, TA, TW) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYAA() (TA, TW, TY, TA, TA) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYAB() (TA, TW, TY, TA, TB) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYBX() (TA, TW, TY, TB, TX) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYBY() (TA, TW, TY, TB, TY) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYBZ() (TA, TW, TY, TB, TZ) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYBW() (TA, TW, TY, TB, TW) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYBA() (TA, TW, TY, TB, TA) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWYBB() (TA, TW, TY, TB, TB) { return _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZXX() (TA, TW, TZ, TX, TX) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZXY() (TA, TW, TZ, TX, TY) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZXZ() (TA, TW, TZ, TX, TZ) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZXW() (TA, TW, TZ, TX, TW) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZXA() (TA, TW, TZ, TX, TA) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZXB() (TA, TW, TZ, TX, TB) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZYX() (TA, TW, TZ, TY, TX) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZYY() (TA, TW, TZ, TY, TY) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZYZ() (TA, TW, TZ, TY, TZ) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZYW() (TA, TW, TZ, TY, TW) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZYA() (TA, TW, TZ, TY, TA) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZYB() (TA, TW, TZ, TY, TB) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZZX() (TA, TW, TZ, TZ, TX) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZZY() (TA, TW, TZ, TZ, TY) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZZZ() (TA, TW, TZ, TZ, TZ) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZZW() (TA, TW, TZ, TZ, TW) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZZA() (TA, TW, TZ, TZ, TA) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZZB() (TA, TW, TZ, TZ, TB) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZWX() (TA, TW, TZ, TW, TX) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZWY() (TA, TW, TZ, TW, TY) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZWZ() (TA, TW, TZ, TW, TZ) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZWW() (TA, TW, TZ, TW, TW) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZWA() (TA, TW, TZ, TW, TA) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZWB() (TA, TW, TZ, TW, TB) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZAX() (TA, TW, TZ, TA, TX) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZAY() (TA, TW, TZ, TA, TY) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZAZ() (TA, TW, TZ, TA, TZ) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZAW() (TA, TW, TZ, TA, TW) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZAA() (TA, TW, TZ, TA, TA) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZAB() (TA, TW, TZ, TA, TB) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZBX() (TA, TW, TZ, TB, TX) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZBY() (TA, TW, TZ, TB, TY) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZBZ() (TA, TW, TZ, TB, TZ) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZBW() (TA, TW, TZ, TB, TW) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZBA() (TA, TW, TZ, TB, TA) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWZBB() (TA, TW, TZ, TB, TB) { return _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWXX() (TA, TW, TW, TX, TX) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWXY() (TA, TW, TW, TX, TY) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWXZ() (TA, TW, TW, TX, TZ) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWXW() (TA, TW, TW, TX, TW) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWXA() (TA, TW, TW, TX, TA) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWXB() (TA, TW, TW, TX, TB) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWYX() (TA, TW, TW, TY, TX) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWYY() (TA, TW, TW, TY, TY) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWYZ() (TA, TW, TW, TY, TZ) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWYW() (TA, TW, TW, TY, TW) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWYA() (TA, TW, TW, TY, TA) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWYB() (TA, TW, TW, TY, TB) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWZX() (TA, TW, TW, TZ, TX) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWZY() (TA, TW, TW, TZ, TY) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWZZ() (TA, TW, TW, TZ, TZ) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWZW() (TA, TW, TW, TZ, TW) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWZA() (TA, TW, TW, TZ, TA) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWZB() (TA, TW, TW, TZ, TB) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWWX() (TA, TW, TW, TW, TX) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWWY() (TA, TW, TW, TW, TY) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWWZ() (TA, TW, TW, TW, TZ) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWWW() (TA, TW, TW, TW, TW) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWWA() (TA, TW, TW, TW, TA) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWWB() (TA, TW, TW, TW, TB) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWAX() (TA, TW, TW, TA, TX) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWAY() (TA, TW, TW, TA, TY) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWAZ() (TA, TW, TW, TA, TZ) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWAW() (TA, TW, TW, TA, TW) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWAA() (TA, TW, TW, TA, TA) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWAB() (TA, TW, TW, TA, TB) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWBX() (TA, TW, TW, TB, TX) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWBY() (TA, TW, TW, TB, TY) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWBZ() (TA, TW, TW, TB, TZ) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWBW() (TA, TW, TW, TB, TW) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWBA() (TA, TW, TW, TB, TA) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWWBB() (TA, TW, TW, TB, TB) { return _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAXX() (TA, TW, TA, TX, TX) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAXY() (TA, TW, TA, TX, TY) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAXZ() (TA, TW, TA, TX, TZ) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAXW() (TA, TW, TA, TX, TW) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAXA() (TA, TW, TA, TX, TA) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAXB() (TA, TW, TA, TX, TB) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAYX() (TA, TW, TA, TY, TX) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAYY() (TA, TW, TA, TY, TY) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAYZ() (TA, TW, TA, TY, TZ) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAYW() (TA, TW, TA, TY, TW) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAYA() (TA, TW, TA, TY, TA) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAYB() (TA, TW, TA, TY, TB) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAZX() (TA, TW, TA, TZ, TX) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAZY() (TA, TW, TA, TZ, TY) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAZZ() (TA, TW, TA, TZ, TZ) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAZW() (TA, TW, TA, TZ, TW) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAZA() (TA, TW, TA, TZ, TA) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAZB() (TA, TW, TA, TZ, TB) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAWX() (TA, TW, TA, TW, TX) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAWY() (TA, TW, TA, TW, TY) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAWZ() (TA, TW, TA, TW, TZ) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAWW() (TA, TW, TA, TW, TW) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAWA() (TA, TW, TA, TW, TA) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAWB() (TA, TW, TA, TW, TB) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAAX() (TA, TW, TA, TA, TX) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAAY() (TA, TW, TA, TA, TY) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAAZ() (TA, TW, TA, TA, TZ) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAAW() (TA, TW, TA, TA, TW) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAAA() (TA, TW, TA, TA, TA) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWAAB() (TA, TW, TA, TA, TB) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWABX() (TA, TW, TA, TB, TX) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWABY() (TA, TW, TA, TB, TY) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWABZ() (TA, TW, TA, TB, TZ) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWABW() (TA, TW, TA, TB, TW) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWABA() (TA, TW, TA, TB, TA) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWABB() (TA, TW, TA, TB, TB) { return _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBXX() (TA, TW, TB, TX, TX) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBXY() (TA, TW, TB, TX, TY) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBXZ() (TA, TW, TB, TX, TZ) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBXW() (TA, TW, TB, TX, TW) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBXA() (TA, TW, TB, TX, TA) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBXB() (TA, TW, TB, TX, TB) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBYX() (TA, TW, TB, TY, TX) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBYY() (TA, TW, TB, TY, TY) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBYZ() (TA, TW, TB, TY, TZ) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBYW() (TA, TW, TB, TY, TW) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBYA() (TA, TW, TB, TY, TA) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBYB() (TA, TW, TB, TY, TB) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBZX() (TA, TW, TB, TZ, TX) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBZY() (TA, TW, TB, TZ, TY) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBZZ() (TA, TW, TB, TZ, TZ) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBZW() (TA, TW, TB, TZ, TW) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBZA() (TA, TW, TB, TZ, TA) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBZB() (TA, TW, TB, TZ, TB) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBWX() (TA, TW, TB, TW, TX) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBWY() (TA, TW, TB, TW, TY) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBWZ() (TA, TW, TB, TW, TZ) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBWW() (TA, TW, TB, TW, TW) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBWA() (TA, TW, TB, TW, TA) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBWB() (TA, TW, TB, TW, TB) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBAX() (TA, TW, TB, TA, TX) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBAY() (TA, TW, TB, TA, TY) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBAZ() (TA, TW, TB, TA, TZ) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBAW() (TA, TW, TB, TA, TW) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBAA() (TA, TW, TB, TA, TA) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBAB() (TA, TW, TB, TA, TB) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBBX() (TA, TW, TB, TB, TX) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBBY() (TA, TW, TB, TB, TY) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBBZ() (TA, TW, TB, TB, TZ) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBBW() (TA, TW, TB, TB, TW) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBBA() (TA, TW, TB, TB, TA) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AWBBB() (TA, TW, TB, TB, TB) { return _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXXX() (TA, TA, TX, TX, TX) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXXY() (TA, TA, TX, TX, TY) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXXZ() (TA, TA, TX, TX, TZ) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXXW() (TA, TA, TX, TX, TW) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXXA() (TA, TA, TX, TX, TA) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXXB() (TA, TA, TX, TX, TB) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXYX() (TA, TA, TX, TY, TX) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXYY() (TA, TA, TX, TY, TY) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXYZ() (TA, TA, TX, TY, TZ) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXYW() (TA, TA, TX, TY, TW) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXYA() (TA, TA, TX, TY, TA) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXYB() (TA, TA, TX, TY, TB) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXZX() (TA, TA, TX, TZ, TX) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXZY() (TA, TA, TX, TZ, TY) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXZZ() (TA, TA, TX, TZ, TZ) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXZW() (TA, TA, TX, TZ, TW) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXZA() (TA, TA, TX, TZ, TA) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXZB() (TA, TA, TX, TZ, TB) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXWX() (TA, TA, TX, TW, TX) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXWY() (TA, TA, TX, TW, TY) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXWZ() (TA, TA, TX, TW, TZ) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXWW() (TA, TA, TX, TW, TW) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXWA() (TA, TA, TX, TW, TA) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXWB() (TA, TA, TX, TW, TB) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXAX() (TA, TA, TX, TA, TX) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXAY() (TA, TA, TX, TA, TY) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXAZ() (TA, TA, TX, TA, TZ) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXAW() (TA, TA, TX, TA, TW) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXAA() (TA, TA, TX, TA, TA) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXAB() (TA, TA, TX, TA, TB) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXBX() (TA, TA, TX, TB, TX) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXBY() (TA, TA, TX, TB, TY) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXBZ() (TA, TA, TX, TB, TZ) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXBW() (TA, TA, TX, TB, TW) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXBA() (TA, TA, TX, TB, TA) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAXBB() (TA, TA, TX, TB, TB) { return _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYXX() (TA, TA, TY, TX, TX) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYXY() (TA, TA, TY, TX, TY) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYXZ() (TA, TA, TY, TX, TZ) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYXW() (TA, TA, TY, TX, TW) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYXA() (TA, TA, TY, TX, TA) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYXB() (TA, TA, TY, TX, TB) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYYX() (TA, TA, TY, TY, TX) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYYY() (TA, TA, TY, TY, TY) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYYZ() (TA, TA, TY, TY, TZ) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYYW() (TA, TA, TY, TY, TW) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYYA() (TA, TA, TY, TY, TA) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYYB() (TA, TA, TY, TY, TB) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYZX() (TA, TA, TY, TZ, TX) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYZY() (TA, TA, TY, TZ, TY) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYZZ() (TA, TA, TY, TZ, TZ) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYZW() (TA, TA, TY, TZ, TW) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYZA() (TA, TA, TY, TZ, TA) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYZB() (TA, TA, TY, TZ, TB) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYWX() (TA, TA, TY, TW, TX) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYWY() (TA, TA, TY, TW, TY) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYWZ() (TA, TA, TY, TW, TZ) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYWW() (TA, TA, TY, TW, TW) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYWA() (TA, TA, TY, TW, TA) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYWB() (TA, TA, TY, TW, TB) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYAX() (TA, TA, TY, TA, TX) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYAY() (TA, TA, TY, TA, TY) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYAZ() (TA, TA, TY, TA, TZ) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYAW() (TA, TA, TY, TA, TW) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYAA() (TA, TA, TY, TA, TA) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYAB() (TA, TA, TY, TA, TB) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYBX() (TA, TA, TY, TB, TX) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYBY() (TA, TA, TY, TB, TY) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYBZ() (TA, TA, TY, TB, TZ) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYBW() (TA, TA, TY, TB, TW) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYBA() (TA, TA, TY, TB, TA) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAYBB() (TA, TA, TY, TB, TB) { return _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZXX() (TA, TA, TZ, TX, TX) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZXY() (TA, TA, TZ, TX, TY) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZXZ() (TA, TA, TZ, TX, TZ) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZXW() (TA, TA, TZ, TX, TW) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZXA() (TA, TA, TZ, TX, TA) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZXB() (TA, TA, TZ, TX, TB) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZYX() (TA, TA, TZ, TY, TX) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZYY() (TA, TA, TZ, TY, TY) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZYZ() (TA, TA, TZ, TY, TZ) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZYW() (TA, TA, TZ, TY, TW) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZYA() (TA, TA, TZ, TY, TA) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZYB() (TA, TA, TZ, TY, TB) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZZX() (TA, TA, TZ, TZ, TX) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZZY() (TA, TA, TZ, TZ, TY) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZZZ() (TA, TA, TZ, TZ, TZ) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZZW() (TA, TA, TZ, TZ, TW) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZZA() (TA, TA, TZ, TZ, TA) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZZB() (TA, TA, TZ, TZ, TB) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZWX() (TA, TA, TZ, TW, TX) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZWY() (TA, TA, TZ, TW, TY) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZWZ() (TA, TA, TZ, TW, TZ) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZWW() (TA, TA, TZ, TW, TW) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZWA() (TA, TA, TZ, TW, TA) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZWB() (TA, TA, TZ, TW, TB) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZAX() (TA, TA, TZ, TA, TX) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZAY() (TA, TA, TZ, TA, TY) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZAZ() (TA, TA, TZ, TA, TZ) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZAW() (TA, TA, TZ, TA, TW) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZAA() (TA, TA, TZ, TA, TA) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZAB() (TA, TA, TZ, TA, TB) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZBX() (TA, TA, TZ, TB, TX) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZBY() (TA, TA, TZ, TB, TY) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZBZ() (TA, TA, TZ, TB, TZ) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZBW() (TA, TA, TZ, TB, TW) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZBA() (TA, TA, TZ, TB, TA) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAZBB() (TA, TA, TZ, TB, TB) { return _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWXX() (TA, TA, TW, TX, TX) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWXY() (TA, TA, TW, TX, TY) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWXZ() (TA, TA, TW, TX, TZ) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWXW() (TA, TA, TW, TX, TW) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWXA() (TA, TA, TW, TX, TA) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWXB() (TA, TA, TW, TX, TB) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWYX() (TA, TA, TW, TY, TX) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWYY() (TA, TA, TW, TY, TY) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWYZ() (TA, TA, TW, TY, TZ) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWYW() (TA, TA, TW, TY, TW) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWYA() (TA, TA, TW, TY, TA) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWYB() (TA, TA, TW, TY, TB) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWZX() (TA, TA, TW, TZ, TX) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWZY() (TA, TA, TW, TZ, TY) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWZZ() (TA, TA, TW, TZ, TZ) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWZW() (TA, TA, TW, TZ, TW) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWZA() (TA, TA, TW, TZ, TA) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWZB() (TA, TA, TW, TZ, TB) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWWX() (TA, TA, TW, TW, TX) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWWY() (TA, TA, TW, TW, TY) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWWZ() (TA, TA, TW, TW, TZ) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWWW() (TA, TA, TW, TW, TW) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWWA() (TA, TA, TW, TW, TA) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWWB() (TA, TA, TW, TW, TB) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWAX() (TA, TA, TW, TA, TX) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWAY() (TA, TA, TW, TA, TY) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWAZ() (TA, TA, TW, TA, TZ) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWAW() (TA, TA, TW, TA, TW) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWAA() (TA, TA, TW, TA, TA) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWAB() (TA, TA, TW, TA, TB) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWBX() (TA, TA, TW, TB, TX) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWBY() (TA, TA, TW, TB, TY) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWBZ() (TA, TA, TW, TB, TZ) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWBW() (TA, TA, TW, TB, TW) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWBA() (TA, TA, TW, TB, TA) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAWBB() (TA, TA, TW, TB, TB) { return _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAXX() (TA, TA, TA, TX, TX) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAXY() (TA, TA, TA, TX, TY) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAXZ() (TA, TA, TA, TX, TZ) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAXW() (TA, TA, TA, TX, TW) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAXA() (TA, TA, TA, TX, TA) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAXB() (TA, TA, TA, TX, TB) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAYX() (TA, TA, TA, TY, TX) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAYY() (TA, TA, TA, TY, TY) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAYZ() (TA, TA, TA, TY, TZ) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAYW() (TA, TA, TA, TY, TW) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAYA() (TA, TA, TA, TY, TA) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAYB() (TA, TA, TA, TY, TB) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAZX() (TA, TA, TA, TZ, TX) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAZY() (TA, TA, TA, TZ, TY) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAZZ() (TA, TA, TA, TZ, TZ) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAZW() (TA, TA, TA, TZ, TW) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAZA() (TA, TA, TA, TZ, TA) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAZB() (TA, TA, TA, TZ, TB) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAWX() (TA, TA, TA, TW, TX) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAWY() (TA, TA, TA, TW, TY) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAWZ() (TA, TA, TA, TW, TZ) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAWW() (TA, TA, TA, TW, TW) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAWA() (TA, TA, TA, TW, TA) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAWB() (TA, TA, TA, TW, TB) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAAX() (TA, TA, TA, TA, TX) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAAY() (TA, TA, TA, TA, TY) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAAZ() (TA, TA, TA, TA, TZ) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAAW() (TA, TA, TA, TA, TW) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAAA() (TA, TA, TA, TA, TA) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAAAB() (TA, TA, TA, TA, TB) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAABX() (TA, TA, TA, TB, TX) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAABY() (TA, TA, TA, TB, TY) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAABZ() (TA, TA, TA, TB, TZ) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAABW() (TA, TA, TA, TB, TW) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAABA() (TA, TA, TA, TB, TA) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AAABB() (TA, TA, TA, TB, TB) { return _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABXX() (TA, TA, TB, TX, TX) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABXY() (TA, TA, TB, TX, TY) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABXZ() (TA, TA, TB, TX, TZ) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABXW() (TA, TA, TB, TX, TW) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABXA() (TA, TA, TB, TX, TA) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABXB() (TA, TA, TB, TX, TB) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABYX() (TA, TA, TB, TY, TX) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABYY() (TA, TA, TB, TY, TY) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABYZ() (TA, TA, TB, TY, TZ) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABYW() (TA, TA, TB, TY, TW) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABYA() (TA, TA, TB, TY, TA) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABYB() (TA, TA, TB, TY, TB) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABZX() (TA, TA, TB, TZ, TX) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABZY() (TA, TA, TB, TZ, TY) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABZZ() (TA, TA, TB, TZ, TZ) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABZW() (TA, TA, TB, TZ, TW) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABZA() (TA, TA, TB, TZ, TA) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABZB() (TA, TA, TB, TZ, TB) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABWX() (TA, TA, TB, TW, TX) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABWY() (TA, TA, TB, TW, TY) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABWZ() (TA, TA, TB, TW, TZ) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABWW() (TA, TA, TB, TW, TW) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABWA() (TA, TA, TB, TW, TA) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABWB() (TA, TA, TB, TW, TB) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABAX() (TA, TA, TB, TA, TX) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABAY() (TA, TA, TB, TA, TY) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABAZ() (TA, TA, TB, TA, TZ) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABAW() (TA, TA, TB, TA, TW) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABAA() (TA, TA, TB, TA, TA) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABAB() (TA, TA, TB, TA, TB) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABBX() (TA, TA, TB, TB, TX) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABBY() (TA, TA, TB, TB, TY) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABBZ() (TA, TA, TB, TB, TZ) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABBW() (TA, TA, TB, TB, TW) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABBA() (TA, TA, TB, TB, TA) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) AABBB() (TA, TA, TB, TB, TB) { return _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXXX() (TA, TB, TX, TX, TX) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXXY() (TA, TB, TX, TX, TY) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXXZ() (TA, TB, TX, TX, TZ) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXXW() (TA, TB, TX, TX, TW) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXXA() (TA, TB, TX, TX, TA) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXXB() (TA, TB, TX, TX, TB) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXYX() (TA, TB, TX, TY, TX) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXYY() (TA, TB, TX, TY, TY) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXYZ() (TA, TB, TX, TY, TZ) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXYW() (TA, TB, TX, TY, TW) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXYA() (TA, TB, TX, TY, TA) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXYB() (TA, TB, TX, TY, TB) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXZX() (TA, TB, TX, TZ, TX) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXZY() (TA, TB, TX, TZ, TY) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXZZ() (TA, TB, TX, TZ, TZ) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXZW() (TA, TB, TX, TZ, TW) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXZA() (TA, TB, TX, TZ, TA) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXZB() (TA, TB, TX, TZ, TB) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXWX() (TA, TB, TX, TW, TX) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXWY() (TA, TB, TX, TW, TY) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXWZ() (TA, TB, TX, TW, TZ) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXWW() (TA, TB, TX, TW, TW) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXWA() (TA, TB, TX, TW, TA) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXWB() (TA, TB, TX, TW, TB) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXAX() (TA, TB, TX, TA, TX) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXAY() (TA, TB, TX, TA, TY) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXAZ() (TA, TB, TX, TA, TZ) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXAW() (TA, TB, TX, TA, TW) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXAA() (TA, TB, TX, TA, TA) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXAB() (TA, TB, TX, TA, TB) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXBX() (TA, TB, TX, TB, TX) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXBY() (TA, TB, TX, TB, TY) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXBZ() (TA, TB, TX, TB, TZ) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXBW() (TA, TB, TX, TB, TW) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXBA() (TA, TB, TX, TB, TA) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABXBB() (TA, TB, TX, TB, TB) { return _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYXX() (TA, TB, TY, TX, TX) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYXY() (TA, TB, TY, TX, TY) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYXZ() (TA, TB, TY, TX, TZ) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYXW() (TA, TB, TY, TX, TW) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYXA() (TA, TB, TY, TX, TA) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYXB() (TA, TB, TY, TX, TB) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYYX() (TA, TB, TY, TY, TX) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYYY() (TA, TB, TY, TY, TY) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYYZ() (TA, TB, TY, TY, TZ) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYYW() (TA, TB, TY, TY, TW) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYYA() (TA, TB, TY, TY, TA) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYYB() (TA, TB, TY, TY, TB) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYZX() (TA, TB, TY, TZ, TX) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYZY() (TA, TB, TY, TZ, TY) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYZZ() (TA, TB, TY, TZ, TZ) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYZW() (TA, TB, TY, TZ, TW) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYZA() (TA, TB, TY, TZ, TA) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYZB() (TA, TB, TY, TZ, TB) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYWX() (TA, TB, TY, TW, TX) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYWY() (TA, TB, TY, TW, TY) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYWZ() (TA, TB, TY, TW, TZ) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYWW() (TA, TB, TY, TW, TW) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYWA() (TA, TB, TY, TW, TA) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYWB() (TA, TB, TY, TW, TB) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYAX() (TA, TB, TY, TA, TX) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYAY() (TA, TB, TY, TA, TY) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYAZ() (TA, TB, TY, TA, TZ) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYAW() (TA, TB, TY, TA, TW) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYAA() (TA, TB, TY, TA, TA) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYAB() (TA, TB, TY, TA, TB) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYBX() (TA, TB, TY, TB, TX) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYBY() (TA, TB, TY, TB, TY) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYBZ() (TA, TB, TY, TB, TZ) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYBW() (TA, TB, TY, TB, TW) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYBA() (TA, TB, TY, TB, TA) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABYBB() (TA, TB, TY, TB, TB) { return _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZXX() (TA, TB, TZ, TX, TX) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZXY() (TA, TB, TZ, TX, TY) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZXZ() (TA, TB, TZ, TX, TZ) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZXW() (TA, TB, TZ, TX, TW) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZXA() (TA, TB, TZ, TX, TA) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZXB() (TA, TB, TZ, TX, TB) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZYX() (TA, TB, TZ, TY, TX) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZYY() (TA, TB, TZ, TY, TY) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZYZ() (TA, TB, TZ, TY, TZ) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZYW() (TA, TB, TZ, TY, TW) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZYA() (TA, TB, TZ, TY, TA) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZYB() (TA, TB, TZ, TY, TB) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZZX() (TA, TB, TZ, TZ, TX) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZZY() (TA, TB, TZ, TZ, TY) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZZZ() (TA, TB, TZ, TZ, TZ) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZZW() (TA, TB, TZ, TZ, TW) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZZA() (TA, TB, TZ, TZ, TA) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZZB() (TA, TB, TZ, TZ, TB) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZWX() (TA, TB, TZ, TW, TX) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZWY() (TA, TB, TZ, TW, TY) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZWZ() (TA, TB, TZ, TW, TZ) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZWW() (TA, TB, TZ, TW, TW) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZWA() (TA, TB, TZ, TW, TA) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZWB() (TA, TB, TZ, TW, TB) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZAX() (TA, TB, TZ, TA, TX) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZAY() (TA, TB, TZ, TA, TY) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZAZ() (TA, TB, TZ, TA, TZ) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZAW() (TA, TB, TZ, TA, TW) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZAA() (TA, TB, TZ, TA, TA) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZAB() (TA, TB, TZ, TA, TB) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZBX() (TA, TB, TZ, TB, TX) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZBY() (TA, TB, TZ, TB, TY) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZBZ() (TA, TB, TZ, TB, TZ) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZBW() (TA, TB, TZ, TB, TW) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZBA() (TA, TB, TZ, TB, TA) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABZBB() (TA, TB, TZ, TB, TB) { return _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWXX() (TA, TB, TW, TX, TX) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWXY() (TA, TB, TW, TX, TY) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWXZ() (TA, TB, TW, TX, TZ) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWXW() (TA, TB, TW, TX, TW) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWXA() (TA, TB, TW, TX, TA) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWXB() (TA, TB, TW, TX, TB) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWYX() (TA, TB, TW, TY, TX) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWYY() (TA, TB, TW, TY, TY) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWYZ() (TA, TB, TW, TY, TZ) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWYW() (TA, TB, TW, TY, TW) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWYA() (TA, TB, TW, TY, TA) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWYB() (TA, TB, TW, TY, TB) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWZX() (TA, TB, TW, TZ, TX) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWZY() (TA, TB, TW, TZ, TY) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWZZ() (TA, TB, TW, TZ, TZ) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWZW() (TA, TB, TW, TZ, TW) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWZA() (TA, TB, TW, TZ, TA) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWZB() (TA, TB, TW, TZ, TB) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWWX() (TA, TB, TW, TW, TX) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWWY() (TA, TB, TW, TW, TY) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWWZ() (TA, TB, TW, TW, TZ) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWWW() (TA, TB, TW, TW, TW) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWWA() (TA, TB, TW, TW, TA) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWWB() (TA, TB, TW, TW, TB) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWAX() (TA, TB, TW, TA, TX) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWAY() (TA, TB, TW, TA, TY) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWAZ() (TA, TB, TW, TA, TZ) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWAW() (TA, TB, TW, TA, TW) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWAA() (TA, TB, TW, TA, TA) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWAB() (TA, TB, TW, TA, TB) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWBX() (TA, TB, TW, TB, TX) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWBY() (TA, TB, TW, TB, TY) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWBZ() (TA, TB, TW, TB, TZ) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWBW() (TA, TB, TW, TB, TW) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWBA() (TA, TB, TW, TB, TA) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABWBB() (TA, TB, TW, TB, TB) { return _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAXX() (TA, TB, TA, TX, TX) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAXY() (TA, TB, TA, TX, TY) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAXZ() (TA, TB, TA, TX, TZ) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAXW() (TA, TB, TA, TX, TW) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAXA() (TA, TB, TA, TX, TA) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAXB() (TA, TB, TA, TX, TB) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAYX() (TA, TB, TA, TY, TX) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAYY() (TA, TB, TA, TY, TY) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAYZ() (TA, TB, TA, TY, TZ) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAYW() (TA, TB, TA, TY, TW) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAYA() (TA, TB, TA, TY, TA) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAYB() (TA, TB, TA, TY, TB) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAZX() (TA, TB, TA, TZ, TX) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAZY() (TA, TB, TA, TZ, TY) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAZZ() (TA, TB, TA, TZ, TZ) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAZW() (TA, TB, TA, TZ, TW) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAZA() (TA, TB, TA, TZ, TA) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAZB() (TA, TB, TA, TZ, TB) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAWX() (TA, TB, TA, TW, TX) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAWY() (TA, TB, TA, TW, TY) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAWZ() (TA, TB, TA, TW, TZ) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAWW() (TA, TB, TA, TW, TW) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAWA() (TA, TB, TA, TW, TA) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAWB() (TA, TB, TA, TW, TB) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAAX() (TA, TB, TA, TA, TX) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAAY() (TA, TB, TA, TA, TY) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAAZ() (TA, TB, TA, TA, TZ) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAAW() (TA, TB, TA, TA, TW) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAAA() (TA, TB, TA, TA, TA) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABAAB() (TA, TB, TA, TA, TB) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABABX() (TA, TB, TA, TB, TX) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABABY() (TA, TB, TA, TB, TY) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABABZ() (TA, TB, TA, TB, TZ) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABABW() (TA, TB, TA, TB, TW) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABABA() (TA, TB, TA, TB, TA) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABABB() (TA, TB, TA, TB, TB) { return _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBXX() (TA, TB, TB, TX, TX) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBXY() (TA, TB, TB, TX, TY) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBXZ() (TA, TB, TB, TX, TZ) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBXW() (TA, TB, TB, TX, TW) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBXA() (TA, TB, TB, TX, TA) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBXB() (TA, TB, TB, TX, TB) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBYX() (TA, TB, TB, TY, TX) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBYY() (TA, TB, TB, TY, TY) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBYZ() (TA, TB, TB, TY, TZ) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBYW() (TA, TB, TB, TY, TW) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBYA() (TA, TB, TB, TY, TA) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBYB() (TA, TB, TB, TY, TB) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBZX() (TA, TB, TB, TZ, TX) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBZY() (TA, TB, TB, TZ, TY) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBZZ() (TA, TB, TB, TZ, TZ) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBZW() (TA, TB, TB, TZ, TW) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBZA() (TA, TB, TB, TZ, TA) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBZB() (TA, TB, TB, TZ, TB) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBWX() (TA, TB, TB, TW, TX) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBWY() (TA, TB, TB, TW, TY) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBWZ() (TA, TB, TB, TW, TZ) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBWW() (TA, TB, TB, TW, TW) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBWA() (TA, TB, TB, TW, TA) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBWB() (TA, TB, TB, TW, TB) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBAX() (TA, TB, TB, TA, TX) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBAY() (TA, TB, TB, TA, TY) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBAZ() (TA, TB, TB, TA, TZ) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBAW() (TA, TB, TB, TA, TW) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBAA() (TA, TB, TB, TA, TA) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBAB() (TA, TB, TB, TA, TB) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBBX() (TA, TB, TB, TB, TX) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBBY() (TA, TB, TB, TB, TY) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBBZ() (TA, TB, TB, TB, TZ) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBBW() (TA, TB, TB, TB, TW) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBBA() (TA, TB, TB, TB, TA) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) ABBBB() (TA, TB, TB, TB, TB) { return _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXXX() (TB, TX, TX, TX, TX) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXXY() (TB, TX, TX, TX, TY) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXXZ() (TB, TX, TX, TX, TZ) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXXW() (TB, TX, TX, TX, TW) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXXA() (TB, TX, TX, TX, TA) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXXB() (TB, TX, TX, TX, TB) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXYX() (TB, TX, TX, TY, TX) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXYY() (TB, TX, TX, TY, TY) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXYZ() (TB, TX, TX, TY, TZ) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXYW() (TB, TX, TX, TY, TW) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXYA() (TB, TX, TX, TY, TA) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXYB() (TB, TX, TX, TY, TB) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXZX() (TB, TX, TX, TZ, TX) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXZY() (TB, TX, TX, TZ, TY) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXZZ() (TB, TX, TX, TZ, TZ) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXZW() (TB, TX, TX, TZ, TW) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXZA() (TB, TX, TX, TZ, TA) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXZB() (TB, TX, TX, TZ, TB) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXWX() (TB, TX, TX, TW, TX) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXWY() (TB, TX, TX, TW, TY) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXWZ() (TB, TX, TX, TW, TZ) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXWW() (TB, TX, TX, TW, TW) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXWA() (TB, TX, TX, TW, TA) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXWB() (TB, TX, TX, TW, TB) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXAX() (TB, TX, TX, TA, TX) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXAY() (TB, TX, TX, TA, TY) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXAZ() (TB, TX, TX, TA, TZ) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXAW() (TB, TX, TX, TA, TW) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXAA() (TB, TX, TX, TA, TA) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXAB() (TB, TX, TX, TA, TB) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXBX() (TB, TX, TX, TB, TX) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXBY() (TB, TX, TX, TB, TY) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXBZ() (TB, TX, TX, TB, TZ) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXBW() (TB, TX, TX, TB, TW) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXBA() (TB, TX, TX, TB, TA) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXXBB() (TB, TX, TX, TB, TB) { return _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYXX() (TB, TX, TY, TX, TX) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYXY() (TB, TX, TY, TX, TY) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYXZ() (TB, TX, TY, TX, TZ) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYXW() (TB, TX, TY, TX, TW) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYXA() (TB, TX, TY, TX, TA) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYXB() (TB, TX, TY, TX, TB) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYYX() (TB, TX, TY, TY, TX) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYYY() (TB, TX, TY, TY, TY) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYYZ() (TB, TX, TY, TY, TZ) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYYW() (TB, TX, TY, TY, TW) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYYA() (TB, TX, TY, TY, TA) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYYB() (TB, TX, TY, TY, TB) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYZX() (TB, TX, TY, TZ, TX) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYZY() (TB, TX, TY, TZ, TY) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYZZ() (TB, TX, TY, TZ, TZ) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYZW() (TB, TX, TY, TZ, TW) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYZA() (TB, TX, TY, TZ, TA) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYZB() (TB, TX, TY, TZ, TB) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYWX() (TB, TX, TY, TW, TX) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYWY() (TB, TX, TY, TW, TY) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYWZ() (TB, TX, TY, TW, TZ) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYWW() (TB, TX, TY, TW, TW) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYWA() (TB, TX, TY, TW, TA) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYWB() (TB, TX, TY, TW, TB) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYAX() (TB, TX, TY, TA, TX) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYAY() (TB, TX, TY, TA, TY) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYAZ() (TB, TX, TY, TA, TZ) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYAW() (TB, TX, TY, TA, TW) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYAA() (TB, TX, TY, TA, TA) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYAB() (TB, TX, TY, TA, TB) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYBX() (TB, TX, TY, TB, TX) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYBY() (TB, TX, TY, TB, TY) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYBZ() (TB, TX, TY, TB, TZ) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYBW() (TB, TX, TY, TB, TW) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYBA() (TB, TX, TY, TB, TA) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXYBB() (TB, TX, TY, TB, TB) { return _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZXX() (TB, TX, TZ, TX, TX) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZXY() (TB, TX, TZ, TX, TY) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZXZ() (TB, TX, TZ, TX, TZ) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZXW() (TB, TX, TZ, TX, TW) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZXA() (TB, TX, TZ, TX, TA) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZXB() (TB, TX, TZ, TX, TB) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZYX() (TB, TX, TZ, TY, TX) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZYY() (TB, TX, TZ, TY, TY) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZYZ() (TB, TX, TZ, TY, TZ) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZYW() (TB, TX, TZ, TY, TW) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZYA() (TB, TX, TZ, TY, TA) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZYB() (TB, TX, TZ, TY, TB) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZZX() (TB, TX, TZ, TZ, TX) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZZY() (TB, TX, TZ, TZ, TY) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZZZ() (TB, TX, TZ, TZ, TZ) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZZW() (TB, TX, TZ, TZ, TW) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZZA() (TB, TX, TZ, TZ, TA) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZZB() (TB, TX, TZ, TZ, TB) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZWX() (TB, TX, TZ, TW, TX) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZWY() (TB, TX, TZ, TW, TY) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZWZ() (TB, TX, TZ, TW, TZ) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZWW() (TB, TX, TZ, TW, TW) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZWA() (TB, TX, TZ, TW, TA) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZWB() (TB, TX, TZ, TW, TB) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZAX() (TB, TX, TZ, TA, TX) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZAY() (TB, TX, TZ, TA, TY) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZAZ() (TB, TX, TZ, TA, TZ) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZAW() (TB, TX, TZ, TA, TW) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZAA() (TB, TX, TZ, TA, TA) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZAB() (TB, TX, TZ, TA, TB) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZBX() (TB, TX, TZ, TB, TX) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZBY() (TB, TX, TZ, TB, TY) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZBZ() (TB, TX, TZ, TB, TZ) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZBW() (TB, TX, TZ, TB, TW) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZBA() (TB, TX, TZ, TB, TA) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXZBB() (TB, TX, TZ, TB, TB) { return _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWXX() (TB, TX, TW, TX, TX) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWXY() (TB, TX, TW, TX, TY) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWXZ() (TB, TX, TW, TX, TZ) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWXW() (TB, TX, TW, TX, TW) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWXA() (TB, TX, TW, TX, TA) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWXB() (TB, TX, TW, TX, TB) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWYX() (TB, TX, TW, TY, TX) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWYY() (TB, TX, TW, TY, TY) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWYZ() (TB, TX, TW, TY, TZ) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWYW() (TB, TX, TW, TY, TW) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWYA() (TB, TX, TW, TY, TA) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWYB() (TB, TX, TW, TY, TB) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWZX() (TB, TX, TW, TZ, TX) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWZY() (TB, TX, TW, TZ, TY) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWZZ() (TB, TX, TW, TZ, TZ) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWZW() (TB, TX, TW, TZ, TW) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWZA() (TB, TX, TW, TZ, TA) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWZB() (TB, TX, TW, TZ, TB) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWWX() (TB, TX, TW, TW, TX) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWWY() (TB, TX, TW, TW, TY) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWWZ() (TB, TX, TW, TW, TZ) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWWW() (TB, TX, TW, TW, TW) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWWA() (TB, TX, TW, TW, TA) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWWB() (TB, TX, TW, TW, TB) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWAX() (TB, TX, TW, TA, TX) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWAY() (TB, TX, TW, TA, TY) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWAZ() (TB, TX, TW, TA, TZ) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWAW() (TB, TX, TW, TA, TW) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWAA() (TB, TX, TW, TA, TA) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWAB() (TB, TX, TW, TA, TB) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWBX() (TB, TX, TW, TB, TX) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWBY() (TB, TX, TW, TB, TY) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWBZ() (TB, TX, TW, TB, TZ) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWBW() (TB, TX, TW, TB, TW) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWBA() (TB, TX, TW, TB, TA) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXWBB() (TB, TX, TW, TB, TB) { return _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAXX() (TB, TX, TA, TX, TX) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAXY() (TB, TX, TA, TX, TY) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAXZ() (TB, TX, TA, TX, TZ) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAXW() (TB, TX, TA, TX, TW) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAXA() (TB, TX, TA, TX, TA) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAXB() (TB, TX, TA, TX, TB) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAYX() (TB, TX, TA, TY, TX) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAYY() (TB, TX, TA, TY, TY) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAYZ() (TB, TX, TA, TY, TZ) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAYW() (TB, TX, TA, TY, TW) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAYA() (TB, TX, TA, TY, TA) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAYB() (TB, TX, TA, TY, TB) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAZX() (TB, TX, TA, TZ, TX) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAZY() (TB, TX, TA, TZ, TY) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAZZ() (TB, TX, TA, TZ, TZ) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAZW() (TB, TX, TA, TZ, TW) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAZA() (TB, TX, TA, TZ, TA) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAZB() (TB, TX, TA, TZ, TB) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAWX() (TB, TX, TA, TW, TX) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAWY() (TB, TX, TA, TW, TY) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAWZ() (TB, TX, TA, TW, TZ) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAWW() (TB, TX, TA, TW, TW) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAWA() (TB, TX, TA, TW, TA) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAWB() (TB, TX, TA, TW, TB) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAAX() (TB, TX, TA, TA, TX) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAAY() (TB, TX, TA, TA, TY) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAAZ() (TB, TX, TA, TA, TZ) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAAW() (TB, TX, TA, TA, TW) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAAA() (TB, TX, TA, TA, TA) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXAAB() (TB, TX, TA, TA, TB) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXABX() (TB, TX, TA, TB, TX) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXABY() (TB, TX, TA, TB, TY) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXABZ() (TB, TX, TA, TB, TZ) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXABW() (TB, TX, TA, TB, TW) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXABA() (TB, TX, TA, TB, TA) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXABB() (TB, TX, TA, TB, TB) { return _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBXX() (TB, TX, TB, TX, TX) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBXY() (TB, TX, TB, TX, TY) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBXZ() (TB, TX, TB, TX, TZ) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBXW() (TB, TX, TB, TX, TW) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBXA() (TB, TX, TB, TX, TA) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBXB() (TB, TX, TB, TX, TB) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBYX() (TB, TX, TB, TY, TX) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBYY() (TB, TX, TB, TY, TY) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBYZ() (TB, TX, TB, TY, TZ) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBYW() (TB, TX, TB, TY, TW) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBYA() (TB, TX, TB, TY, TA) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBYB() (TB, TX, TB, TY, TB) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBZX() (TB, TX, TB, TZ, TX) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBZY() (TB, TX, TB, TZ, TY) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBZZ() (TB, TX, TB, TZ, TZ) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBZW() (TB, TX, TB, TZ, TW) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBZA() (TB, TX, TB, TZ, TA) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBZB() (TB, TX, TB, TZ, TB) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBWX() (TB, TX, TB, TW, TX) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBWY() (TB, TX, TB, TW, TY) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBWZ() (TB, TX, TB, TW, TZ) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBWW() (TB, TX, TB, TW, TW) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBWA() (TB, TX, TB, TW, TA) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBWB() (TB, TX, TB, TW, TB) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBAX() (TB, TX, TB, TA, TX) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBAY() (TB, TX, TB, TA, TY) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBAZ() (TB, TX, TB, TA, TZ) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBAW() (TB, TX, TB, TA, TW) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBAA() (TB, TX, TB, TA, TA) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBAB() (TB, TX, TB, TA, TB) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBBX() (TB, TX, TB, TB, TX) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBBY() (TB, TX, TB, TB, TY) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBBZ() (TB, TX, TB, TB, TZ) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBBW() (TB, TX, TB, TB, TW) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBBA() (TB, TX, TB, TB, TA) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BXBBB() (TB, TX, TB, TB, TB) { return _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXXX() (TB, TY, TX, TX, TX) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXXY() (TB, TY, TX, TX, TY) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXXZ() (TB, TY, TX, TX, TZ) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXXW() (TB, TY, TX, TX, TW) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXXA() (TB, TY, TX, TX, TA) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXXB() (TB, TY, TX, TX, TB) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXYX() (TB, TY, TX, TY, TX) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXYY() (TB, TY, TX, TY, TY) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXYZ() (TB, TY, TX, TY, TZ) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXYW() (TB, TY, TX, TY, TW) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXYA() (TB, TY, TX, TY, TA) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXYB() (TB, TY, TX, TY, TB) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXZX() (TB, TY, TX, TZ, TX) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXZY() (TB, TY, TX, TZ, TY) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXZZ() (TB, TY, TX, TZ, TZ) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXZW() (TB, TY, TX, TZ, TW) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXZA() (TB, TY, TX, TZ, TA) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXZB() (TB, TY, TX, TZ, TB) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXWX() (TB, TY, TX, TW, TX) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXWY() (TB, TY, TX, TW, TY) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXWZ() (TB, TY, TX, TW, TZ) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXWW() (TB, TY, TX, TW, TW) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXWA() (TB, TY, TX, TW, TA) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXWB() (TB, TY, TX, TW, TB) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXAX() (TB, TY, TX, TA, TX) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXAY() (TB, TY, TX, TA, TY) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXAZ() (TB, TY, TX, TA, TZ) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXAW() (TB, TY, TX, TA, TW) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXAA() (TB, TY, TX, TA, TA) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXAB() (TB, TY, TX, TA, TB) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXBX() (TB, TY, TX, TB, TX) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXBY() (TB, TY, TX, TB, TY) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXBZ() (TB, TY, TX, TB, TZ) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXBW() (TB, TY, TX, TB, TW) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXBA() (TB, TY, TX, TB, TA) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYXBB() (TB, TY, TX, TB, TB) { return _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYXX() (TB, TY, TY, TX, TX) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYXY() (TB, TY, TY, TX, TY) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYXZ() (TB, TY, TY, TX, TZ) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYXW() (TB, TY, TY, TX, TW) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYXA() (TB, TY, TY, TX, TA) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYXB() (TB, TY, TY, TX, TB) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYYX() (TB, TY, TY, TY, TX) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYYY() (TB, TY, TY, TY, TY) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYYZ() (TB, TY, TY, TY, TZ) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYYW() (TB, TY, TY, TY, TW) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYYA() (TB, TY, TY, TY, TA) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYYB() (TB, TY, TY, TY, TB) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYZX() (TB, TY, TY, TZ, TX) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYZY() (TB, TY, TY, TZ, TY) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYZZ() (TB, TY, TY, TZ, TZ) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYZW() (TB, TY, TY, TZ, TW) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYZA() (TB, TY, TY, TZ, TA) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYZB() (TB, TY, TY, TZ, TB) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYWX() (TB, TY, TY, TW, TX) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYWY() (TB, TY, TY, TW, TY) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYWZ() (TB, TY, TY, TW, TZ) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYWW() (TB, TY, TY, TW, TW) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYWA() (TB, TY, TY, TW, TA) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYWB() (TB, TY, TY, TW, TB) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYAX() (TB, TY, TY, TA, TX) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYAY() (TB, TY, TY, TA, TY) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYAZ() (TB, TY, TY, TA, TZ) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYAW() (TB, TY, TY, TA, TW) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYAA() (TB, TY, TY, TA, TA) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYAB() (TB, TY, TY, TA, TB) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYBX() (TB, TY, TY, TB, TX) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYBY() (TB, TY, TY, TB, TY) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYBZ() (TB, TY, TY, TB, TZ) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYBW() (TB, TY, TY, TB, TW) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYBA() (TB, TY, TY, TB, TA) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYYBB() (TB, TY, TY, TB, TB) { return _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZXX() (TB, TY, TZ, TX, TX) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZXY() (TB, TY, TZ, TX, TY) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZXZ() (TB, TY, TZ, TX, TZ) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZXW() (TB, TY, TZ, TX, TW) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZXA() (TB, TY, TZ, TX, TA) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZXB() (TB, TY, TZ, TX, TB) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZYX() (TB, TY, TZ, TY, TX) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZYY() (TB, TY, TZ, TY, TY) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZYZ() (TB, TY, TZ, TY, TZ) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZYW() (TB, TY, TZ, TY, TW) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZYA() (TB, TY, TZ, TY, TA) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZYB() (TB, TY, TZ, TY, TB) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZZX() (TB, TY, TZ, TZ, TX) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZZY() (TB, TY, TZ, TZ, TY) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZZZ() (TB, TY, TZ, TZ, TZ) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZZW() (TB, TY, TZ, TZ, TW) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZZA() (TB, TY, TZ, TZ, TA) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZZB() (TB, TY, TZ, TZ, TB) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZWX() (TB, TY, TZ, TW, TX) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZWY() (TB, TY, TZ, TW, TY) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZWZ() (TB, TY, TZ, TW, TZ) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZWW() (TB, TY, TZ, TW, TW) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZWA() (TB, TY, TZ, TW, TA) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZWB() (TB, TY, TZ, TW, TB) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZAX() (TB, TY, TZ, TA, TX) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZAY() (TB, TY, TZ, TA, TY) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZAZ() (TB, TY, TZ, TA, TZ) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZAW() (TB, TY, TZ, TA, TW) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZAA() (TB, TY, TZ, TA, TA) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZAB() (TB, TY, TZ, TA, TB) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZBX() (TB, TY, TZ, TB, TX) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZBY() (TB, TY, TZ, TB, TY) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZBZ() (TB, TY, TZ, TB, TZ) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZBW() (TB, TY, TZ, TB, TW) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZBA() (TB, TY, TZ, TB, TA) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYZBB() (TB, TY, TZ, TB, TB) { return _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWXX() (TB, TY, TW, TX, TX) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWXY() (TB, TY, TW, TX, TY) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWXZ() (TB, TY, TW, TX, TZ) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWXW() (TB, TY, TW, TX, TW) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWXA() (TB, TY, TW, TX, TA) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWXB() (TB, TY, TW, TX, TB) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWYX() (TB, TY, TW, TY, TX) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWYY() (TB, TY, TW, TY, TY) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWYZ() (TB, TY, TW, TY, TZ) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWYW() (TB, TY, TW, TY, TW) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWYA() (TB, TY, TW, TY, TA) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWYB() (TB, TY, TW, TY, TB) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWZX() (TB, TY, TW, TZ, TX) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWZY() (TB, TY, TW, TZ, TY) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWZZ() (TB, TY, TW, TZ, TZ) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWZW() (TB, TY, TW, TZ, TW) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWZA() (TB, TY, TW, TZ, TA) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWZB() (TB, TY, TW, TZ, TB) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWWX() (TB, TY, TW, TW, TX) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWWY() (TB, TY, TW, TW, TY) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWWZ() (TB, TY, TW, TW, TZ) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWWW() (TB, TY, TW, TW, TW) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWWA() (TB, TY, TW, TW, TA) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWWB() (TB, TY, TW, TW, TB) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWAX() (TB, TY, TW, TA, TX) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWAY() (TB, TY, TW, TA, TY) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWAZ() (TB, TY, TW, TA, TZ) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWAW() (TB, TY, TW, TA, TW) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWAA() (TB, TY, TW, TA, TA) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWAB() (TB, TY, TW, TA, TB) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWBX() (TB, TY, TW, TB, TX) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWBY() (TB, TY, TW, TB, TY) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWBZ() (TB, TY, TW, TB, TZ) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWBW() (TB, TY, TW, TB, TW) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWBA() (TB, TY, TW, TB, TA) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYWBB() (TB, TY, TW, TB, TB) { return _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAXX() (TB, TY, TA, TX, TX) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAXY() (TB, TY, TA, TX, TY) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAXZ() (TB, TY, TA, TX, TZ) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAXW() (TB, TY, TA, TX, TW) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAXA() (TB, TY, TA, TX, TA) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAXB() (TB, TY, TA, TX, TB) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAYX() (TB, TY, TA, TY, TX) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAYY() (TB, TY, TA, TY, TY) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAYZ() (TB, TY, TA, TY, TZ) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAYW() (TB, TY, TA, TY, TW) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAYA() (TB, TY, TA, TY, TA) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAYB() (TB, TY, TA, TY, TB) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAZX() (TB, TY, TA, TZ, TX) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAZY() (TB, TY, TA, TZ, TY) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAZZ() (TB, TY, TA, TZ, TZ) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAZW() (TB, TY, TA, TZ, TW) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAZA() (TB, TY, TA, TZ, TA) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAZB() (TB, TY, TA, TZ, TB) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAWX() (TB, TY, TA, TW, TX) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAWY() (TB, TY, TA, TW, TY) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAWZ() (TB, TY, TA, TW, TZ) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAWW() (TB, TY, TA, TW, TW) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAWA() (TB, TY, TA, TW, TA) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAWB() (TB, TY, TA, TW, TB) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAAX() (TB, TY, TA, TA, TX) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAAY() (TB, TY, TA, TA, TY) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAAZ() (TB, TY, TA, TA, TZ) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAAW() (TB, TY, TA, TA, TW) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAAA() (TB, TY, TA, TA, TA) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYAAB() (TB, TY, TA, TA, TB) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYABX() (TB, TY, TA, TB, TX) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYABY() (TB, TY, TA, TB, TY) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYABZ() (TB, TY, TA, TB, TZ) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYABW() (TB, TY, TA, TB, TW) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYABA() (TB, TY, TA, TB, TA) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYABB() (TB, TY, TA, TB, TB) { return _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBXX() (TB, TY, TB, TX, TX) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBXY() (TB, TY, TB, TX, TY) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBXZ() (TB, TY, TB, TX, TZ) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBXW() (TB, TY, TB, TX, TW) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBXA() (TB, TY, TB, TX, TA) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBXB() (TB, TY, TB, TX, TB) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBYX() (TB, TY, TB, TY, TX) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBYY() (TB, TY, TB, TY, TY) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBYZ() (TB, TY, TB, TY, TZ) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBYW() (TB, TY, TB, TY, TW) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBYA() (TB, TY, TB, TY, TA) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBYB() (TB, TY, TB, TY, TB) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBZX() (TB, TY, TB, TZ, TX) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBZY() (TB, TY, TB, TZ, TY) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBZZ() (TB, TY, TB, TZ, TZ) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBZW() (TB, TY, TB, TZ, TW) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBZA() (TB, TY, TB, TZ, TA) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBZB() (TB, TY, TB, TZ, TB) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBWX() (TB, TY, TB, TW, TX) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBWY() (TB, TY, TB, TW, TY) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBWZ() (TB, TY, TB, TW, TZ) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBWW() (TB, TY, TB, TW, TW) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBWA() (TB, TY, TB, TW, TA) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBWB() (TB, TY, TB, TW, TB) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBAX() (TB, TY, TB, TA, TX) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBAY() (TB, TY, TB, TA, TY) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBAZ() (TB, TY, TB, TA, TZ) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBAW() (TB, TY, TB, TA, TW) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBAA() (TB, TY, TB, TA, TA) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBAB() (TB, TY, TB, TA, TB) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBBX() (TB, TY, TB, TB, TX) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBBY() (TB, TY, TB, TB, TY) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBBZ() (TB, TY, TB, TB, TZ) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBBW() (TB, TY, TB, TB, TW) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBBA() (TB, TY, TB, TB, TA) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BYBBB() (TB, TY, TB, TB, TB) { return _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXXX() (TB, TZ, TX, TX, TX) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXXY() (TB, TZ, TX, TX, TY) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXXZ() (TB, TZ, TX, TX, TZ) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXXW() (TB, TZ, TX, TX, TW) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXXA() (TB, TZ, TX, TX, TA) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXXB() (TB, TZ, TX, TX, TB) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXYX() (TB, TZ, TX, TY, TX) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXYY() (TB, TZ, TX, TY, TY) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXYZ() (TB, TZ, TX, TY, TZ) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXYW() (TB, TZ, TX, TY, TW) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXYA() (TB, TZ, TX, TY, TA) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXYB() (TB, TZ, TX, TY, TB) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXZX() (TB, TZ, TX, TZ, TX) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXZY() (TB, TZ, TX, TZ, TY) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXZZ() (TB, TZ, TX, TZ, TZ) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXZW() (TB, TZ, TX, TZ, TW) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXZA() (TB, TZ, TX, TZ, TA) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXZB() (TB, TZ, TX, TZ, TB) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXWX() (TB, TZ, TX, TW, TX) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXWY() (TB, TZ, TX, TW, TY) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXWZ() (TB, TZ, TX, TW, TZ) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXWW() (TB, TZ, TX, TW, TW) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXWA() (TB, TZ, TX, TW, TA) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXWB() (TB, TZ, TX, TW, TB) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXAX() (TB, TZ, TX, TA, TX) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXAY() (TB, TZ, TX, TA, TY) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXAZ() (TB, TZ, TX, TA, TZ) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXAW() (TB, TZ, TX, TA, TW) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXAA() (TB, TZ, TX, TA, TA) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXAB() (TB, TZ, TX, TA, TB) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXBX() (TB, TZ, TX, TB, TX) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXBY() (TB, TZ, TX, TB, TY) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXBZ() (TB, TZ, TX, TB, TZ) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXBW() (TB, TZ, TX, TB, TW) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXBA() (TB, TZ, TX, TB, TA) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZXBB() (TB, TZ, TX, TB, TB) { return _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYXX() (TB, TZ, TY, TX, TX) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYXY() (TB, TZ, TY, TX, TY) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYXZ() (TB, TZ, TY, TX, TZ) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYXW() (TB, TZ, TY, TX, TW) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYXA() (TB, TZ, TY, TX, TA) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYXB() (TB, TZ, TY, TX, TB) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYYX() (TB, TZ, TY, TY, TX) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYYY() (TB, TZ, TY, TY, TY) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYYZ() (TB, TZ, TY, TY, TZ) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYYW() (TB, TZ, TY, TY, TW) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYYA() (TB, TZ, TY, TY, TA) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYYB() (TB, TZ, TY, TY, TB) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYZX() (TB, TZ, TY, TZ, TX) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYZY() (TB, TZ, TY, TZ, TY) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYZZ() (TB, TZ, TY, TZ, TZ) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYZW() (TB, TZ, TY, TZ, TW) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYZA() (TB, TZ, TY, TZ, TA) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYZB() (TB, TZ, TY, TZ, TB) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYWX() (TB, TZ, TY, TW, TX) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYWY() (TB, TZ, TY, TW, TY) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYWZ() (TB, TZ, TY, TW, TZ) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYWW() (TB, TZ, TY, TW, TW) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYWA() (TB, TZ, TY, TW, TA) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYWB() (TB, TZ, TY, TW, TB) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYAX() (TB, TZ, TY, TA, TX) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYAY() (TB, TZ, TY, TA, TY) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYAZ() (TB, TZ, TY, TA, TZ) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYAW() (TB, TZ, TY, TA, TW) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYAA() (TB, TZ, TY, TA, TA) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYAB() (TB, TZ, TY, TA, TB) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYBX() (TB, TZ, TY, TB, TX) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYBY() (TB, TZ, TY, TB, TY) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYBZ() (TB, TZ, TY, TB, TZ) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYBW() (TB, TZ, TY, TB, TW) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYBA() (TB, TZ, TY, TB, TA) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZYBB() (TB, TZ, TY, TB, TB) { return _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZXX() (TB, TZ, TZ, TX, TX) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZXY() (TB, TZ, TZ, TX, TY) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZXZ() (TB, TZ, TZ, TX, TZ) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZXW() (TB, TZ, TZ, TX, TW) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZXA() (TB, TZ, TZ, TX, TA) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZXB() (TB, TZ, TZ, TX, TB) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZYX() (TB, TZ, TZ, TY, TX) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZYY() (TB, TZ, TZ, TY, TY) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZYZ() (TB, TZ, TZ, TY, TZ) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZYW() (TB, TZ, TZ, TY, TW) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZYA() (TB, TZ, TZ, TY, TA) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZYB() (TB, TZ, TZ, TY, TB) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZZX() (TB, TZ, TZ, TZ, TX) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZZY() (TB, TZ, TZ, TZ, TY) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZZZ() (TB, TZ, TZ, TZ, TZ) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZZW() (TB, TZ, TZ, TZ, TW) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZZA() (TB, TZ, TZ, TZ, TA) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZZB() (TB, TZ, TZ, TZ, TB) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZWX() (TB, TZ, TZ, TW, TX) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZWY() (TB, TZ, TZ, TW, TY) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZWZ() (TB, TZ, TZ, TW, TZ) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZWW() (TB, TZ, TZ, TW, TW) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZWA() (TB, TZ, TZ, TW, TA) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZWB() (TB, TZ, TZ, TW, TB) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZAX() (TB, TZ, TZ, TA, TX) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZAY() (TB, TZ, TZ, TA, TY) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZAZ() (TB, TZ, TZ, TA, TZ) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZAW() (TB, TZ, TZ, TA, TW) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZAA() (TB, TZ, TZ, TA, TA) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZAB() (TB, TZ, TZ, TA, TB) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZBX() (TB, TZ, TZ, TB, TX) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZBY() (TB, TZ, TZ, TB, TY) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZBZ() (TB, TZ, TZ, TB, TZ) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZBW() (TB, TZ, TZ, TB, TW) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZBA() (TB, TZ, TZ, TB, TA) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZZBB() (TB, TZ, TZ, TB, TB) { return _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWXX() (TB, TZ, TW, TX, TX) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWXY() (TB, TZ, TW, TX, TY) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWXZ() (TB, TZ, TW, TX, TZ) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWXW() (TB, TZ, TW, TX, TW) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWXA() (TB, TZ, TW, TX, TA) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWXB() (TB, TZ, TW, TX, TB) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWYX() (TB, TZ, TW, TY, TX) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWYY() (TB, TZ, TW, TY, TY) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWYZ() (TB, TZ, TW, TY, TZ) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWYW() (TB, TZ, TW, TY, TW) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWYA() (TB, TZ, TW, TY, TA) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWYB() (TB, TZ, TW, TY, TB) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWZX() (TB, TZ, TW, TZ, TX) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWZY() (TB, TZ, TW, TZ, TY) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWZZ() (TB, TZ, TW, TZ, TZ) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWZW() (TB, TZ, TW, TZ, TW) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWZA() (TB, TZ, TW, TZ, TA) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWZB() (TB, TZ, TW, TZ, TB) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWWX() (TB, TZ, TW, TW, TX) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWWY() (TB, TZ, TW, TW, TY) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWWZ() (TB, TZ, TW, TW, TZ) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWWW() (TB, TZ, TW, TW, TW) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWWA() (TB, TZ, TW, TW, TA) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWWB() (TB, TZ, TW, TW, TB) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWAX() (TB, TZ, TW, TA, TX) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWAY() (TB, TZ, TW, TA, TY) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWAZ() (TB, TZ, TW, TA, TZ) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWAW() (TB, TZ, TW, TA, TW) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWAA() (TB, TZ, TW, TA, TA) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWAB() (TB, TZ, TW, TA, TB) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWBX() (TB, TZ, TW, TB, TX) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWBY() (TB, TZ, TW, TB, TY) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWBZ() (TB, TZ, TW, TB, TZ) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWBW() (TB, TZ, TW, TB, TW) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWBA() (TB, TZ, TW, TB, TA) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZWBB() (TB, TZ, TW, TB, TB) { return _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAXX() (TB, TZ, TA, TX, TX) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAXY() (TB, TZ, TA, TX, TY) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAXZ() (TB, TZ, TA, TX, TZ) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAXW() (TB, TZ, TA, TX, TW) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAXA() (TB, TZ, TA, TX, TA) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAXB() (TB, TZ, TA, TX, TB) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAYX() (TB, TZ, TA, TY, TX) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAYY() (TB, TZ, TA, TY, TY) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAYZ() (TB, TZ, TA, TY, TZ) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAYW() (TB, TZ, TA, TY, TW) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAYA() (TB, TZ, TA, TY, TA) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAYB() (TB, TZ, TA, TY, TB) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAZX() (TB, TZ, TA, TZ, TX) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAZY() (TB, TZ, TA, TZ, TY) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAZZ() (TB, TZ, TA, TZ, TZ) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAZW() (TB, TZ, TA, TZ, TW) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAZA() (TB, TZ, TA, TZ, TA) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAZB() (TB, TZ, TA, TZ, TB) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAWX() (TB, TZ, TA, TW, TX) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAWY() (TB, TZ, TA, TW, TY) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAWZ() (TB, TZ, TA, TW, TZ) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAWW() (TB, TZ, TA, TW, TW) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAWA() (TB, TZ, TA, TW, TA) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAWB() (TB, TZ, TA, TW, TB) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAAX() (TB, TZ, TA, TA, TX) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAAY() (TB, TZ, TA, TA, TY) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAAZ() (TB, TZ, TA, TA, TZ) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAAW() (TB, TZ, TA, TA, TW) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAAA() (TB, TZ, TA, TA, TA) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZAAB() (TB, TZ, TA, TA, TB) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZABX() (TB, TZ, TA, TB, TX) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZABY() (TB, TZ, TA, TB, TY) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZABZ() (TB, TZ, TA, TB, TZ) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZABW() (TB, TZ, TA, TB, TW) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZABA() (TB, TZ, TA, TB, TA) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZABB() (TB, TZ, TA, TB, TB) { return _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBXX() (TB, TZ, TB, TX, TX) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBXY() (TB, TZ, TB, TX, TY) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBXZ() (TB, TZ, TB, TX, TZ) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBXW() (TB, TZ, TB, TX, TW) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBXA() (TB, TZ, TB, TX, TA) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBXB() (TB, TZ, TB, TX, TB) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBYX() (TB, TZ, TB, TY, TX) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBYY() (TB, TZ, TB, TY, TY) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBYZ() (TB, TZ, TB, TY, TZ) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBYW() (TB, TZ, TB, TY, TW) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBYA() (TB, TZ, TB, TY, TA) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBYB() (TB, TZ, TB, TY, TB) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBZX() (TB, TZ, TB, TZ, TX) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBZY() (TB, TZ, TB, TZ, TY) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBZZ() (TB, TZ, TB, TZ, TZ) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBZW() (TB, TZ, TB, TZ, TW) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBZA() (TB, TZ, TB, TZ, TA) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBZB() (TB, TZ, TB, TZ, TB) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBWX() (TB, TZ, TB, TW, TX) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBWY() (TB, TZ, TB, TW, TY) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBWZ() (TB, TZ, TB, TW, TZ) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBWW() (TB, TZ, TB, TW, TW) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBWA() (TB, TZ, TB, TW, TA) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBWB() (TB, TZ, TB, TW, TB) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBAX() (TB, TZ, TB, TA, TX) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBAY() (TB, TZ, TB, TA, TY) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBAZ() (TB, TZ, TB, TA, TZ) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBAW() (TB, TZ, TB, TA, TW) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBAA() (TB, TZ, TB, TA, TA) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBAB() (TB, TZ, TB, TA, TB) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBBX() (TB, TZ, TB, TB, TX) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBBY() (TB, TZ, TB, TB, TY) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBBZ() (TB, TZ, TB, TB, TZ) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBBW() (TB, TZ, TB, TB, TW) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBBA() (TB, TZ, TB, TB, TA) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BZBBB() (TB, TZ, TB, TB, TB) { return _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXXX() (TB, TW, TX, TX, TX) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXXY() (TB, TW, TX, TX, TY) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXXZ() (TB, TW, TX, TX, TZ) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXXW() (TB, TW, TX, TX, TW) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXXA() (TB, TW, TX, TX, TA) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXXB() (TB, TW, TX, TX, TB) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXYX() (TB, TW, TX, TY, TX) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXYY() (TB, TW, TX, TY, TY) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXYZ() (TB, TW, TX, TY, TZ) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXYW() (TB, TW, TX, TY, TW) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXYA() (TB, TW, TX, TY, TA) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXYB() (TB, TW, TX, TY, TB) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXZX() (TB, TW, TX, TZ, TX) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXZY() (TB, TW, TX, TZ, TY) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXZZ() (TB, TW, TX, TZ, TZ) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXZW() (TB, TW, TX, TZ, TW) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXZA() (TB, TW, TX, TZ, TA) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXZB() (TB, TW, TX, TZ, TB) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXWX() (TB, TW, TX, TW, TX) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXWY() (TB, TW, TX, TW, TY) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXWZ() (TB, TW, TX, TW, TZ) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXWW() (TB, TW, TX, TW, TW) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXWA() (TB, TW, TX, TW, TA) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXWB() (TB, TW, TX, TW, TB) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXAX() (TB, TW, TX, TA, TX) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXAY() (TB, TW, TX, TA, TY) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXAZ() (TB, TW, TX, TA, TZ) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXAW() (TB, TW, TX, TA, TW) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXAA() (TB, TW, TX, TA, TA) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXAB() (TB, TW, TX, TA, TB) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXBX() (TB, TW, TX, TB, TX) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXBY() (TB, TW, TX, TB, TY) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXBZ() (TB, TW, TX, TB, TZ) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXBW() (TB, TW, TX, TB, TW) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXBA() (TB, TW, TX, TB, TA) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWXBB() (TB, TW, TX, TB, TB) { return _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYXX() (TB, TW, TY, TX, TX) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYXY() (TB, TW, TY, TX, TY) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYXZ() (TB, TW, TY, TX, TZ) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYXW() (TB, TW, TY, TX, TW) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYXA() (TB, TW, TY, TX, TA) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYXB() (TB, TW, TY, TX, TB) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYYX() (TB, TW, TY, TY, TX) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYYY() (TB, TW, TY, TY, TY) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYYZ() (TB, TW, TY, TY, TZ) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYYW() (TB, TW, TY, TY, TW) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYYA() (TB, TW, TY, TY, TA) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYYB() (TB, TW, TY, TY, TB) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYZX() (TB, TW, TY, TZ, TX) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYZY() (TB, TW, TY, TZ, TY) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYZZ() (TB, TW, TY, TZ, TZ) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYZW() (TB, TW, TY, TZ, TW) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYZA() (TB, TW, TY, TZ, TA) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYZB() (TB, TW, TY, TZ, TB) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYWX() (TB, TW, TY, TW, TX) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYWY() (TB, TW, TY, TW, TY) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYWZ() (TB, TW, TY, TW, TZ) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYWW() (TB, TW, TY, TW, TW) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYWA() (TB, TW, TY, TW, TA) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYWB() (TB, TW, TY, TW, TB) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYAX() (TB, TW, TY, TA, TX) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYAY() (TB, TW, TY, TA, TY) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYAZ() (TB, TW, TY, TA, TZ) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYAW() (TB, TW, TY, TA, TW) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYAA() (TB, TW, TY, TA, TA) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYAB() (TB, TW, TY, TA, TB) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYBX() (TB, TW, TY, TB, TX) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYBY() (TB, TW, TY, TB, TY) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYBZ() (TB, TW, TY, TB, TZ) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYBW() (TB, TW, TY, TB, TW) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYBA() (TB, TW, TY, TB, TA) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWYBB() (TB, TW, TY, TB, TB) { return _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZXX() (TB, TW, TZ, TX, TX) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZXY() (TB, TW, TZ, TX, TY) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZXZ() (TB, TW, TZ, TX, TZ) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZXW() (TB, TW, TZ, TX, TW) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZXA() (TB, TW, TZ, TX, TA) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZXB() (TB, TW, TZ, TX, TB) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZYX() (TB, TW, TZ, TY, TX) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZYY() (TB, TW, TZ, TY, TY) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZYZ() (TB, TW, TZ, TY, TZ) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZYW() (TB, TW, TZ, TY, TW) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZYA() (TB, TW, TZ, TY, TA) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZYB() (TB, TW, TZ, TY, TB) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZZX() (TB, TW, TZ, TZ, TX) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZZY() (TB, TW, TZ, TZ, TY) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZZZ() (TB, TW, TZ, TZ, TZ) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZZW() (TB, TW, TZ, TZ, TW) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZZA() (TB, TW, TZ, TZ, TA) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZZB() (TB, TW, TZ, TZ, TB) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZWX() (TB, TW, TZ, TW, TX) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZWY() (TB, TW, TZ, TW, TY) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZWZ() (TB, TW, TZ, TW, TZ) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZWW() (TB, TW, TZ, TW, TW) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZWA() (TB, TW, TZ, TW, TA) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZWB() (TB, TW, TZ, TW, TB) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZAX() (TB, TW, TZ, TA, TX) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZAY() (TB, TW, TZ, TA, TY) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZAZ() (TB, TW, TZ, TA, TZ) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZAW() (TB, TW, TZ, TA, TW) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZAA() (TB, TW, TZ, TA, TA) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZAB() (TB, TW, TZ, TA, TB) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZBX() (TB, TW, TZ, TB, TX) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZBY() (TB, TW, TZ, TB, TY) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZBZ() (TB, TW, TZ, TB, TZ) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZBW() (TB, TW, TZ, TB, TW) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZBA() (TB, TW, TZ, TB, TA) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWZBB() (TB, TW, TZ, TB, TB) { return _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWXX() (TB, TW, TW, TX, TX) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWXY() (TB, TW, TW, TX, TY) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWXZ() (TB, TW, TW, TX, TZ) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWXW() (TB, TW, TW, TX, TW) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWXA() (TB, TW, TW, TX, TA) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWXB() (TB, TW, TW, TX, TB) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWYX() (TB, TW, TW, TY, TX) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWYY() (TB, TW, TW, TY, TY) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWYZ() (TB, TW, TW, TY, TZ) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWYW() (TB, TW, TW, TY, TW) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWYA() (TB, TW, TW, TY, TA) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWYB() (TB, TW, TW, TY, TB) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWZX() (TB, TW, TW, TZ, TX) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWZY() (TB, TW, TW, TZ, TY) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWZZ() (TB, TW, TW, TZ, TZ) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWZW() (TB, TW, TW, TZ, TW) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWZA() (TB, TW, TW, TZ, TA) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWZB() (TB, TW, TW, TZ, TB) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWWX() (TB, TW, TW, TW, TX) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWWY() (TB, TW, TW, TW, TY) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWWZ() (TB, TW, TW, TW, TZ) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWWW() (TB, TW, TW, TW, TW) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWWA() (TB, TW, TW, TW, TA) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWWB() (TB, TW, TW, TW, TB) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWAX() (TB, TW, TW, TA, TX) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWAY() (TB, TW, TW, TA, TY) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWAZ() (TB, TW, TW, TA, TZ) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWAW() (TB, TW, TW, TA, TW) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWAA() (TB, TW, TW, TA, TA) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWAB() (TB, TW, TW, TA, TB) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWBX() (TB, TW, TW, TB, TX) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWBY() (TB, TW, TW, TB, TY) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWBZ() (TB, TW, TW, TB, TZ) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWBW() (TB, TW, TW, TB, TW) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWBA() (TB, TW, TW, TB, TA) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWWBB() (TB, TW, TW, TB, TB) { return _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAXX() (TB, TW, TA, TX, TX) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAXY() (TB, TW, TA, TX, TY) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAXZ() (TB, TW, TA, TX, TZ) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAXW() (TB, TW, TA, TX, TW) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAXA() (TB, TW, TA, TX, TA) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAXB() (TB, TW, TA, TX, TB) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAYX() (TB, TW, TA, TY, TX) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAYY() (TB, TW, TA, TY, TY) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAYZ() (TB, TW, TA, TY, TZ) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAYW() (TB, TW, TA, TY, TW) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAYA() (TB, TW, TA, TY, TA) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAYB() (TB, TW, TA, TY, TB) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAZX() (TB, TW, TA, TZ, TX) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAZY() (TB, TW, TA, TZ, TY) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAZZ() (TB, TW, TA, TZ, TZ) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAZW() (TB, TW, TA, TZ, TW) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAZA() (TB, TW, TA, TZ, TA) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAZB() (TB, TW, TA, TZ, TB) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAWX() (TB, TW, TA, TW, TX) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAWY() (TB, TW, TA, TW, TY) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAWZ() (TB, TW, TA, TW, TZ) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAWW() (TB, TW, TA, TW, TW) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAWA() (TB, TW, TA, TW, TA) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAWB() (TB, TW, TA, TW, TB) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAAX() (TB, TW, TA, TA, TX) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAAY() (TB, TW, TA, TA, TY) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAAZ() (TB, TW, TA, TA, TZ) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAAW() (TB, TW, TA, TA, TW) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAAA() (TB, TW, TA, TA, TA) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWAAB() (TB, TW, TA, TA, TB) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWABX() (TB, TW, TA, TB, TX) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWABY() (TB, TW, TA, TB, TY) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWABZ() (TB, TW, TA, TB, TZ) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWABW() (TB, TW, TA, TB, TW) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWABA() (TB, TW, TA, TB, TA) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWABB() (TB, TW, TA, TB, TB) { return _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBXX() (TB, TW, TB, TX, TX) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBXY() (TB, TW, TB, TX, TY) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBXZ() (TB, TW, TB, TX, TZ) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBXW() (TB, TW, TB, TX, TW) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBXA() (TB, TW, TB, TX, TA) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBXB() (TB, TW, TB, TX, TB) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBYX() (TB, TW, TB, TY, TX) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBYY() (TB, TW, TB, TY, TY) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBYZ() (TB, TW, TB, TY, TZ) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBYW() (TB, TW, TB, TY, TW) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBYA() (TB, TW, TB, TY, TA) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBYB() (TB, TW, TB, TY, TB) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBZX() (TB, TW, TB, TZ, TX) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBZY() (TB, TW, TB, TZ, TY) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBZZ() (TB, TW, TB, TZ, TZ) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBZW() (TB, TW, TB, TZ, TW) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBZA() (TB, TW, TB, TZ, TA) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBZB() (TB, TW, TB, TZ, TB) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBWX() (TB, TW, TB, TW, TX) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBWY() (TB, TW, TB, TW, TY) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBWZ() (TB, TW, TB, TW, TZ) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBWW() (TB, TW, TB, TW, TW) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBWA() (TB, TW, TB, TW, TA) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBWB() (TB, TW, TB, TW, TB) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBAX() (TB, TW, TB, TA, TX) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBAY() (TB, TW, TB, TA, TY) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBAZ() (TB, TW, TB, TA, TZ) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBAW() (TB, TW, TB, TA, TW) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBAA() (TB, TW, TB, TA, TA) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBAB() (TB, TW, TB, TA, TB) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBBX() (TB, TW, TB, TB, TX) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBBY() (TB, TW, TB, TB, TY) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBBZ() (TB, TW, TB, TB, TZ) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBBW() (TB, TW, TB, TB, TW) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBBA() (TB, TW, TB, TB, TA) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BWBBB() (TB, TW, TB, TB, TB) { return _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXXX() (TB, TA, TX, TX, TX) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXXY() (TB, TA, TX, TX, TY) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXXZ() (TB, TA, TX, TX, TZ) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXXW() (TB, TA, TX, TX, TW) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXXA() (TB, TA, TX, TX, TA) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXXB() (TB, TA, TX, TX, TB) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXYX() (TB, TA, TX, TY, TX) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXYY() (TB, TA, TX, TY, TY) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXYZ() (TB, TA, TX, TY, TZ) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXYW() (TB, TA, TX, TY, TW) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXYA() (TB, TA, TX, TY, TA) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXYB() (TB, TA, TX, TY, TB) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXZX() (TB, TA, TX, TZ, TX) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXZY() (TB, TA, TX, TZ, TY) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXZZ() (TB, TA, TX, TZ, TZ) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXZW() (TB, TA, TX, TZ, TW) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXZA() (TB, TA, TX, TZ, TA) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXZB() (TB, TA, TX, TZ, TB) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXWX() (TB, TA, TX, TW, TX) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXWY() (TB, TA, TX, TW, TY) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXWZ() (TB, TA, TX, TW, TZ) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXWW() (TB, TA, TX, TW, TW) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXWA() (TB, TA, TX, TW, TA) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXWB() (TB, TA, TX, TW, TB) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXAX() (TB, TA, TX, TA, TX) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXAY() (TB, TA, TX, TA, TY) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXAZ() (TB, TA, TX, TA, TZ) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXAW() (TB, TA, TX, TA, TW) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXAA() (TB, TA, TX, TA, TA) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXAB() (TB, TA, TX, TA, TB) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXBX() (TB, TA, TX, TB, TX) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXBY() (TB, TA, TX, TB, TY) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXBZ() (TB, TA, TX, TB, TZ) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXBW() (TB, TA, TX, TB, TW) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXBA() (TB, TA, TX, TB, TA) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAXBB() (TB, TA, TX, TB, TB) { return _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYXX() (TB, TA, TY, TX, TX) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYXY() (TB, TA, TY, TX, TY) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYXZ() (TB, TA, TY, TX, TZ) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYXW() (TB, TA, TY, TX, TW) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYXA() (TB, TA, TY, TX, TA) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYXB() (TB, TA, TY, TX, TB) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYYX() (TB, TA, TY, TY, TX) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYYY() (TB, TA, TY, TY, TY) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYYZ() (TB, TA, TY, TY, TZ) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYYW() (TB, TA, TY, TY, TW) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYYA() (TB, TA, TY, TY, TA) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYYB() (TB, TA, TY, TY, TB) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYZX() (TB, TA, TY, TZ, TX) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYZY() (TB, TA, TY, TZ, TY) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYZZ() (TB, TA, TY, TZ, TZ) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYZW() (TB, TA, TY, TZ, TW) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYZA() (TB, TA, TY, TZ, TA) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYZB() (TB, TA, TY, TZ, TB) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYWX() (TB, TA, TY, TW, TX) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYWY() (TB, TA, TY, TW, TY) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYWZ() (TB, TA, TY, TW, TZ) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYWW() (TB, TA, TY, TW, TW) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYWA() (TB, TA, TY, TW, TA) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYWB() (TB, TA, TY, TW, TB) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYAX() (TB, TA, TY, TA, TX) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYAY() (TB, TA, TY, TA, TY) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYAZ() (TB, TA, TY, TA, TZ) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYAW() (TB, TA, TY, TA, TW) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYAA() (TB, TA, TY, TA, TA) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYAB() (TB, TA, TY, TA, TB) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYBX() (TB, TA, TY, TB, TX) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYBY() (TB, TA, TY, TB, TY) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYBZ() (TB, TA, TY, TB, TZ) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYBW() (TB, TA, TY, TB, TW) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYBA() (TB, TA, TY, TB, TA) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAYBB() (TB, TA, TY, TB, TB) { return _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZXX() (TB, TA, TZ, TX, TX) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZXY() (TB, TA, TZ, TX, TY) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZXZ() (TB, TA, TZ, TX, TZ) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZXW() (TB, TA, TZ, TX, TW) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZXA() (TB, TA, TZ, TX, TA) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZXB() (TB, TA, TZ, TX, TB) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZYX() (TB, TA, TZ, TY, TX) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZYY() (TB, TA, TZ, TY, TY) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZYZ() (TB, TA, TZ, TY, TZ) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZYW() (TB, TA, TZ, TY, TW) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZYA() (TB, TA, TZ, TY, TA) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZYB() (TB, TA, TZ, TY, TB) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZZX() (TB, TA, TZ, TZ, TX) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZZY() (TB, TA, TZ, TZ, TY) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZZZ() (TB, TA, TZ, TZ, TZ) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZZW() (TB, TA, TZ, TZ, TW) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZZA() (TB, TA, TZ, TZ, TA) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZZB() (TB, TA, TZ, TZ, TB) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZWX() (TB, TA, TZ, TW, TX) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZWY() (TB, TA, TZ, TW, TY) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZWZ() (TB, TA, TZ, TW, TZ) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZWW() (TB, TA, TZ, TW, TW) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZWA() (TB, TA, TZ, TW, TA) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZWB() (TB, TA, TZ, TW, TB) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZAX() (TB, TA, TZ, TA, TX) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZAY() (TB, TA, TZ, TA, TY) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZAZ() (TB, TA, TZ, TA, TZ) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZAW() (TB, TA, TZ, TA, TW) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZAA() (TB, TA, TZ, TA, TA) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZAB() (TB, TA, TZ, TA, TB) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZBX() (TB, TA, TZ, TB, TX) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZBY() (TB, TA, TZ, TB, TY) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZBZ() (TB, TA, TZ, TB, TZ) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZBW() (TB, TA, TZ, TB, TW) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZBA() (TB, TA, TZ, TB, TA) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAZBB() (TB, TA, TZ, TB, TB) { return _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWXX() (TB, TA, TW, TX, TX) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWXY() (TB, TA, TW, TX, TY) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWXZ() (TB, TA, TW, TX, TZ) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWXW() (TB, TA, TW, TX, TW) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWXA() (TB, TA, TW, TX, TA) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWXB() (TB, TA, TW, TX, TB) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWYX() (TB, TA, TW, TY, TX) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWYY() (TB, TA, TW, TY, TY) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWYZ() (TB, TA, TW, TY, TZ) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWYW() (TB, TA, TW, TY, TW) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWYA() (TB, TA, TW, TY, TA) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWYB() (TB, TA, TW, TY, TB) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWZX() (TB, TA, TW, TZ, TX) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWZY() (TB, TA, TW, TZ, TY) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWZZ() (TB, TA, TW, TZ, TZ) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWZW() (TB, TA, TW, TZ, TW) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWZA() (TB, TA, TW, TZ, TA) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWZB() (TB, TA, TW, TZ, TB) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWWX() (TB, TA, TW, TW, TX) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWWY() (TB, TA, TW, TW, TY) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWWZ() (TB, TA, TW, TW, TZ) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWWW() (TB, TA, TW, TW, TW) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWWA() (TB, TA, TW, TW, TA) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWWB() (TB, TA, TW, TW, TB) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWAX() (TB, TA, TW, TA, TX) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWAY() (TB, TA, TW, TA, TY) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWAZ() (TB, TA, TW, TA, TZ) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWAW() (TB, TA, TW, TA, TW) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWAA() (TB, TA, TW, TA, TA) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWAB() (TB, TA, TW, TA, TB) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWBX() (TB, TA, TW, TB, TX) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWBY() (TB, TA, TW, TB, TY) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWBZ() (TB, TA, TW, TB, TZ) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWBW() (TB, TA, TW, TB, TW) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWBA() (TB, TA, TW, TB, TA) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAWBB() (TB, TA, TW, TB, TB) { return _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAXX() (TB, TA, TA, TX, TX) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAXY() (TB, TA, TA, TX, TY) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAXZ() (TB, TA, TA, TX, TZ) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAXW() (TB, TA, TA, TX, TW) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAXA() (TB, TA, TA, TX, TA) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAXB() (TB, TA, TA, TX, TB) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAYX() (TB, TA, TA, TY, TX) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAYY() (TB, TA, TA, TY, TY) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAYZ() (TB, TA, TA, TY, TZ) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAYW() (TB, TA, TA, TY, TW) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAYA() (TB, TA, TA, TY, TA) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAYB() (TB, TA, TA, TY, TB) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAZX() (TB, TA, TA, TZ, TX) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAZY() (TB, TA, TA, TZ, TY) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAZZ() (TB, TA, TA, TZ, TZ) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAZW() (TB, TA, TA, TZ, TW) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAZA() (TB, TA, TA, TZ, TA) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAZB() (TB, TA, TA, TZ, TB) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAWX() (TB, TA, TA, TW, TX) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAWY() (TB, TA, TA, TW, TY) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAWZ() (TB, TA, TA, TW, TZ) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAWW() (TB, TA, TA, TW, TW) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAWA() (TB, TA, TA, TW, TA) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAWB() (TB, TA, TA, TW, TB) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAAX() (TB, TA, TA, TA, TX) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAAY() (TB, TA, TA, TA, TY) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAAZ() (TB, TA, TA, TA, TZ) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAAW() (TB, TA, TA, TA, TW) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAAA() (TB, TA, TA, TA, TA) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAAAB() (TB, TA, TA, TA, TB) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAABX() (TB, TA, TA, TB, TX) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAABY() (TB, TA, TA, TB, TY) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAABZ() (TB, TA, TA, TB, TZ) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAABW() (TB, TA, TA, TB, TW) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAABA() (TB, TA, TA, TB, TA) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BAABB() (TB, TA, TA, TB, TB) { return _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABXX() (TB, TA, TB, TX, TX) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABXY() (TB, TA, TB, TX, TY) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABXZ() (TB, TA, TB, TX, TZ) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABXW() (TB, TA, TB, TX, TW) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABXA() (TB, TA, TB, TX, TA) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABXB() (TB, TA, TB, TX, TB) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABYX() (TB, TA, TB, TY, TX) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABYY() (TB, TA, TB, TY, TY) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABYZ() (TB, TA, TB, TY, TZ) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABYW() (TB, TA, TB, TY, TW) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABYA() (TB, TA, TB, TY, TA) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABYB() (TB, TA, TB, TY, TB) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABZX() (TB, TA, TB, TZ, TX) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABZY() (TB, TA, TB, TZ, TY) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABZZ() (TB, TA, TB, TZ, TZ) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABZW() (TB, TA, TB, TZ, TW) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABZA() (TB, TA, TB, TZ, TA) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABZB() (TB, TA, TB, TZ, TB) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABWX() (TB, TA, TB, TW, TX) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABWY() (TB, TA, TB, TW, TY) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABWZ() (TB, TA, TB, TW, TZ) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABWW() (TB, TA, TB, TW, TW) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABWA() (TB, TA, TB, TW, TA) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABWB() (TB, TA, TB, TW, TB) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABAX() (TB, TA, TB, TA, TX) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABAY() (TB, TA, TB, TA, TY) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABAZ() (TB, TA, TB, TA, TZ) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABAW() (TB, TA, TB, TA, TW) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABAA() (TB, TA, TB, TA, TA) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABAB() (TB, TA, TB, TA, TB) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABBX() (TB, TA, TB, TB, TX) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABBY() (TB, TA, TB, TB, TY) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABBZ() (TB, TA, TB, TB, TZ) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABBW() (TB, TA, TB, TB, TW) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABBA() (TB, TA, TB, TB, TA) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BABBB() (TB, TA, TB, TB, TB) { return _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXXX() (TB, TB, TX, TX, TX) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXXY() (TB, TB, TX, TX, TY) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXXZ() (TB, TB, TX, TX, TZ) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXXW() (TB, TB, TX, TX, TW) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXXA() (TB, TB, TX, TX, TA) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXXB() (TB, TB, TX, TX, TB) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXYX() (TB, TB, TX, TY, TX) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXYY() (TB, TB, TX, TY, TY) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXYZ() (TB, TB, TX, TY, TZ) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXYW() (TB, TB, TX, TY, TW) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXYA() (TB, TB, TX, TY, TA) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXYB() (TB, TB, TX, TY, TB) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXZX() (TB, TB, TX, TZ, TX) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXZY() (TB, TB, TX, TZ, TY) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXZZ() (TB, TB, TX, TZ, TZ) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXZW() (TB, TB, TX, TZ, TW) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXZA() (TB, TB, TX, TZ, TA) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXZB() (TB, TB, TX, TZ, TB) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXWX() (TB, TB, TX, TW, TX) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXWY() (TB, TB, TX, TW, TY) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXWZ() (TB, TB, TX, TW, TZ) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXWW() (TB, TB, TX, TW, TW) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXWA() (TB, TB, TX, TW, TA) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXWB() (TB, TB, TX, TW, TB) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXAX() (TB, TB, TX, TA, TX) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXAY() (TB, TB, TX, TA, TY) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXAZ() (TB, TB, TX, TA, TZ) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXAW() (TB, TB, TX, TA, TW) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXAA() (TB, TB, TX, TA, TA) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXAB() (TB, TB, TX, TA, TB) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXBX() (TB, TB, TX, TB, TX) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXBY() (TB, TB, TX, TB, TY) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXBZ() (TB, TB, TX, TB, TZ) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXBW() (TB, TB, TX, TB, TW) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXBA() (TB, TB, TX, TB, TA) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBXBB() (TB, TB, TX, TB, TB) { return _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYXX() (TB, TB, TY, TX, TX) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYXY() (TB, TB, TY, TX, TY) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYXZ() (TB, TB, TY, TX, TZ) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYXW() (TB, TB, TY, TX, TW) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYXA() (TB, TB, TY, TX, TA) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYXB() (TB, TB, TY, TX, TB) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYYX() (TB, TB, TY, TY, TX) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYYY() (TB, TB, TY, TY, TY) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYYZ() (TB, TB, TY, TY, TZ) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYYW() (TB, TB, TY, TY, TW) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYYA() (TB, TB, TY, TY, TA) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYYB() (TB, TB, TY, TY, TB) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYZX() (TB, TB, TY, TZ, TX) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYZY() (TB, TB, TY, TZ, TY) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYZZ() (TB, TB, TY, TZ, TZ) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYZW() (TB, TB, TY, TZ, TW) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYZA() (TB, TB, TY, TZ, TA) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYZB() (TB, TB, TY, TZ, TB) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYWX() (TB, TB, TY, TW, TX) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYWY() (TB, TB, TY, TW, TY) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYWZ() (TB, TB, TY, TW, TZ) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYWW() (TB, TB, TY, TW, TW) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYWA() (TB, TB, TY, TW, TA) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYWB() (TB, TB, TY, TW, TB) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYAX() (TB, TB, TY, TA, TX) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYAY() (TB, TB, TY, TA, TY) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYAZ() (TB, TB, TY, TA, TZ) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYAW() (TB, TB, TY, TA, TW) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYAA() (TB, TB, TY, TA, TA) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYAB() (TB, TB, TY, TA, TB) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYBX() (TB, TB, TY, TB, TX) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYBY() (TB, TB, TY, TB, TY) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYBZ() (TB, TB, TY, TB, TZ) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYBW() (TB, TB, TY, TB, TW) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYBA() (TB, TB, TY, TB, TA) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBYBB() (TB, TB, TY, TB, TB) { return _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZXX() (TB, TB, TZ, TX, TX) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZXY() (TB, TB, TZ, TX, TY) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZXZ() (TB, TB, TZ, TX, TZ) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZXW() (TB, TB, TZ, TX, TW) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZXA() (TB, TB, TZ, TX, TA) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZXB() (TB, TB, TZ, TX, TB) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZYX() (TB, TB, TZ, TY, TX) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZYY() (TB, TB, TZ, TY, TY) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZYZ() (TB, TB, TZ, TY, TZ) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZYW() (TB, TB, TZ, TY, TW) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZYA() (TB, TB, TZ, TY, TA) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZYB() (TB, TB, TZ, TY, TB) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZZX() (TB, TB, TZ, TZ, TX) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZZY() (TB, TB, TZ, TZ, TY) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZZZ() (TB, TB, TZ, TZ, TZ) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZZW() (TB, TB, TZ, TZ, TW) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZZA() (TB, TB, TZ, TZ, TA) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZZB() (TB, TB, TZ, TZ, TB) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZWX() (TB, TB, TZ, TW, TX) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZWY() (TB, TB, TZ, TW, TY) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZWZ() (TB, TB, TZ, TW, TZ) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZWW() (TB, TB, TZ, TW, TW) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZWA() (TB, TB, TZ, TW, TA) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZWB() (TB, TB, TZ, TW, TB) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZAX() (TB, TB, TZ, TA, TX) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZAY() (TB, TB, TZ, TA, TY) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZAZ() (TB, TB, TZ, TA, TZ) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZAW() (TB, TB, TZ, TA, TW) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZAA() (TB, TB, TZ, TA, TA) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZAB() (TB, TB, TZ, TA, TB) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZBX() (TB, TB, TZ, TB, TX) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZBY() (TB, TB, TZ, TB, TY) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZBZ() (TB, TB, TZ, TB, TZ) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZBW() (TB, TB, TZ, TB, TW) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZBA() (TB, TB, TZ, TB, TA) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBZBB() (TB, TB, TZ, TB, TB) { return _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWXX() (TB, TB, TW, TX, TX) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWXY() (TB, TB, TW, TX, TY) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWXZ() (TB, TB, TW, TX, TZ) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWXW() (TB, TB, TW, TX, TW) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWXA() (TB, TB, TW, TX, TA) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWXB() (TB, TB, TW, TX, TB) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWYX() (TB, TB, TW, TY, TX) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWYY() (TB, TB, TW, TY, TY) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWYZ() (TB, TB, TW, TY, TZ) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWYW() (TB, TB, TW, TY, TW) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWYA() (TB, TB, TW, TY, TA) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWYB() (TB, TB, TW, TY, TB) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWZX() (TB, TB, TW, TZ, TX) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWZY() (TB, TB, TW, TZ, TY) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWZZ() (TB, TB, TW, TZ, TZ) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWZW() (TB, TB, TW, TZ, TW) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWZA() (TB, TB, TW, TZ, TA) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWZB() (TB, TB, TW, TZ, TB) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWWX() (TB, TB, TW, TW, TX) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWWY() (TB, TB, TW, TW, TY) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWWZ() (TB, TB, TW, TW, TZ) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWWW() (TB, TB, TW, TW, TW) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWWA() (TB, TB, TW, TW, TA) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWWB() (TB, TB, TW, TW, TB) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWAX() (TB, TB, TW, TA, TX) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWAY() (TB, TB, TW, TA, TY) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWAZ() (TB, TB, TW, TA, TZ) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWAW() (TB, TB, TW, TA, TW) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWAA() (TB, TB, TW, TA, TA) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWAB() (TB, TB, TW, TA, TB) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWBX() (TB, TB, TW, TB, TX) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWBY() (TB, TB, TW, TB, TY) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWBZ() (TB, TB, TW, TB, TZ) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWBW() (TB, TB, TW, TB, TW) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWBA() (TB, TB, TW, TB, TA) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBWBB() (TB, TB, TW, TB, TB) { return _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAXX() (TB, TB, TA, TX, TX) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAXY() (TB, TB, TA, TX, TY) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAXZ() (TB, TB, TA, TX, TZ) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAXW() (TB, TB, TA, TX, TW) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAXA() (TB, TB, TA, TX, TA) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAXB() (TB, TB, TA, TX, TB) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAYX() (TB, TB, TA, TY, TX) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAYY() (TB, TB, TA, TY, TY) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAYZ() (TB, TB, TA, TY, TZ) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAYW() (TB, TB, TA, TY, TW) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAYA() (TB, TB, TA, TY, TA) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAYB() (TB, TB, TA, TY, TB) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAZX() (TB, TB, TA, TZ, TX) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAZY() (TB, TB, TA, TZ, TY) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAZZ() (TB, TB, TA, TZ, TZ) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAZW() (TB, TB, TA, TZ, TW) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAZA() (TB, TB, TA, TZ, TA) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAZB() (TB, TB, TA, TZ, TB) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAWX() (TB, TB, TA, TW, TX) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAWY() (TB, TB, TA, TW, TY) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAWZ() (TB, TB, TA, TW, TZ) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAWW() (TB, TB, TA, TW, TW) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAWA() (TB, TB, TA, TW, TA) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAWB() (TB, TB, TA, TW, TB) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAAX() (TB, TB, TA, TA, TX) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAAY() (TB, TB, TA, TA, TY) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAAZ() (TB, TB, TA, TA, TZ) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAAW() (TB, TB, TA, TA, TW) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAAA() (TB, TB, TA, TA, TA) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBAAB() (TB, TB, TA, TA, TB) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBABX() (TB, TB, TA, TB, TX) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBABY() (TB, TB, TA, TB, TY) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBABZ() (TB, TB, TA, TB, TZ) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBABW() (TB, TB, TA, TB, TW) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBABA() (TB, TB, TA, TB, TA) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBABB() (TB, TB, TA, TB, TB) { return _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBXX() (TB, TB, TB, TX, TX) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBXY() (TB, TB, TB, TX, TY) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBXZ() (TB, TB, TB, TX, TZ) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBXW() (TB, TB, TB, TX, TW) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBXA() (TB, TB, TB, TX, TA) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBXB() (TB, TB, TB, TX, TB) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBYX() (TB, TB, TB, TY, TX) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBYY() (TB, TB, TB, TY, TY) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBYZ() (TB, TB, TB, TY, TZ) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBYW() (TB, TB, TB, TY, TW) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBYA() (TB, TB, TB, TY, TA) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBYB() (TB, TB, TB, TY, TB) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBZX() (TB, TB, TB, TZ, TX) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBZY() (TB, TB, TB, TZ, TY) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBZZ() (TB, TB, TB, TZ, TZ) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBZW() (TB, TB, TB, TZ, TW) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBZA() (TB, TB, TB, TZ, TA) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBZB() (TB, TB, TB, TZ, TB) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBWX() (TB, TB, TB, TW, TX) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBWY() (TB, TB, TB, TW, TY) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBWZ() (TB, TB, TB, TW, TZ) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBWW() (TB, TB, TB, TW, TW) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBWA() (TB, TB, TB, TW, TA) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBWB() (TB, TB, TB, TW, TB) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBAX() (TB, TB, TB, TA, TX) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBAY() (TB, TB, TB, TA, TY) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBAZ() (TB, TB, TB, TA, TZ) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBAW() (TB, TB, TB, TA, TW) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBAA() (TB, TB, TB, TA, TA) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBAB() (TB, TB, TB, TA, TB) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value(), _v.B.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBBX() (TB, TB, TB, TB, TX) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.X.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBBY() (TB, TB, TB, TB, TY) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Y.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBBZ() (TB, TB, TB, TB, TZ) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.Z.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBBW() (TB, TB, TB, TB, TW) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.W.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBBA() (TB, TB, TB, TB, TA) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.A.Value() }
func (_v XYZWABTyped[TX, TY, TZ, TW, TA, TB]) BBBBB() (TB, TB, TB, TB, TB) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
