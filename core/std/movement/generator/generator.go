package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"os"
	"text/template"
)

type params struct {
	Pkg  string
	Type string
}

const tmplSrc = `// Code generated by gen; DO NOT EDIT.

//go:generate go run ./generator -type=Widget -pkg=movement -out=tester.go
package {{ .Pkg }}

import "fmt"

type {{ .Type }}Wrapper struct {
	V {{ .Type }}
}

func (w {{ .Type }}Wrapper) String() string {
	return fmt.Sprintf("%v", w.V)
}
`

func main() {
	var out, typ, pkg string
	flag.StringVar(&out, "out", "", "output file")
	flag.StringVar(&typ, "type", "", "type name")
	flag.StringVar(&pkg, "pkg", "", "package name")
	flag.Parse()

	if out == "" || typ == "" || pkg == "" {
		fmt.Fprintln(os.Stderr, "usage: -out file -type Name -pkg package")
		os.Exit(2)
	}

	tpl := template.Must(template.New("gen").Parse(tmplSrc))
	var buf bytes.Buffer
	if err := tpl.Execute(&buf, params{Pkg: pkg, Type: typ}); err != nil {
		panic(err)
	}

	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		// If formatting fails, still write raw output to help debugging.
		formatted = buf.Bytes()
	}

	if err := os.WriteFile(out, formatted, 0o644); err != nil {
		panic(err)
	}
}
