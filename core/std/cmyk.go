// Code generated by 'gen/letters'; DO NOT EDIT.
//go:generate go run ../gen/letters -pkg std -name CMYK -nameL cmyk -cmpts C,M,Y,K -cmptsL c,m,y,k -out ../std/cmyk.go
package std

import (
	"core/sys/atlas"
	"core/sys/name/format"
	"core/sys/num"
	"core/sys/num/bounded"
	"core/sys/support"
	"fmt"
	"strings"
)

// CMYK is a 4D vector of like-typed bounded.Numeric components.
//
// NOTE: If you'd like asymmetric types, please see CMYKTyped.
type CMYK[T num.Primitive] = CMYKTyped[T, T, T, T]

// CMYKTyped is a 4D vector of asymmetrically typed bounded.Numeric components.
//
// NOTE: If you'd like symmetric types, please see CMYK.
type CMYKTyped[TC num.Primitive, TM num.Primitive, TY num.Primitive, TK num.Primitive] struct {
	Entity
	C bounded.Numeric[TC]
	M bounded.Numeric[TM]
	Y bounded.Numeric[TY]
	K bounded.Numeric[TK]
}

func NewCMYK[T num.Primitive](c T, m T, y T, k T, name ...string) *CMYK[T] {
	typed := CMYK[T](*NewCMYKTyped[T, T, T, T](c, m, y, k, name...))
	return &typed
}

func NewCMYKTyped[TC num.Primitive, TM num.Primitive, TY num.Primitive, TK num.Primitive](c TC, m TM, y TY, k TK, name ...string) *CMYKTyped[TC, TM, TY, TK] {
	minC := num.MinValue[TC]()
	maxC := num.MaxValue[TC]()
	if num.IsFloat[TC]() {
		minC = 0
		maxC = 1
	}
	minM := num.MinValue[TM]()
	maxM := num.MaxValue[TM]()
	if num.IsFloat[TM]() {
		minM = 0
		maxM = 1
	}
	minY := num.MinValue[TY]()
	maxY := num.MaxValue[TY]()
	if num.IsFloat[TY]() {
		minY = 0
		maxY = 1
	}
	minK := num.MinValue[TK]()
	maxK := num.MaxValue[TK]()
	if num.IsFloat[TK]() {
		minK = 0
		maxK = 1
	}

	_v := &CMYKTyped[TC, TM, TY, TK]{}
	_v.Entity = NewEntity[format.Default]()
	_v.SetBoundaries(minC, maxC, minM, maxM, minY, maxY, minK, maxK)
	_v.Set(c, m, y, k)
	if len(name) > 0 {
		_v.SetName(name[0])
	}
	return _v
}

func (_v *CMYKTyped[TC, TM, TY, TK]) Name() string {
	return _v.GivenName.Name
}

func (_v *CMYKTyped[TC, TM, TY, TK]) SetName(name string) *CMYKTyped[TC, TM, TY, TK] {
	_v.GivenName.Name = name
	return _v
}

func (_v *CMYKTyped[TC, TM, TY, TK]) Set(c TC, m TM, y TY, k TK) *CMYKTyped[TC, TM, TY, TK] {
	_ = _v.C.Set(c)
	_ = _v.M.Set(m)
	_ = _v.Y.Set(y)
	_ = _v.K.Set(k)
	return _v
}

func (_v *CMYKTyped[TC, TM, TY, TK]) SetClamp(clamp bool) *CMYKTyped[TC, TM, TY, TK] {
	_v.C.Clamp = clamp
	_v.M.Clamp = clamp
	_v.Y.Clamp = clamp
	_v.K.Clamp = clamp
	return _v
}

func (_v *CMYKTyped[TC, TM, TY, TK]) SetBoundaries(minC, maxC TC, minM, maxM TM, minY, maxY TY, minK, maxK TK) *CMYKTyped[TC, TM, TY, TK] {
	_ = _v.C.SetBoundaries(minC, maxC)
	_ = _v.M.SetBoundaries(minM, maxM)
	_ = _v.Y.SetBoundaries(minY, maxY)
	_ = _v.K.SetBoundaries(minK, maxK)
	return _v
}

func (_v *CMYKTyped[TC, TM, TY, TK]) Component(index uint) (bounded.INumeric, error) {
	switch index {
	case 0:
		return &_v.C, nil
	case 1:
		return &_v.M, nil
	case 2:
		return &_v.Y, nil
	case 3:
		return &_v.K, nil
	default:
		return nil, fmt.Errorf("cannot get component index %d of an CMYK vector", index)
	}
}

func (_v *CMYKTyped[TC, TM, TY, TK]) Components() []bounded.INumeric {
	return []bounded.INumeric{&_v.C, &_v.M, &_v.Y, &_v.K}
}

func (_v *CMYKTyped[TC, TM, TY, TK]) ComponentByName(name string) (bounded.INumeric, error) {
	switch strings.ToLower(name) {
	case "c":
		return &_v.C, nil
	case "m":
		return &_v.M, nil
	case "y":
		return &_v.Y, nil
	case "k":
		return &_v.K, nil
	default:
		return nil, fmt.Errorf("cannot get component \"%s\" of an CMYK vector", name)
	}
}

func (_v *CMYKTyped[TC, TM, TY, TK]) ComponentLen() uint {
	return 4
}

func (_v *CMYKTyped[TC, TM, TY, TK]) SetComponent(index uint, value any) error {
	switch index {
	case 0:
		 _v.C.Set(value.(TC))
	case 1:
		 _v.M.Set(value.(TM))
	case 2:
		 _v.Y.Set(value.(TY))
	case 3:
		 _v.K.Set(value.(TK))
	default:
		return fmt.Errorf("cannot set component index %d of an CMYK vector", index)
	}
	return nil
}

func (_v *CMYKTyped[TC, TM, TY, TK]) SetComponents(values []any) error {
	if len(values) != 4 {
		return fmt.Errorf("cannot set %d components of 4D vector CMYK", len(values), )
	}
	if _, ok := values[0].(TC); !ok {
		return fmt.Errorf("expected type %T for component C, got type %T", TC(0), values[0])	}
	if _, ok := values[1].(TM); !ok {
		return fmt.Errorf("expected type %T for component M, got type %T", TM(0), values[1])	}
	if _, ok := values[2].(TY); !ok {
		return fmt.Errorf("expected type %T for component Y, got type %T", TY(0), values[2])	}
	if _, ok := values[3].(TK); !ok {
		return fmt.Errorf("expected type %T for component K, got type %T", TK(0), values[3])	}
	_v.C.Set(values[0].(TC))
	_v.M.Set(values[1].(TM))
	_v.Y.Set(values[2].(TY))
	_v.K.Set(values[3].(TK))
	return nil
}

func (_v *CMYKTyped[TC, TM, TY, TK]) SetComponentByName(name string, value any) error {
	switch strings.ToLower(name) {
	case "c":
		 _v.C.Set(value.(TC))
	case "m":
		 _v.M.Set(value.(TM))
	case "y":
		 _v.Y.Set(value.(TY))
	case "k":
		 _v.K.Set(value.(TK))
	default:
		return fmt.Errorf("cannot set component \"%s\" of an CMYK vector", name)
	}
	return nil
}

func (_v CMYKTyped[TC, TM, TY, TK]) String() string {
	if atlas.CompactVectors {
		return fmt.Sprintf("{c: %v, m: %v, y: %v, k: %v}", _v.C.String(), _v.M.String(), _v.Y.String(), _v.K.String())
	}
	 if support.AllSameTypes(TC(0), TM(0), TY(0), TK(0)) {
		return fmt.Sprintf("cmyk[%T]{%v, %v, %v, %v}(\"%v\")", TC(0), _v.C.String(), _v.M.String(), _v.Y.String(), _v.K.String(), _v.GivenName.Name)
	}
	return fmt.Sprintf("cmyk[%T, %T, %T, %T]{%v, %v, %v, %v}(\"%v\")", TC(0), TM(0), TY(0), TK(0), _v.C.String(), _v.M.String(), _v.Y.String(), _v.K.String(), _v.GivenName.Name)
}

func (_v *CMYKTyped[TC, TM, TY, TK]) CC() (TC, TC) { return _v.C.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CM() (TC, TM) { return _v.C.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CY() (TC, TY) { return _v.C.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CK() (TC, TK) { return _v.C.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MC() (TM, TC) { return _v.M.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MM() (TM, TM) { return _v.M.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MY() (TM, TY) { return _v.M.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MK() (TM, TK) { return _v.M.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YC() (TY, TC) { return _v.Y.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YM() (TY, TM) { return _v.Y.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YY() (TY, TY) { return _v.Y.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YK() (TY, TK) { return _v.Y.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KC() (TK, TC) { return _v.K.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KM() (TK, TM) { return _v.K.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KY() (TK, TY) { return _v.K.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KK() (TK, TK) { return _v.K.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CCC() (TC, TC, TC) { return _v.C.Value(), _v.C.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CCM() (TC, TC, TM) { return _v.C.Value(), _v.C.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CCY() (TC, TC, TY) { return _v.C.Value(), _v.C.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CCK() (TC, TC, TK) { return _v.C.Value(), _v.C.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CMC() (TC, TM, TC) { return _v.C.Value(), _v.M.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CMM() (TC, TM, TM) { return _v.C.Value(), _v.M.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CMY() (TC, TM, TY) { return _v.C.Value(), _v.M.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CMK() (TC, TM, TK) { return _v.C.Value(), _v.M.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CYC() (TC, TY, TC) { return _v.C.Value(), _v.Y.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CYM() (TC, TY, TM) { return _v.C.Value(), _v.Y.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CYY() (TC, TY, TY) { return _v.C.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CYK() (TC, TY, TK) { return _v.C.Value(), _v.Y.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CKC() (TC, TK, TC) { return _v.C.Value(), _v.K.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CKM() (TC, TK, TM) { return _v.C.Value(), _v.K.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CKY() (TC, TK, TY) { return _v.C.Value(), _v.K.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CKK() (TC, TK, TK) { return _v.C.Value(), _v.K.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MCC() (TM, TC, TC) { return _v.M.Value(), _v.C.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MCM() (TM, TC, TM) { return _v.M.Value(), _v.C.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MCY() (TM, TC, TY) { return _v.M.Value(), _v.C.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MCK() (TM, TC, TK) { return _v.M.Value(), _v.C.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MMC() (TM, TM, TC) { return _v.M.Value(), _v.M.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MMM() (TM, TM, TM) { return _v.M.Value(), _v.M.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MMY() (TM, TM, TY) { return _v.M.Value(), _v.M.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MMK() (TM, TM, TK) { return _v.M.Value(), _v.M.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MYC() (TM, TY, TC) { return _v.M.Value(), _v.Y.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MYM() (TM, TY, TM) { return _v.M.Value(), _v.Y.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MYY() (TM, TY, TY) { return _v.M.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MYK() (TM, TY, TK) { return _v.M.Value(), _v.Y.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MKC() (TM, TK, TC) { return _v.M.Value(), _v.K.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MKM() (TM, TK, TM) { return _v.M.Value(), _v.K.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MKY() (TM, TK, TY) { return _v.M.Value(), _v.K.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MKK() (TM, TK, TK) { return _v.M.Value(), _v.K.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YCC() (TY, TC, TC) { return _v.Y.Value(), _v.C.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YCM() (TY, TC, TM) { return _v.Y.Value(), _v.C.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YCY() (TY, TC, TY) { return _v.Y.Value(), _v.C.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YCK() (TY, TC, TK) { return _v.Y.Value(), _v.C.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YMC() (TY, TM, TC) { return _v.Y.Value(), _v.M.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YMM() (TY, TM, TM) { return _v.Y.Value(), _v.M.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YMY() (TY, TM, TY) { return _v.Y.Value(), _v.M.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YMK() (TY, TM, TK) { return _v.Y.Value(), _v.M.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YYC() (TY, TY, TC) { return _v.Y.Value(), _v.Y.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YYM() (TY, TY, TM) { return _v.Y.Value(), _v.Y.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YYY() (TY, TY, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YYK() (TY, TY, TK) { return _v.Y.Value(), _v.Y.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YKC() (TY, TK, TC) { return _v.Y.Value(), _v.K.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YKM() (TY, TK, TM) { return _v.Y.Value(), _v.K.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YKY() (TY, TK, TY) { return _v.Y.Value(), _v.K.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YKK() (TY, TK, TK) { return _v.Y.Value(), _v.K.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KCC() (TK, TC, TC) { return _v.K.Value(), _v.C.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KCM() (TK, TC, TM) { return _v.K.Value(), _v.C.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KCY() (TK, TC, TY) { return _v.K.Value(), _v.C.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KCK() (TK, TC, TK) { return _v.K.Value(), _v.C.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KMC() (TK, TM, TC) { return _v.K.Value(), _v.M.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KMM() (TK, TM, TM) { return _v.K.Value(), _v.M.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KMY() (TK, TM, TY) { return _v.K.Value(), _v.M.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KMK() (TK, TM, TK) { return _v.K.Value(), _v.M.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KYC() (TK, TY, TC) { return _v.K.Value(), _v.Y.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KYM() (TK, TY, TM) { return _v.K.Value(), _v.Y.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KYY() (TK, TY, TY) { return _v.K.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KYK() (TK, TY, TK) { return _v.K.Value(), _v.Y.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KKC() (TK, TK, TC) { return _v.K.Value(), _v.K.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KKM() (TK, TK, TM) { return _v.K.Value(), _v.K.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KKY() (TK, TK, TY) { return _v.K.Value(), _v.K.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KKK() (TK, TK, TK) { return _v.K.Value(), _v.K.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CCCC() (TC, TC, TC, TC) { return _v.C.Value(), _v.C.Value(), _v.C.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CCCM() (TC, TC, TC, TM) { return _v.C.Value(), _v.C.Value(), _v.C.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CCCY() (TC, TC, TC, TY) { return _v.C.Value(), _v.C.Value(), _v.C.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CCCK() (TC, TC, TC, TK) { return _v.C.Value(), _v.C.Value(), _v.C.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CCMC() (TC, TC, TM, TC) { return _v.C.Value(), _v.C.Value(), _v.M.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CCMM() (TC, TC, TM, TM) { return _v.C.Value(), _v.C.Value(), _v.M.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CCMY() (TC, TC, TM, TY) { return _v.C.Value(), _v.C.Value(), _v.M.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CCMK() (TC, TC, TM, TK) { return _v.C.Value(), _v.C.Value(), _v.M.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CCYC() (TC, TC, TY, TC) { return _v.C.Value(), _v.C.Value(), _v.Y.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CCYM() (TC, TC, TY, TM) { return _v.C.Value(), _v.C.Value(), _v.Y.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CCYY() (TC, TC, TY, TY) { return _v.C.Value(), _v.C.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CCYK() (TC, TC, TY, TK) { return _v.C.Value(), _v.C.Value(), _v.Y.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CCKC() (TC, TC, TK, TC) { return _v.C.Value(), _v.C.Value(), _v.K.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CCKM() (TC, TC, TK, TM) { return _v.C.Value(), _v.C.Value(), _v.K.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CCKY() (TC, TC, TK, TY) { return _v.C.Value(), _v.C.Value(), _v.K.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CCKK() (TC, TC, TK, TK) { return _v.C.Value(), _v.C.Value(), _v.K.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CMCC() (TC, TM, TC, TC) { return _v.C.Value(), _v.M.Value(), _v.C.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CMCM() (TC, TM, TC, TM) { return _v.C.Value(), _v.M.Value(), _v.C.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CMCY() (TC, TM, TC, TY) { return _v.C.Value(), _v.M.Value(), _v.C.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CMCK() (TC, TM, TC, TK) { return _v.C.Value(), _v.M.Value(), _v.C.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CMMC() (TC, TM, TM, TC) { return _v.C.Value(), _v.M.Value(), _v.M.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CMMM() (TC, TM, TM, TM) { return _v.C.Value(), _v.M.Value(), _v.M.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CMMY() (TC, TM, TM, TY) { return _v.C.Value(), _v.M.Value(), _v.M.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CMMK() (TC, TM, TM, TK) { return _v.C.Value(), _v.M.Value(), _v.M.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CMYC() (TC, TM, TY, TC) { return _v.C.Value(), _v.M.Value(), _v.Y.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CMYM() (TC, TM, TY, TM) { return _v.C.Value(), _v.M.Value(), _v.Y.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CMYY() (TC, TM, TY, TY) { return _v.C.Value(), _v.M.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CMYK() (TC, TM, TY, TK) { return _v.C.Value(), _v.M.Value(), _v.Y.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CMKC() (TC, TM, TK, TC) { return _v.C.Value(), _v.M.Value(), _v.K.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CMKM() (TC, TM, TK, TM) { return _v.C.Value(), _v.M.Value(), _v.K.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CMKY() (TC, TM, TK, TY) { return _v.C.Value(), _v.M.Value(), _v.K.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CMKK() (TC, TM, TK, TK) { return _v.C.Value(), _v.M.Value(), _v.K.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CYCC() (TC, TY, TC, TC) { return _v.C.Value(), _v.Y.Value(), _v.C.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CYCM() (TC, TY, TC, TM) { return _v.C.Value(), _v.Y.Value(), _v.C.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CYCY() (TC, TY, TC, TY) { return _v.C.Value(), _v.Y.Value(), _v.C.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CYCK() (TC, TY, TC, TK) { return _v.C.Value(), _v.Y.Value(), _v.C.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CYMC() (TC, TY, TM, TC) { return _v.C.Value(), _v.Y.Value(), _v.M.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CYMM() (TC, TY, TM, TM) { return _v.C.Value(), _v.Y.Value(), _v.M.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CYMY() (TC, TY, TM, TY) { return _v.C.Value(), _v.Y.Value(), _v.M.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CYMK() (TC, TY, TM, TK) { return _v.C.Value(), _v.Y.Value(), _v.M.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CYYC() (TC, TY, TY, TC) { return _v.C.Value(), _v.Y.Value(), _v.Y.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CYYM() (TC, TY, TY, TM) { return _v.C.Value(), _v.Y.Value(), _v.Y.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CYYY() (TC, TY, TY, TY) { return _v.C.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CYYK() (TC, TY, TY, TK) { return _v.C.Value(), _v.Y.Value(), _v.Y.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CYKC() (TC, TY, TK, TC) { return _v.C.Value(), _v.Y.Value(), _v.K.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CYKM() (TC, TY, TK, TM) { return _v.C.Value(), _v.Y.Value(), _v.K.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CYKY() (TC, TY, TK, TY) { return _v.C.Value(), _v.Y.Value(), _v.K.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CYKK() (TC, TY, TK, TK) { return _v.C.Value(), _v.Y.Value(), _v.K.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CKCC() (TC, TK, TC, TC) { return _v.C.Value(), _v.K.Value(), _v.C.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CKCM() (TC, TK, TC, TM) { return _v.C.Value(), _v.K.Value(), _v.C.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CKCY() (TC, TK, TC, TY) { return _v.C.Value(), _v.K.Value(), _v.C.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CKCK() (TC, TK, TC, TK) { return _v.C.Value(), _v.K.Value(), _v.C.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CKMC() (TC, TK, TM, TC) { return _v.C.Value(), _v.K.Value(), _v.M.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CKMM() (TC, TK, TM, TM) { return _v.C.Value(), _v.K.Value(), _v.M.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CKMY() (TC, TK, TM, TY) { return _v.C.Value(), _v.K.Value(), _v.M.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CKMK() (TC, TK, TM, TK) { return _v.C.Value(), _v.K.Value(), _v.M.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CKYC() (TC, TK, TY, TC) { return _v.C.Value(), _v.K.Value(), _v.Y.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CKYM() (TC, TK, TY, TM) { return _v.C.Value(), _v.K.Value(), _v.Y.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CKYY() (TC, TK, TY, TY) { return _v.C.Value(), _v.K.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CKYK() (TC, TK, TY, TK) { return _v.C.Value(), _v.K.Value(), _v.Y.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CKKC() (TC, TK, TK, TC) { return _v.C.Value(), _v.K.Value(), _v.K.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CKKM() (TC, TK, TK, TM) { return _v.C.Value(), _v.K.Value(), _v.K.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CKKY() (TC, TK, TK, TY) { return _v.C.Value(), _v.K.Value(), _v.K.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) CKKK() (TC, TK, TK, TK) { return _v.C.Value(), _v.K.Value(), _v.K.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MCCC() (TM, TC, TC, TC) { return _v.M.Value(), _v.C.Value(), _v.C.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MCCM() (TM, TC, TC, TM) { return _v.M.Value(), _v.C.Value(), _v.C.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MCCY() (TM, TC, TC, TY) { return _v.M.Value(), _v.C.Value(), _v.C.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MCCK() (TM, TC, TC, TK) { return _v.M.Value(), _v.C.Value(), _v.C.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MCMC() (TM, TC, TM, TC) { return _v.M.Value(), _v.C.Value(), _v.M.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MCMM() (TM, TC, TM, TM) { return _v.M.Value(), _v.C.Value(), _v.M.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MCMY() (TM, TC, TM, TY) { return _v.M.Value(), _v.C.Value(), _v.M.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MCMK() (TM, TC, TM, TK) { return _v.M.Value(), _v.C.Value(), _v.M.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MCYC() (TM, TC, TY, TC) { return _v.M.Value(), _v.C.Value(), _v.Y.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MCYM() (TM, TC, TY, TM) { return _v.M.Value(), _v.C.Value(), _v.Y.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MCYY() (TM, TC, TY, TY) { return _v.M.Value(), _v.C.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MCYK() (TM, TC, TY, TK) { return _v.M.Value(), _v.C.Value(), _v.Y.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MCKC() (TM, TC, TK, TC) { return _v.M.Value(), _v.C.Value(), _v.K.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MCKM() (TM, TC, TK, TM) { return _v.M.Value(), _v.C.Value(), _v.K.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MCKY() (TM, TC, TK, TY) { return _v.M.Value(), _v.C.Value(), _v.K.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MCKK() (TM, TC, TK, TK) { return _v.M.Value(), _v.C.Value(), _v.K.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MMCC() (TM, TM, TC, TC) { return _v.M.Value(), _v.M.Value(), _v.C.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MMCM() (TM, TM, TC, TM) { return _v.M.Value(), _v.M.Value(), _v.C.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MMCY() (TM, TM, TC, TY) { return _v.M.Value(), _v.M.Value(), _v.C.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MMCK() (TM, TM, TC, TK) { return _v.M.Value(), _v.M.Value(), _v.C.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MMMC() (TM, TM, TM, TC) { return _v.M.Value(), _v.M.Value(), _v.M.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MMMM() (TM, TM, TM, TM) { return _v.M.Value(), _v.M.Value(), _v.M.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MMMY() (TM, TM, TM, TY) { return _v.M.Value(), _v.M.Value(), _v.M.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MMMK() (TM, TM, TM, TK) { return _v.M.Value(), _v.M.Value(), _v.M.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MMYC() (TM, TM, TY, TC) { return _v.M.Value(), _v.M.Value(), _v.Y.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MMYM() (TM, TM, TY, TM) { return _v.M.Value(), _v.M.Value(), _v.Y.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MMYY() (TM, TM, TY, TY) { return _v.M.Value(), _v.M.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MMYK() (TM, TM, TY, TK) { return _v.M.Value(), _v.M.Value(), _v.Y.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MMKC() (TM, TM, TK, TC) { return _v.M.Value(), _v.M.Value(), _v.K.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MMKM() (TM, TM, TK, TM) { return _v.M.Value(), _v.M.Value(), _v.K.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MMKY() (TM, TM, TK, TY) { return _v.M.Value(), _v.M.Value(), _v.K.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MMKK() (TM, TM, TK, TK) { return _v.M.Value(), _v.M.Value(), _v.K.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MYCC() (TM, TY, TC, TC) { return _v.M.Value(), _v.Y.Value(), _v.C.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MYCM() (TM, TY, TC, TM) { return _v.M.Value(), _v.Y.Value(), _v.C.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MYCY() (TM, TY, TC, TY) { return _v.M.Value(), _v.Y.Value(), _v.C.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MYCK() (TM, TY, TC, TK) { return _v.M.Value(), _v.Y.Value(), _v.C.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MYMC() (TM, TY, TM, TC) { return _v.M.Value(), _v.Y.Value(), _v.M.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MYMM() (TM, TY, TM, TM) { return _v.M.Value(), _v.Y.Value(), _v.M.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MYMY() (TM, TY, TM, TY) { return _v.M.Value(), _v.Y.Value(), _v.M.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MYMK() (TM, TY, TM, TK) { return _v.M.Value(), _v.Y.Value(), _v.M.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MYYC() (TM, TY, TY, TC) { return _v.M.Value(), _v.Y.Value(), _v.Y.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MYYM() (TM, TY, TY, TM) { return _v.M.Value(), _v.Y.Value(), _v.Y.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MYYY() (TM, TY, TY, TY) { return _v.M.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MYYK() (TM, TY, TY, TK) { return _v.M.Value(), _v.Y.Value(), _v.Y.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MYKC() (TM, TY, TK, TC) { return _v.M.Value(), _v.Y.Value(), _v.K.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MYKM() (TM, TY, TK, TM) { return _v.M.Value(), _v.Y.Value(), _v.K.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MYKY() (TM, TY, TK, TY) { return _v.M.Value(), _v.Y.Value(), _v.K.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MYKK() (TM, TY, TK, TK) { return _v.M.Value(), _v.Y.Value(), _v.K.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MKCC() (TM, TK, TC, TC) { return _v.M.Value(), _v.K.Value(), _v.C.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MKCM() (TM, TK, TC, TM) { return _v.M.Value(), _v.K.Value(), _v.C.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MKCY() (TM, TK, TC, TY) { return _v.M.Value(), _v.K.Value(), _v.C.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MKCK() (TM, TK, TC, TK) { return _v.M.Value(), _v.K.Value(), _v.C.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MKMC() (TM, TK, TM, TC) { return _v.M.Value(), _v.K.Value(), _v.M.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MKMM() (TM, TK, TM, TM) { return _v.M.Value(), _v.K.Value(), _v.M.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MKMY() (TM, TK, TM, TY) { return _v.M.Value(), _v.K.Value(), _v.M.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MKMK() (TM, TK, TM, TK) { return _v.M.Value(), _v.K.Value(), _v.M.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MKYC() (TM, TK, TY, TC) { return _v.M.Value(), _v.K.Value(), _v.Y.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MKYM() (TM, TK, TY, TM) { return _v.M.Value(), _v.K.Value(), _v.Y.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MKYY() (TM, TK, TY, TY) { return _v.M.Value(), _v.K.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MKYK() (TM, TK, TY, TK) { return _v.M.Value(), _v.K.Value(), _v.Y.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MKKC() (TM, TK, TK, TC) { return _v.M.Value(), _v.K.Value(), _v.K.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MKKM() (TM, TK, TK, TM) { return _v.M.Value(), _v.K.Value(), _v.K.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MKKY() (TM, TK, TK, TY) { return _v.M.Value(), _v.K.Value(), _v.K.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) MKKK() (TM, TK, TK, TK) { return _v.M.Value(), _v.K.Value(), _v.K.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YCCC() (TY, TC, TC, TC) { return _v.Y.Value(), _v.C.Value(), _v.C.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YCCM() (TY, TC, TC, TM) { return _v.Y.Value(), _v.C.Value(), _v.C.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YCCY() (TY, TC, TC, TY) { return _v.Y.Value(), _v.C.Value(), _v.C.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YCCK() (TY, TC, TC, TK) { return _v.Y.Value(), _v.C.Value(), _v.C.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YCMC() (TY, TC, TM, TC) { return _v.Y.Value(), _v.C.Value(), _v.M.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YCMM() (TY, TC, TM, TM) { return _v.Y.Value(), _v.C.Value(), _v.M.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YCMY() (TY, TC, TM, TY) { return _v.Y.Value(), _v.C.Value(), _v.M.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YCMK() (TY, TC, TM, TK) { return _v.Y.Value(), _v.C.Value(), _v.M.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YCYC() (TY, TC, TY, TC) { return _v.Y.Value(), _v.C.Value(), _v.Y.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YCYM() (TY, TC, TY, TM) { return _v.Y.Value(), _v.C.Value(), _v.Y.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YCYY() (TY, TC, TY, TY) { return _v.Y.Value(), _v.C.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YCYK() (TY, TC, TY, TK) { return _v.Y.Value(), _v.C.Value(), _v.Y.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YCKC() (TY, TC, TK, TC) { return _v.Y.Value(), _v.C.Value(), _v.K.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YCKM() (TY, TC, TK, TM) { return _v.Y.Value(), _v.C.Value(), _v.K.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YCKY() (TY, TC, TK, TY) { return _v.Y.Value(), _v.C.Value(), _v.K.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YCKK() (TY, TC, TK, TK) { return _v.Y.Value(), _v.C.Value(), _v.K.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YMCC() (TY, TM, TC, TC) { return _v.Y.Value(), _v.M.Value(), _v.C.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YMCM() (TY, TM, TC, TM) { return _v.Y.Value(), _v.M.Value(), _v.C.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YMCY() (TY, TM, TC, TY) { return _v.Y.Value(), _v.M.Value(), _v.C.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YMCK() (TY, TM, TC, TK) { return _v.Y.Value(), _v.M.Value(), _v.C.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YMMC() (TY, TM, TM, TC) { return _v.Y.Value(), _v.M.Value(), _v.M.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YMMM() (TY, TM, TM, TM) { return _v.Y.Value(), _v.M.Value(), _v.M.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YMMY() (TY, TM, TM, TY) { return _v.Y.Value(), _v.M.Value(), _v.M.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YMMK() (TY, TM, TM, TK) { return _v.Y.Value(), _v.M.Value(), _v.M.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YMYC() (TY, TM, TY, TC) { return _v.Y.Value(), _v.M.Value(), _v.Y.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YMYM() (TY, TM, TY, TM) { return _v.Y.Value(), _v.M.Value(), _v.Y.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YMYY() (TY, TM, TY, TY) { return _v.Y.Value(), _v.M.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YMYK() (TY, TM, TY, TK) { return _v.Y.Value(), _v.M.Value(), _v.Y.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YMKC() (TY, TM, TK, TC) { return _v.Y.Value(), _v.M.Value(), _v.K.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YMKM() (TY, TM, TK, TM) { return _v.Y.Value(), _v.M.Value(), _v.K.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YMKY() (TY, TM, TK, TY) { return _v.Y.Value(), _v.M.Value(), _v.K.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YMKK() (TY, TM, TK, TK) { return _v.Y.Value(), _v.M.Value(), _v.K.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YYCC() (TY, TY, TC, TC) { return _v.Y.Value(), _v.Y.Value(), _v.C.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YYCM() (TY, TY, TC, TM) { return _v.Y.Value(), _v.Y.Value(), _v.C.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YYCY() (TY, TY, TC, TY) { return _v.Y.Value(), _v.Y.Value(), _v.C.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YYCK() (TY, TY, TC, TK) { return _v.Y.Value(), _v.Y.Value(), _v.C.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YYMC() (TY, TY, TM, TC) { return _v.Y.Value(), _v.Y.Value(), _v.M.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YYMM() (TY, TY, TM, TM) { return _v.Y.Value(), _v.Y.Value(), _v.M.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YYMY() (TY, TY, TM, TY) { return _v.Y.Value(), _v.Y.Value(), _v.M.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YYMK() (TY, TY, TM, TK) { return _v.Y.Value(), _v.Y.Value(), _v.M.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YYYC() (TY, TY, TY, TC) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YYYM() (TY, TY, TY, TM) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YYYY() (TY, TY, TY, TY) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YYYK() (TY, TY, TY, TK) { return _v.Y.Value(), _v.Y.Value(), _v.Y.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YYKC() (TY, TY, TK, TC) { return _v.Y.Value(), _v.Y.Value(), _v.K.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YYKM() (TY, TY, TK, TM) { return _v.Y.Value(), _v.Y.Value(), _v.K.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YYKY() (TY, TY, TK, TY) { return _v.Y.Value(), _v.Y.Value(), _v.K.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YYKK() (TY, TY, TK, TK) { return _v.Y.Value(), _v.Y.Value(), _v.K.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YKCC() (TY, TK, TC, TC) { return _v.Y.Value(), _v.K.Value(), _v.C.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YKCM() (TY, TK, TC, TM) { return _v.Y.Value(), _v.K.Value(), _v.C.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YKCY() (TY, TK, TC, TY) { return _v.Y.Value(), _v.K.Value(), _v.C.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YKCK() (TY, TK, TC, TK) { return _v.Y.Value(), _v.K.Value(), _v.C.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YKMC() (TY, TK, TM, TC) { return _v.Y.Value(), _v.K.Value(), _v.M.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YKMM() (TY, TK, TM, TM) { return _v.Y.Value(), _v.K.Value(), _v.M.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YKMY() (TY, TK, TM, TY) { return _v.Y.Value(), _v.K.Value(), _v.M.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YKMK() (TY, TK, TM, TK) { return _v.Y.Value(), _v.K.Value(), _v.M.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YKYC() (TY, TK, TY, TC) { return _v.Y.Value(), _v.K.Value(), _v.Y.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YKYM() (TY, TK, TY, TM) { return _v.Y.Value(), _v.K.Value(), _v.Y.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YKYY() (TY, TK, TY, TY) { return _v.Y.Value(), _v.K.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YKYK() (TY, TK, TY, TK) { return _v.Y.Value(), _v.K.Value(), _v.Y.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YKKC() (TY, TK, TK, TC) { return _v.Y.Value(), _v.K.Value(), _v.K.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YKKM() (TY, TK, TK, TM) { return _v.Y.Value(), _v.K.Value(), _v.K.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YKKY() (TY, TK, TK, TY) { return _v.Y.Value(), _v.K.Value(), _v.K.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) YKKK() (TY, TK, TK, TK) { return _v.Y.Value(), _v.K.Value(), _v.K.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KCCC() (TK, TC, TC, TC) { return _v.K.Value(), _v.C.Value(), _v.C.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KCCM() (TK, TC, TC, TM) { return _v.K.Value(), _v.C.Value(), _v.C.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KCCY() (TK, TC, TC, TY) { return _v.K.Value(), _v.C.Value(), _v.C.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KCCK() (TK, TC, TC, TK) { return _v.K.Value(), _v.C.Value(), _v.C.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KCMC() (TK, TC, TM, TC) { return _v.K.Value(), _v.C.Value(), _v.M.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KCMM() (TK, TC, TM, TM) { return _v.K.Value(), _v.C.Value(), _v.M.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KCMY() (TK, TC, TM, TY) { return _v.K.Value(), _v.C.Value(), _v.M.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KCMK() (TK, TC, TM, TK) { return _v.K.Value(), _v.C.Value(), _v.M.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KCYC() (TK, TC, TY, TC) { return _v.K.Value(), _v.C.Value(), _v.Y.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KCYM() (TK, TC, TY, TM) { return _v.K.Value(), _v.C.Value(), _v.Y.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KCYY() (TK, TC, TY, TY) { return _v.K.Value(), _v.C.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KCYK() (TK, TC, TY, TK) { return _v.K.Value(), _v.C.Value(), _v.Y.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KCKC() (TK, TC, TK, TC) { return _v.K.Value(), _v.C.Value(), _v.K.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KCKM() (TK, TC, TK, TM) { return _v.K.Value(), _v.C.Value(), _v.K.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KCKY() (TK, TC, TK, TY) { return _v.K.Value(), _v.C.Value(), _v.K.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KCKK() (TK, TC, TK, TK) { return _v.K.Value(), _v.C.Value(), _v.K.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KMCC() (TK, TM, TC, TC) { return _v.K.Value(), _v.M.Value(), _v.C.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KMCM() (TK, TM, TC, TM) { return _v.K.Value(), _v.M.Value(), _v.C.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KMCY() (TK, TM, TC, TY) { return _v.K.Value(), _v.M.Value(), _v.C.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KMCK() (TK, TM, TC, TK) { return _v.K.Value(), _v.M.Value(), _v.C.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KMMC() (TK, TM, TM, TC) { return _v.K.Value(), _v.M.Value(), _v.M.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KMMM() (TK, TM, TM, TM) { return _v.K.Value(), _v.M.Value(), _v.M.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KMMY() (TK, TM, TM, TY) { return _v.K.Value(), _v.M.Value(), _v.M.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KMMK() (TK, TM, TM, TK) { return _v.K.Value(), _v.M.Value(), _v.M.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KMYC() (TK, TM, TY, TC) { return _v.K.Value(), _v.M.Value(), _v.Y.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KMYM() (TK, TM, TY, TM) { return _v.K.Value(), _v.M.Value(), _v.Y.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KMYY() (TK, TM, TY, TY) { return _v.K.Value(), _v.M.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KMYK() (TK, TM, TY, TK) { return _v.K.Value(), _v.M.Value(), _v.Y.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KMKC() (TK, TM, TK, TC) { return _v.K.Value(), _v.M.Value(), _v.K.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KMKM() (TK, TM, TK, TM) { return _v.K.Value(), _v.M.Value(), _v.K.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KMKY() (TK, TM, TK, TY) { return _v.K.Value(), _v.M.Value(), _v.K.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KMKK() (TK, TM, TK, TK) { return _v.K.Value(), _v.M.Value(), _v.K.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KYCC() (TK, TY, TC, TC) { return _v.K.Value(), _v.Y.Value(), _v.C.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KYCM() (TK, TY, TC, TM) { return _v.K.Value(), _v.Y.Value(), _v.C.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KYCY() (TK, TY, TC, TY) { return _v.K.Value(), _v.Y.Value(), _v.C.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KYCK() (TK, TY, TC, TK) { return _v.K.Value(), _v.Y.Value(), _v.C.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KYMC() (TK, TY, TM, TC) { return _v.K.Value(), _v.Y.Value(), _v.M.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KYMM() (TK, TY, TM, TM) { return _v.K.Value(), _v.Y.Value(), _v.M.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KYMY() (TK, TY, TM, TY) { return _v.K.Value(), _v.Y.Value(), _v.M.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KYMK() (TK, TY, TM, TK) { return _v.K.Value(), _v.Y.Value(), _v.M.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KYYC() (TK, TY, TY, TC) { return _v.K.Value(), _v.Y.Value(), _v.Y.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KYYM() (TK, TY, TY, TM) { return _v.K.Value(), _v.Y.Value(), _v.Y.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KYYY() (TK, TY, TY, TY) { return _v.K.Value(), _v.Y.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KYYK() (TK, TY, TY, TK) { return _v.K.Value(), _v.Y.Value(), _v.Y.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KYKC() (TK, TY, TK, TC) { return _v.K.Value(), _v.Y.Value(), _v.K.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KYKM() (TK, TY, TK, TM) { return _v.K.Value(), _v.Y.Value(), _v.K.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KYKY() (TK, TY, TK, TY) { return _v.K.Value(), _v.Y.Value(), _v.K.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KYKK() (TK, TY, TK, TK) { return _v.K.Value(), _v.Y.Value(), _v.K.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KKCC() (TK, TK, TC, TC) { return _v.K.Value(), _v.K.Value(), _v.C.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KKCM() (TK, TK, TC, TM) { return _v.K.Value(), _v.K.Value(), _v.C.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KKCY() (TK, TK, TC, TY) { return _v.K.Value(), _v.K.Value(), _v.C.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KKCK() (TK, TK, TC, TK) { return _v.K.Value(), _v.K.Value(), _v.C.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KKMC() (TK, TK, TM, TC) { return _v.K.Value(), _v.K.Value(), _v.M.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KKMM() (TK, TK, TM, TM) { return _v.K.Value(), _v.K.Value(), _v.M.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KKMY() (TK, TK, TM, TY) { return _v.K.Value(), _v.K.Value(), _v.M.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KKMK() (TK, TK, TM, TK) { return _v.K.Value(), _v.K.Value(), _v.M.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KKYC() (TK, TK, TY, TC) { return _v.K.Value(), _v.K.Value(), _v.Y.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KKYM() (TK, TK, TY, TM) { return _v.K.Value(), _v.K.Value(), _v.Y.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KKYY() (TK, TK, TY, TY) { return _v.K.Value(), _v.K.Value(), _v.Y.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KKYK() (TK, TK, TY, TK) { return _v.K.Value(), _v.K.Value(), _v.Y.Value(), _v.K.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KKKC() (TK, TK, TK, TC) { return _v.K.Value(), _v.K.Value(), _v.K.Value(), _v.C.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KKKM() (TK, TK, TK, TM) { return _v.K.Value(), _v.K.Value(), _v.K.Value(), _v.M.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KKKY() (TK, TK, TK, TY) { return _v.K.Value(), _v.K.Value(), _v.K.Value(), _v.Y.Value() }
func (_v *CMYKTyped[TC, TM, TY, TK]) KKKK() (TK, TK, TK, TK) { return _v.K.Value(), _v.K.Value(), _v.K.Value(), _v.K.Value() }
