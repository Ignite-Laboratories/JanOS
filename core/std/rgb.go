// Code generated by 'gen/letters'; DO NOT EDIT.
//go:generate go run ../gen/letters -pkg std -name RGB -nameL rgb -cmpts R,G,B -cmptsL r,g,b -out ../std/rgb.go
package std

import (
	"core/sys/atlas"
	"core/sys/name/format"
	"core/sys/num"
	"core/sys/num/bounded"
	"core/sys/support"
	"fmt"
	"strings"
)

// RGB is a 3D vector of like-typed bounded.Numeric components.
//
// NOTE: If you'd like asymmetric types, please see RGBTyped.
type RGB[T num.Primitive] = RGBTyped[T, T, T]

// RGBTyped is a 3D vector of asymmetrically typed bounded.Numeric components.
//
// NOTE: If you'd like symmetric types, please see RGB.
type RGBTyped[TR num.Primitive, TG num.Primitive, TB num.Primitive] struct {
	Entity
	R bounded.Numeric[TR]
	G bounded.Numeric[TG]
	B bounded.Numeric[TB]
}

func NewRGB[T num.Primitive](r T, g T, b T, name ...string) *RGB[T] {
	typed := RGB[T](*NewRGBTyped[T, T, T](r, g, b, name...))
	return &typed
}

func NewRGBTyped[TR num.Primitive, TG num.Primitive, TB num.Primitive](r TR, g TG, b TB, name ...string) *RGBTyped[TR, TG, TB] {
	minR := num.MinValue[TR]()
	maxR := num.MaxValue[TR]()
	if num.IsFloat[TR]() {
		minR = 0
		maxR = 1
	}
	minG := num.MinValue[TG]()
	maxG := num.MaxValue[TG]()
	if num.IsFloat[TG]() {
		minG = 0
		maxG = 1
	}
	minB := num.MinValue[TB]()
	maxB := num.MaxValue[TB]()
	if num.IsFloat[TB]() {
		minB = 0
		maxB = 1
	}

	_v := &RGBTyped[TR, TG, TB]{}
	_v.Entity = NewEntity[format.Default]()
	_v.SetBoundaries(minR, maxR, minG, maxG, minB, maxB)
	_v.Set(r, g, b)
	if len(name) > 0 {
		_v.SetName(name[0])
	}
	return _v
}

func (_v *RGBTyped[TR, TG, TB]) Name() string {
	return _v.GivenName.Name
}

func (_v *RGBTyped[TR, TG, TB]) SetName(name string) *RGBTyped[TR, TG, TB] {
	_v.GivenName.Name = name
	return _v
}

func (_v *RGBTyped[TR, TG, TB]) Set(r TR, g TG, b TB) *RGBTyped[TR, TG, TB] {
	_ = _v.R.Set(r)
	_ = _v.G.Set(g)
	_ = _v.B.Set(b)
	return _v
}

func (_v *RGBTyped[TR, TG, TB]) SetClamp(clamp bool) *RGBTyped[TR, TG, TB] {
	_v.R.Clamp = clamp
	_v.G.Clamp = clamp
	_v.B.Clamp = clamp
	return _v
}

func (_v *RGBTyped[TR, TG, TB]) SetBoundaries(minR, maxR TR, minG, maxG TG, minB, maxB TB) *RGBTyped[TR, TG, TB] {
	_ = _v.R.SetBoundaries(minR, maxR)
	_ = _v.G.SetBoundaries(minG, maxG)
	_ = _v.B.SetBoundaries(minB, maxB)
	return _v
}

func (_v *RGBTyped[TR, TG, TB]) Component(index uint) (bounded.INumeric, error) {
	switch index {
	case 0:
		return &_v.R, nil
	case 1:
		return &_v.G, nil
	case 2:
		return &_v.B, nil
	default:
		return nil, fmt.Errorf("cannot get component index %d of an RGB vector", index)
	}
}

func (_v *RGBTyped[TR, TG, TB]) Components() []bounded.INumeric {
	return []bounded.INumeric{&_v.R, &_v.G, &_v.B}
}

func (_v *RGBTyped[TR, TG, TB]) ComponentByName(name string) (bounded.INumeric, error) {
	switch strings.ToLower(name) {
	case "r":
		return &_v.R, nil
	case "g":
		return &_v.G, nil
	case "b":
		return &_v.B, nil
	default:
		return nil, fmt.Errorf("cannot get component \"%s\" of an RGB vector", name)
	}
}

func (_v *RGBTyped[TR, TG, TB]) ComponentLen() uint {
	return 3
}

func (_v *RGBTyped[TR, TG, TB]) SetComponent(index uint, value any) error {
	switch index {
	case 0:
		 _v.R.Set(value.(TR))
	case 1:
		 _v.G.Set(value.(TG))
	case 2:
		 _v.B.Set(value.(TB))
	default:
		return fmt.Errorf("cannot set component index %d of an RGB vector", index)
	}
	return nil
}

func (_v *RGBTyped[TR, TG, TB]) SetComponents(values []any) error {
	if len(values) != 3 {
		return fmt.Errorf("cannot set %d components of 3D vector RGB", len(values), )
	}
	if _, ok := values[0].(TR); !ok {
		return fmt.Errorf("expected type %T for component R, got type %T", TR(0), values[0])	}
	if _, ok := values[1].(TG); !ok {
		return fmt.Errorf("expected type %T for component G, got type %T", TG(0), values[1])	}
	if _, ok := values[2].(TB); !ok {
		return fmt.Errorf("expected type %T for component B, got type %T", TB(0), values[2])	}
	_v.R.Set(values[0].(TR))
	_v.G.Set(values[1].(TG))
	_v.B.Set(values[2].(TB))
	return nil
}

func (_v *RGBTyped[TR, TG, TB]) SetComponentByName(name string, value any) error {
	switch strings.ToLower(name) {
	case "r":
		 _v.R.Set(value.(TR))
	case "g":
		 _v.G.Set(value.(TG))
	case "b":
		 _v.B.Set(value.(TB))
	default:
		return fmt.Errorf("cannot set component \"%s\" of an RGB vector", name)
	}
	return nil
}

func (_v RGBTyped[TR, TG, TB]) String() string {
	if atlas.CompactVectors {
		return fmt.Sprintf("{r: %v, g: %v, b: %v}", _v.R.String(), _v.G.String(), _v.B.String())
	}
	 if support.AllSameTypes(TR(0), TG(0), TB(0)) {
		return fmt.Sprintf("rgb[%T]{%v, %v, %v}(\"%v\")", TR(0), _v.R.String(), _v.G.String(), _v.B.String(), _v.GivenName.Name)
	}
	return fmt.Sprintf("rgb[%T, %T, %T]{%v, %v, %v}(\"%v\")", TR(0), TG(0), TB(0), _v.R.String(), _v.G.String(), _v.B.String(), _v.GivenName.Name)
}

func (_v *RGBTyped[TR, TG, TB]) RR() (TR, TR) { return _v.R.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) RG() (TR, TG) { return _v.R.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) RB() (TR, TB) { return _v.R.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) GR() (TG, TR) { return _v.G.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) GG() (TG, TG) { return _v.G.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) GB() (TG, TB) { return _v.G.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) BR() (TB, TR) { return _v.B.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) BG() (TB, TG) { return _v.B.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) BB() (TB, TB) { return _v.B.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) RRR() (TR, TR, TR) { return _v.R.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) RRG() (TR, TR, TG) { return _v.R.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) RRB() (TR, TR, TB) { return _v.R.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) RGR() (TR, TG, TR) { return _v.R.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) RGG() (TR, TG, TG) { return _v.R.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) RGB() (TR, TG, TB) { return _v.R.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) RBR() (TR, TB, TR) { return _v.R.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) RBG() (TR, TB, TG) { return _v.R.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) RBB() (TR, TB, TB) { return _v.R.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) GRR() (TG, TR, TR) { return _v.G.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) GRG() (TG, TR, TG) { return _v.G.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) GRB() (TG, TR, TB) { return _v.G.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) GGR() (TG, TG, TR) { return _v.G.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) GGG() (TG, TG, TG) { return _v.G.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) GGB() (TG, TG, TB) { return _v.G.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) GBR() (TG, TB, TR) { return _v.G.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) GBG() (TG, TB, TG) { return _v.G.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) GBB() (TG, TB, TB) { return _v.G.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) BRR() (TB, TR, TR) { return _v.B.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) BRG() (TB, TR, TG) { return _v.B.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) BRB() (TB, TR, TB) { return _v.B.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) BGR() (TB, TG, TR) { return _v.B.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) BGG() (TB, TG, TG) { return _v.B.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) BGB() (TB, TG, TB) { return _v.B.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) BBR() (TB, TB, TR) { return _v.B.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) BBG() (TB, TB, TG) { return _v.B.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) BBB() (TB, TB, TB) { return _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) RRRR() (TR, TR, TR, TR) { return _v.R.Value(), _v.R.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) RRRG() (TR, TR, TR, TG) { return _v.R.Value(), _v.R.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) RRRB() (TR, TR, TR, TB) { return _v.R.Value(), _v.R.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) RRGR() (TR, TR, TG, TR) { return _v.R.Value(), _v.R.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) RRGG() (TR, TR, TG, TG) { return _v.R.Value(), _v.R.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) RRGB() (TR, TR, TG, TB) { return _v.R.Value(), _v.R.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) RRBR() (TR, TR, TB, TR) { return _v.R.Value(), _v.R.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) RRBG() (TR, TR, TB, TG) { return _v.R.Value(), _v.R.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) RRBB() (TR, TR, TB, TB) { return _v.R.Value(), _v.R.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) RGRR() (TR, TG, TR, TR) { return _v.R.Value(), _v.G.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) RGRG() (TR, TG, TR, TG) { return _v.R.Value(), _v.G.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) RGRB() (TR, TG, TR, TB) { return _v.R.Value(), _v.G.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) RGGR() (TR, TG, TG, TR) { return _v.R.Value(), _v.G.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) RGGG() (TR, TG, TG, TG) { return _v.R.Value(), _v.G.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) RGGB() (TR, TG, TG, TB) { return _v.R.Value(), _v.G.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) RGBR() (TR, TG, TB, TR) { return _v.R.Value(), _v.G.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) RGBG() (TR, TG, TB, TG) { return _v.R.Value(), _v.G.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) RGBB() (TR, TG, TB, TB) { return _v.R.Value(), _v.G.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) RBRR() (TR, TB, TR, TR) { return _v.R.Value(), _v.B.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) RBRG() (TR, TB, TR, TG) { return _v.R.Value(), _v.B.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) RBRB() (TR, TB, TR, TB) { return _v.R.Value(), _v.B.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) RBGR() (TR, TB, TG, TR) { return _v.R.Value(), _v.B.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) RBGG() (TR, TB, TG, TG) { return _v.R.Value(), _v.B.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) RBGB() (TR, TB, TG, TB) { return _v.R.Value(), _v.B.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) RBBR() (TR, TB, TB, TR) { return _v.R.Value(), _v.B.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) RBBG() (TR, TB, TB, TG) { return _v.R.Value(), _v.B.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) RBBB() (TR, TB, TB, TB) { return _v.R.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) GRRR() (TG, TR, TR, TR) { return _v.G.Value(), _v.R.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) GRRG() (TG, TR, TR, TG) { return _v.G.Value(), _v.R.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) GRRB() (TG, TR, TR, TB) { return _v.G.Value(), _v.R.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) GRGR() (TG, TR, TG, TR) { return _v.G.Value(), _v.R.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) GRGG() (TG, TR, TG, TG) { return _v.G.Value(), _v.R.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) GRGB() (TG, TR, TG, TB) { return _v.G.Value(), _v.R.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) GRBR() (TG, TR, TB, TR) { return _v.G.Value(), _v.R.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) GRBG() (TG, TR, TB, TG) { return _v.G.Value(), _v.R.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) GRBB() (TG, TR, TB, TB) { return _v.G.Value(), _v.R.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) GGRR() (TG, TG, TR, TR) { return _v.G.Value(), _v.G.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) GGRG() (TG, TG, TR, TG) { return _v.G.Value(), _v.G.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) GGRB() (TG, TG, TR, TB) { return _v.G.Value(), _v.G.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) GGGR() (TG, TG, TG, TR) { return _v.G.Value(), _v.G.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) GGGG() (TG, TG, TG, TG) { return _v.G.Value(), _v.G.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) GGGB() (TG, TG, TG, TB) { return _v.G.Value(), _v.G.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) GGBR() (TG, TG, TB, TR) { return _v.G.Value(), _v.G.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) GGBG() (TG, TG, TB, TG) { return _v.G.Value(), _v.G.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) GGBB() (TG, TG, TB, TB) { return _v.G.Value(), _v.G.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) GBRR() (TG, TB, TR, TR) { return _v.G.Value(), _v.B.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) GBRG() (TG, TB, TR, TG) { return _v.G.Value(), _v.B.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) GBRB() (TG, TB, TR, TB) { return _v.G.Value(), _v.B.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) GBGR() (TG, TB, TG, TR) { return _v.G.Value(), _v.B.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) GBGG() (TG, TB, TG, TG) { return _v.G.Value(), _v.B.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) GBGB() (TG, TB, TG, TB) { return _v.G.Value(), _v.B.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) GBBR() (TG, TB, TB, TR) { return _v.G.Value(), _v.B.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) GBBG() (TG, TB, TB, TG) { return _v.G.Value(), _v.B.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) GBBB() (TG, TB, TB, TB) { return _v.G.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) BRRR() (TB, TR, TR, TR) { return _v.B.Value(), _v.R.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) BRRG() (TB, TR, TR, TG) { return _v.B.Value(), _v.R.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) BRRB() (TB, TR, TR, TB) { return _v.B.Value(), _v.R.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) BRGR() (TB, TR, TG, TR) { return _v.B.Value(), _v.R.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) BRGG() (TB, TR, TG, TG) { return _v.B.Value(), _v.R.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) BRGB() (TB, TR, TG, TB) { return _v.B.Value(), _v.R.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) BRBR() (TB, TR, TB, TR) { return _v.B.Value(), _v.R.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) BRBG() (TB, TR, TB, TG) { return _v.B.Value(), _v.R.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) BRBB() (TB, TR, TB, TB) { return _v.B.Value(), _v.R.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) BGRR() (TB, TG, TR, TR) { return _v.B.Value(), _v.G.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) BGRG() (TB, TG, TR, TG) { return _v.B.Value(), _v.G.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) BGRB() (TB, TG, TR, TB) { return _v.B.Value(), _v.G.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) BGGR() (TB, TG, TG, TR) { return _v.B.Value(), _v.G.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) BGGG() (TB, TG, TG, TG) { return _v.B.Value(), _v.G.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) BGGB() (TB, TG, TG, TB) { return _v.B.Value(), _v.G.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) BGBR() (TB, TG, TB, TR) { return _v.B.Value(), _v.G.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) BGBG() (TB, TG, TB, TG) { return _v.B.Value(), _v.G.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) BGBB() (TB, TG, TB, TB) { return _v.B.Value(), _v.G.Value(), _v.B.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) BBRR() (TB, TB, TR, TR) { return _v.B.Value(), _v.B.Value(), _v.R.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) BBRG() (TB, TB, TR, TG) { return _v.B.Value(), _v.B.Value(), _v.R.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) BBRB() (TB, TB, TR, TB) { return _v.B.Value(), _v.B.Value(), _v.R.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) BBGR() (TB, TB, TG, TR) { return _v.B.Value(), _v.B.Value(), _v.G.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) BBGG() (TB, TB, TG, TG) { return _v.B.Value(), _v.B.Value(), _v.G.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) BBGB() (TB, TB, TG, TB) { return _v.B.Value(), _v.B.Value(), _v.G.Value(), _v.B.Value() }
func (_v *RGBTyped[TR, TG, TB]) BBBR() (TB, TB, TB, TR) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.R.Value() }
func (_v *RGBTyped[TR, TG, TB]) BBBG() (TB, TB, TB, TG) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.G.Value() }
func (_v *RGBTyped[TR, TG, TB]) BBBB() (TB, TB, TB, TB) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
