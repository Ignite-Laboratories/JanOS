// Code generated by 'internal/generators/letter'; DO NOT EDIT.
//go:generate go run ./internal/generators/letter -pkg std -name RGB -nameL rgb -cmpts R,G,B -cmptsL r,g,b -out ../rgb.go
package std

import (
	"core/sys/name/format"
	"core/sys/num"
	"core/sys/num/bounded"
	"core/sys/support"
	"fmt"
)

// RGB is a 3D vector of like-typed bounded.Number components.
//
// NOTE: If you'd like asymmetric types, please see RGBTyped.
type RGB[T num.Primitive] = RGBTyped[T, T, T]

// RGBTyped is a 3D vector of asymmetrically typed bounded.Number components.
//
// NOTE: If you'd like symmetric types, please see RGB.
type RGBTyped[TR num.Primitive, TG num.Primitive, TB num.Primitive] struct {
	Entity
	R bounded.Number[TR]
	G bounded.Number[TG]
	B bounded.Number[TB]
}

func NewRGB[T num.Primitive]() RGB[T] {
	return RGB[T](NewRGBTyped[T, T, T]())
}

func NewRGBTyped[TR num.Primitive, TG num.Primitive, TB num.Primitive]() RGBTyped[TR, TG, TB] {
	minR := num.MinValue[TR]()
	maxR := num.MaxValue[TR]()
	minG := num.MinValue[TG]()
	maxG := num.MaxValue[TG]()
	minB := num.MinValue[TB]()
	maxB := num.MaxValue[TB]()

	c := RGBTyped[TR, TG, TB]{}
	c.Entity = NewEntity[format.Default]()
	c.SetBoundaries(minR, maxR, minG, maxG, minB, maxB)
	return c
}

func (_v RGBTyped[TR, TG, TB]) String() string {
	if support.AllSameTypes(TR(0), TG(0), TB(0)) {
		return fmt.Sprintf("rgb[%T].{%v, %v, %v}(%v)", TR(0), _v.R.ValueString(), _v.G.ValueString(), _v.B.ValueString(), _v.GivenName.Name)
	}
	return fmt.Sprintf("rgb[%T, %T, %T].{%v, %v, %v}(%v)", TR(0), TG(0), TB(0), _v.R.ValueString(), _v.G.ValueString(), _v.B.ValueString(), _v.GivenName.Name)
}

func (_v RGBTyped[TR, TG, TB]) Set(r TR, g TG, b TB) RGBTyped[TR, TG, TB] {
	_ = _v.R.Set(r)
	_ = _v.G.Set(g)
	_ = _v.B.Set(b)
	return _v
}

func (_v RGBTyped[TR, TG, TB]) SetClamp(clamp bool) RGBTyped[TR, TG, TB] {
	_v.R.Clamp = clamp
	_v.G.Clamp = clamp
	_v.B.Clamp = clamp
	return _v
}

func (_v RGBTyped[TR, TG, TB]) SetBoundaries(minR, maxR TR, minG, maxG TG, minB, maxB TB) RGBTyped[TR, TG, TB] {
	_ = _v.R.SetBoundaries(minR, maxR)
	_ = _v.G.SetBoundaries(minG, maxG)
	_ = _v.B.SetBoundaries(minB, maxB)
	return _v
}

/**
Swizzling

	NOTE: This is a regular expression to find and replace swizzle functions into a one-liner if the auto formatter ever kicks in

	Find -
	func \((.*?)\) ([A-Z]{2,4})\(\) \((.*?)\)[ ]*\{[\n\t ]*return(.*?)[\n\t ]*\}

	Replace -
	func ($1) $2() ($3) { return$4 }
*/

func (_v RGBTyped[TR, TG, TB]) RR() (TR, TR) { return _v.R.Value(), _v.R.Value() }
func (_v RGBTyped[TR, TG, TB]) RG() (TR, TG) { return _v.R.Value(), _v.G.Value() }
func (_v RGBTyped[TR, TG, TB]) RB() (TR, TB) { return _v.R.Value(), _v.B.Value() }
func (_v RGBTyped[TR, TG, TB]) GR() (TG, TR) { return _v.G.Value(), _v.R.Value() }
func (_v RGBTyped[TR, TG, TB]) GG() (TG, TG) { return _v.G.Value(), _v.G.Value() }
func (_v RGBTyped[TR, TG, TB]) GB() (TG, TB) { return _v.G.Value(), _v.B.Value() }
func (_v RGBTyped[TR, TG, TB]) BR() (TB, TR) { return _v.B.Value(), _v.R.Value() }
func (_v RGBTyped[TR, TG, TB]) BG() (TB, TG) { return _v.B.Value(), _v.G.Value() }
func (_v RGBTyped[TR, TG, TB]) BB() (TB, TB) { return _v.B.Value(), _v.B.Value() }
func (_v RGBTyped[TR, TG, TB]) RRR() (TR, TR, TR) { return _v.R.Value(), _v.R.Value(), _v.R.Value() }
func (_v RGBTyped[TR, TG, TB]) RRG() (TR, TR, TG) { return _v.R.Value(), _v.R.Value(), _v.G.Value() }
func (_v RGBTyped[TR, TG, TB]) RRB() (TR, TR, TB) { return _v.R.Value(), _v.R.Value(), _v.B.Value() }
func (_v RGBTyped[TR, TG, TB]) RGR() (TR, TG, TR) { return _v.R.Value(), _v.G.Value(), _v.R.Value() }
func (_v RGBTyped[TR, TG, TB]) RGG() (TR, TG, TG) { return _v.R.Value(), _v.G.Value(), _v.G.Value() }
func (_v RGBTyped[TR, TG, TB]) RGB() (TR, TG, TB) { return _v.R.Value(), _v.G.Value(), _v.B.Value() }
func (_v RGBTyped[TR, TG, TB]) RBR() (TR, TB, TR) { return _v.R.Value(), _v.B.Value(), _v.R.Value() }
func (_v RGBTyped[TR, TG, TB]) RBG() (TR, TB, TG) { return _v.R.Value(), _v.B.Value(), _v.G.Value() }
func (_v RGBTyped[TR, TG, TB]) RBB() (TR, TB, TB) { return _v.R.Value(), _v.B.Value(), _v.B.Value() }
func (_v RGBTyped[TR, TG, TB]) GRR() (TG, TR, TR) { return _v.G.Value(), _v.R.Value(), _v.R.Value() }
func (_v RGBTyped[TR, TG, TB]) GRG() (TG, TR, TG) { return _v.G.Value(), _v.R.Value(), _v.G.Value() }
func (_v RGBTyped[TR, TG, TB]) GRB() (TG, TR, TB) { return _v.G.Value(), _v.R.Value(), _v.B.Value() }
func (_v RGBTyped[TR, TG, TB]) GGR() (TG, TG, TR) { return _v.G.Value(), _v.G.Value(), _v.R.Value() }
func (_v RGBTyped[TR, TG, TB]) GGG() (TG, TG, TG) { return _v.G.Value(), _v.G.Value(), _v.G.Value() }
func (_v RGBTyped[TR, TG, TB]) GGB() (TG, TG, TB) { return _v.G.Value(), _v.G.Value(), _v.B.Value() }
func (_v RGBTyped[TR, TG, TB]) GBR() (TG, TB, TR) { return _v.G.Value(), _v.B.Value(), _v.R.Value() }
func (_v RGBTyped[TR, TG, TB]) GBG() (TG, TB, TG) { return _v.G.Value(), _v.B.Value(), _v.G.Value() }
func (_v RGBTyped[TR, TG, TB]) GBB() (TG, TB, TB) { return _v.G.Value(), _v.B.Value(), _v.B.Value() }
func (_v RGBTyped[TR, TG, TB]) BRR() (TB, TR, TR) { return _v.B.Value(), _v.R.Value(), _v.R.Value() }
func (_v RGBTyped[TR, TG, TB]) BRG() (TB, TR, TG) { return _v.B.Value(), _v.R.Value(), _v.G.Value() }
func (_v RGBTyped[TR, TG, TB]) BRB() (TB, TR, TB) { return _v.B.Value(), _v.R.Value(), _v.B.Value() }
func (_v RGBTyped[TR, TG, TB]) BGR() (TB, TG, TR) { return _v.B.Value(), _v.G.Value(), _v.R.Value() }
func (_v RGBTyped[TR, TG, TB]) BGG() (TB, TG, TG) { return _v.B.Value(), _v.G.Value(), _v.G.Value() }
func (_v RGBTyped[TR, TG, TB]) BGB() (TB, TG, TB) { return _v.B.Value(), _v.G.Value(), _v.B.Value() }
func (_v RGBTyped[TR, TG, TB]) BBR() (TB, TB, TR) { return _v.B.Value(), _v.B.Value(), _v.R.Value() }
func (_v RGBTyped[TR, TG, TB]) BBG() (TB, TB, TG) { return _v.B.Value(), _v.B.Value(), _v.G.Value() }
func (_v RGBTyped[TR, TG, TB]) BBB() (TB, TB, TB) { return _v.B.Value(), _v.B.Value(), _v.B.Value() }
