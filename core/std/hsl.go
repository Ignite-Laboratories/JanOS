// Code generated by 'gen/letters'; DO NOT EDIT.
//go:generate go run ../gen/letters -pkg std -name HSL -nameL hsl -cmpts H,S,L -cmptsL h,s,l -out ../std/hsl.go
package std

import (
	"core/sys/atlas"
	"core/sys/name/format"
	"core/sys/num"
	"core/sys/num/bounded"
	"core/sys/support"
	"fmt"
	"strings"
)

// HSL is a 3D vector of like-typed bounded.Numeric components.
//
// NOTE: If you'd like asymmetric types, please see HSLTyped.
type HSL[T num.Primitive] = HSLTyped[T, T, T]

// HSLTyped is a 3D vector of asymmetrically typed bounded.Numeric components.
//
// NOTE: If you'd like symmetric types, please see HSL.
type HSLTyped[TH num.Primitive, TS num.Primitive, TL num.Primitive] struct {
	Entity
	H bounded.Numeric[TH]
	S bounded.Numeric[TS]
	L bounded.Numeric[TL]
}

func NewHSL[T num.Primitive](h T, s T, l T, name ...string) *HSL[T] {
	typed := HSL[T](*NewHSLTyped[T, T, T](h, s, l, name...))
	return &typed
}

func NewHSLTyped[TH num.Primitive, TS num.Primitive, TL num.Primitive](h TH, s TS, l TL, name ...string) *HSLTyped[TH, TS, TL] {
	minH := num.MinValue[TH]()
	maxH := num.MaxValue[TH]()
	if num.IsFloat[TH]() {
		minH = 0
		maxH = 1
	}
	minS := num.MinValue[TS]()
	maxS := num.MaxValue[TS]()
	if num.IsFloat[TS]() {
		minS = 0
		maxS = 1
	}
	minL := num.MinValue[TL]()
	maxL := num.MaxValue[TL]()
	if num.IsFloat[TL]() {
		minL = 0
		maxL = 1
	}

	_v := &HSLTyped[TH, TS, TL]{}
	_v.Entity = NewEntity[format.Default]()
	_v.SetBoundaries(minH, maxH, minS, maxS, minL, maxL)
	_v.Set(h, s, l)
	if len(name) > 0 {
		_v.SetName(name[0])
	}
	return _v
}

func (_v *HSLTyped[TH, TS, TL]) Name() string {
	return _v.GivenName.Name
}

func (_v *HSLTyped[TH, TS, TL]) SetName(name string) *HSLTyped[TH, TS, TL] {
	_v.GivenName.Name = name
	return _v
}

func (_v *HSLTyped[TH, TS, TL]) Set(h TH, s TS, l TL) *HSLTyped[TH, TS, TL] {
	_ = _v.H.Set(h)
	_ = _v.S.Set(s)
	_ = _v.L.Set(l)
	return _v
}

func (_v *HSLTyped[TH, TS, TL]) SetClamp(clamp bool) *HSLTyped[TH, TS, TL] {
	_v.H.Clamp = clamp
	_v.S.Clamp = clamp
	_v.L.Clamp = clamp
	return _v
}

func (_v *HSLTyped[TH, TS, TL]) SetBoundaries(minH, maxH TH, minS, maxS TS, minL, maxL TL) *HSLTyped[TH, TS, TL] {
	_ = _v.H.SetBoundaries(minH, maxH)
	_ = _v.S.SetBoundaries(minS, maxS)
	_ = _v.L.SetBoundaries(minL, maxL)
	return _v
}

func (_v *HSLTyped[TH, TS, TL]) Component(index uint) (bounded.INumeric, error) {
	switch index {
	case 0:
		return &_v.H, nil
	case 1:
		return &_v.S, nil
	case 2:
		return &_v.L, nil
	default:
		return nil, fmt.Errorf("cannot get component index %d of an HSL vector", index)
	}
}

func (_v *HSLTyped[TH, TS, TL]) Components() []bounded.INumeric {
	return []bounded.INumeric{&_v.H, &_v.S, &_v.L}
}

func (_v *HSLTyped[TH, TS, TL]) ComponentByName(name string) (bounded.INumeric, error) {
	switch strings.ToLower(name) {
	case "h":
		return &_v.H, nil
	case "s":
		return &_v.S, nil
	case "l":
		return &_v.L, nil
	default:
		return nil, fmt.Errorf("cannot get component \"%s\" of an HSL vector", name)
	}
}

func (_v *HSLTyped[TH, TS, TL]) ComponentLen() uint {
	return 3
}

func (_v *HSLTyped[TH, TS, TL]) SetComponent(index uint, value any) error {
	switch index {
	case 0:
		 _v.H.Set(value.(TH))
	case 1:
		 _v.S.Set(value.(TS))
	case 2:
		 _v.L.Set(value.(TL))
	default:
		return fmt.Errorf("cannot set component index %d of an HSL vector", index)
	}
	return nil
}

func (_v *HSLTyped[TH, TS, TL]) SetComponents(values []any) error {
	if len(values) != 3 {
		return fmt.Errorf("cannot set %d components of 3D vector HSL", len(values), )
	}
	if _, ok := values[0].(TH); !ok {
		return fmt.Errorf("expected type %T for component H, got type %T", TH(0), values[0])	}
	if _, ok := values[1].(TS); !ok {
		return fmt.Errorf("expected type %T for component S, got type %T", TS(0), values[1])	}
	if _, ok := values[2].(TL); !ok {
		return fmt.Errorf("expected type %T for component L, got type %T", TL(0), values[2])	}
	_v.H.Set(values[0].(TH))
	_v.S.Set(values[1].(TS))
	_v.L.Set(values[2].(TL))
	return nil
}

func (_v *HSLTyped[TH, TS, TL]) SetComponentByName(name string, value any) error {
	switch strings.ToLower(name) {
	case "h":
		 _v.H.Set(value.(TH))
	case "s":
		 _v.S.Set(value.(TS))
	case "l":
		 _v.L.Set(value.(TL))
	default:
		return fmt.Errorf("cannot set component \"%s\" of an HSL vector", name)
	}
	return nil
}

func (_v HSLTyped[TH, TS, TL]) String() string {
	if atlas.CompactVectors {
		return fmt.Sprintf("{h: %v, s: %v, l: %v}", _v.H.String(), _v.S.String(), _v.L.String())
	}
	 if support.AllSameTypes(TH(0), TS(0), TL(0)) {
		return fmt.Sprintf("hsl[%T]{%v, %v, %v}(\"%v\")", TH(0), _v.H.String(), _v.S.String(), _v.L.String(), _v.GivenName.Name)
	}
	return fmt.Sprintf("hsl[%T, %T, %T]{%v, %v, %v}(\"%v\")", TH(0), TS(0), TL(0), _v.H.String(), _v.S.String(), _v.L.String(), _v.GivenName.Name)
}

func (_v *HSLTyped[TH, TS, TL]) HH() (TH, TH) { return _v.H.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) HS() (TH, TS) { return _v.H.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) HL() (TH, TL) { return _v.H.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) SH() (TS, TH) { return _v.S.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) SS() (TS, TS) { return _v.S.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) SL() (TS, TL) { return _v.S.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) LH() (TL, TH) { return _v.L.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) LS() (TL, TS) { return _v.L.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) LL() (TL, TL) { return _v.L.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) HHH() (TH, TH, TH) { return _v.H.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) HHS() (TH, TH, TS) { return _v.H.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) HHL() (TH, TH, TL) { return _v.H.Value(), _v.H.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) HSH() (TH, TS, TH) { return _v.H.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) HSS() (TH, TS, TS) { return _v.H.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) HSL() (TH, TS, TL) { return _v.H.Value(), _v.S.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) HLH() (TH, TL, TH) { return _v.H.Value(), _v.L.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) HLS() (TH, TL, TS) { return _v.H.Value(), _v.L.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) HLL() (TH, TL, TL) { return _v.H.Value(), _v.L.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) SHH() (TS, TH, TH) { return _v.S.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) SHS() (TS, TH, TS) { return _v.S.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) SHL() (TS, TH, TL) { return _v.S.Value(), _v.H.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) SSH() (TS, TS, TH) { return _v.S.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) SSS() (TS, TS, TS) { return _v.S.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) SSL() (TS, TS, TL) { return _v.S.Value(), _v.S.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) SLH() (TS, TL, TH) { return _v.S.Value(), _v.L.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) SLS() (TS, TL, TS) { return _v.S.Value(), _v.L.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) SLL() (TS, TL, TL) { return _v.S.Value(), _v.L.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) LHH() (TL, TH, TH) { return _v.L.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) LHS() (TL, TH, TS) { return _v.L.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) LHL() (TL, TH, TL) { return _v.L.Value(), _v.H.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) LSH() (TL, TS, TH) { return _v.L.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) LSS() (TL, TS, TS) { return _v.L.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) LSL() (TL, TS, TL) { return _v.L.Value(), _v.S.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) LLH() (TL, TL, TH) { return _v.L.Value(), _v.L.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) LLS() (TL, TL, TS) { return _v.L.Value(), _v.L.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) LLL() (TL, TL, TL) { return _v.L.Value(), _v.L.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) HHHH() (TH, TH, TH, TH) { return _v.H.Value(), _v.H.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) HHHS() (TH, TH, TH, TS) { return _v.H.Value(), _v.H.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) HHHL() (TH, TH, TH, TL) { return _v.H.Value(), _v.H.Value(), _v.H.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) HHSH() (TH, TH, TS, TH) { return _v.H.Value(), _v.H.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) HHSS() (TH, TH, TS, TS) { return _v.H.Value(), _v.H.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) HHSL() (TH, TH, TS, TL) { return _v.H.Value(), _v.H.Value(), _v.S.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) HHLH() (TH, TH, TL, TH) { return _v.H.Value(), _v.H.Value(), _v.L.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) HHLS() (TH, TH, TL, TS) { return _v.H.Value(), _v.H.Value(), _v.L.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) HHLL() (TH, TH, TL, TL) { return _v.H.Value(), _v.H.Value(), _v.L.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) HSHH() (TH, TS, TH, TH) { return _v.H.Value(), _v.S.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) HSHS() (TH, TS, TH, TS) { return _v.H.Value(), _v.S.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) HSHL() (TH, TS, TH, TL) { return _v.H.Value(), _v.S.Value(), _v.H.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) HSSH() (TH, TS, TS, TH) { return _v.H.Value(), _v.S.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) HSSS() (TH, TS, TS, TS) { return _v.H.Value(), _v.S.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) HSSL() (TH, TS, TS, TL) { return _v.H.Value(), _v.S.Value(), _v.S.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) HSLH() (TH, TS, TL, TH) { return _v.H.Value(), _v.S.Value(), _v.L.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) HSLS() (TH, TS, TL, TS) { return _v.H.Value(), _v.S.Value(), _v.L.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) HSLL() (TH, TS, TL, TL) { return _v.H.Value(), _v.S.Value(), _v.L.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) HLHH() (TH, TL, TH, TH) { return _v.H.Value(), _v.L.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) HLHS() (TH, TL, TH, TS) { return _v.H.Value(), _v.L.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) HLHL() (TH, TL, TH, TL) { return _v.H.Value(), _v.L.Value(), _v.H.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) HLSH() (TH, TL, TS, TH) { return _v.H.Value(), _v.L.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) HLSS() (TH, TL, TS, TS) { return _v.H.Value(), _v.L.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) HLSL() (TH, TL, TS, TL) { return _v.H.Value(), _v.L.Value(), _v.S.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) HLLH() (TH, TL, TL, TH) { return _v.H.Value(), _v.L.Value(), _v.L.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) HLLS() (TH, TL, TL, TS) { return _v.H.Value(), _v.L.Value(), _v.L.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) HLLL() (TH, TL, TL, TL) { return _v.H.Value(), _v.L.Value(), _v.L.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) SHHH() (TS, TH, TH, TH) { return _v.S.Value(), _v.H.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) SHHS() (TS, TH, TH, TS) { return _v.S.Value(), _v.H.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) SHHL() (TS, TH, TH, TL) { return _v.S.Value(), _v.H.Value(), _v.H.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) SHSH() (TS, TH, TS, TH) { return _v.S.Value(), _v.H.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) SHSS() (TS, TH, TS, TS) { return _v.S.Value(), _v.H.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) SHSL() (TS, TH, TS, TL) { return _v.S.Value(), _v.H.Value(), _v.S.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) SHLH() (TS, TH, TL, TH) { return _v.S.Value(), _v.H.Value(), _v.L.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) SHLS() (TS, TH, TL, TS) { return _v.S.Value(), _v.H.Value(), _v.L.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) SHLL() (TS, TH, TL, TL) { return _v.S.Value(), _v.H.Value(), _v.L.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) SSHH() (TS, TS, TH, TH) { return _v.S.Value(), _v.S.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) SSHS() (TS, TS, TH, TS) { return _v.S.Value(), _v.S.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) SSHL() (TS, TS, TH, TL) { return _v.S.Value(), _v.S.Value(), _v.H.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) SSSH() (TS, TS, TS, TH) { return _v.S.Value(), _v.S.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) SSSS() (TS, TS, TS, TS) { return _v.S.Value(), _v.S.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) SSSL() (TS, TS, TS, TL) { return _v.S.Value(), _v.S.Value(), _v.S.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) SSLH() (TS, TS, TL, TH) { return _v.S.Value(), _v.S.Value(), _v.L.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) SSLS() (TS, TS, TL, TS) { return _v.S.Value(), _v.S.Value(), _v.L.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) SSLL() (TS, TS, TL, TL) { return _v.S.Value(), _v.S.Value(), _v.L.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) SLHH() (TS, TL, TH, TH) { return _v.S.Value(), _v.L.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) SLHS() (TS, TL, TH, TS) { return _v.S.Value(), _v.L.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) SLHL() (TS, TL, TH, TL) { return _v.S.Value(), _v.L.Value(), _v.H.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) SLSH() (TS, TL, TS, TH) { return _v.S.Value(), _v.L.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) SLSS() (TS, TL, TS, TS) { return _v.S.Value(), _v.L.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) SLSL() (TS, TL, TS, TL) { return _v.S.Value(), _v.L.Value(), _v.S.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) SLLH() (TS, TL, TL, TH) { return _v.S.Value(), _v.L.Value(), _v.L.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) SLLS() (TS, TL, TL, TS) { return _v.S.Value(), _v.L.Value(), _v.L.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) SLLL() (TS, TL, TL, TL) { return _v.S.Value(), _v.L.Value(), _v.L.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) LHHH() (TL, TH, TH, TH) { return _v.L.Value(), _v.H.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) LHHS() (TL, TH, TH, TS) { return _v.L.Value(), _v.H.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) LHHL() (TL, TH, TH, TL) { return _v.L.Value(), _v.H.Value(), _v.H.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) LHSH() (TL, TH, TS, TH) { return _v.L.Value(), _v.H.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) LHSS() (TL, TH, TS, TS) { return _v.L.Value(), _v.H.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) LHSL() (TL, TH, TS, TL) { return _v.L.Value(), _v.H.Value(), _v.S.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) LHLH() (TL, TH, TL, TH) { return _v.L.Value(), _v.H.Value(), _v.L.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) LHLS() (TL, TH, TL, TS) { return _v.L.Value(), _v.H.Value(), _v.L.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) LHLL() (TL, TH, TL, TL) { return _v.L.Value(), _v.H.Value(), _v.L.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) LSHH() (TL, TS, TH, TH) { return _v.L.Value(), _v.S.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) LSHS() (TL, TS, TH, TS) { return _v.L.Value(), _v.S.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) LSHL() (TL, TS, TH, TL) { return _v.L.Value(), _v.S.Value(), _v.H.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) LSSH() (TL, TS, TS, TH) { return _v.L.Value(), _v.S.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) LSSS() (TL, TS, TS, TS) { return _v.L.Value(), _v.S.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) LSSL() (TL, TS, TS, TL) { return _v.L.Value(), _v.S.Value(), _v.S.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) LSLH() (TL, TS, TL, TH) { return _v.L.Value(), _v.S.Value(), _v.L.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) LSLS() (TL, TS, TL, TS) { return _v.L.Value(), _v.S.Value(), _v.L.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) LSLL() (TL, TS, TL, TL) { return _v.L.Value(), _v.S.Value(), _v.L.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) LLHH() (TL, TL, TH, TH) { return _v.L.Value(), _v.L.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) LLHS() (TL, TL, TH, TS) { return _v.L.Value(), _v.L.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) LLHL() (TL, TL, TH, TL) { return _v.L.Value(), _v.L.Value(), _v.H.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) LLSH() (TL, TL, TS, TH) { return _v.L.Value(), _v.L.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) LLSS() (TL, TL, TS, TS) { return _v.L.Value(), _v.L.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) LLSL() (TL, TL, TS, TL) { return _v.L.Value(), _v.L.Value(), _v.S.Value(), _v.L.Value() }
func (_v *HSLTyped[TH, TS, TL]) LLLH() (TL, TL, TL, TH) { return _v.L.Value(), _v.L.Value(), _v.L.Value(), _v.H.Value() }
func (_v *HSLTyped[TH, TS, TL]) LLLS() (TL, TL, TL, TS) { return _v.L.Value(), _v.L.Value(), _v.L.Value(), _v.S.Value() }
func (_v *HSLTyped[TH, TS, TL]) LLLL() (TL, TL, TL, TL) { return _v.L.Value(), _v.L.Value(), _v.L.Value(), _v.L.Value() }
