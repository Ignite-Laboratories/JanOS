// Code generated by 'internal/generators/letter'; DO NOT EDIT.
//go:generate go run ./internal/generators/letter -pkg std -name HSL -nameL hsl -cmpts H,S,L -cmptsL h,s,l -out hsl.go
package std

import (
	"core/sys/name/format"
	"core/sys/num"
	"core/sys/num/bounded"
	"core/sys/support"
	"fmt"
)

// HSL is a 3D vector of like-typed bounded.Number components.
//
// NOTE: If you'd like asymmetric types, please see HSLTyped.
type HSL[T num.Primitive] = HSLTyped[T, T, T]

// HSLTyped is a 3D vector of asymmetrically typed bounded.Number components.
//
// NOTE: If you'd like symmetric types, please see HSL.
type HSLTyped[TH num.Primitive, TS num.Primitive, TL num.Primitive] struct {
	Entity
	H bounded.Number[TH]
	S bounded.Number[TS]
	L bounded.Number[TL]
}

func NewHSL[T num.Primitive]() HSL[T] {
	return HSL[T](NewHSLTyped[T, T, T]())
}

func NewHSLTyped[TH num.Primitive, TS num.Primitive, TL num.Primitive]() HSLTyped[TH, TS, TL] {
	minH := num.MinValue[TH]()
	maxH := num.MaxValue[TH]()
	minS := num.MinValue[TS]()
	maxS := num.MaxValue[TS]()
	minL := num.MinValue[TL]()
	maxL := num.MaxValue[TL]()

	c := HSLTyped[TH, TS, TL]{}
	c.Entity = NewEntity[format.Default]()
	c.SetBoundaries(minH, maxH, minS, maxS, minL, maxL)
	return c
}

func (_v HSLTyped[TH, TS, TL]) String() string {
	if support.AllSameTypes(TH(0), TS(0), TL(0)) {
		return fmt.Sprintf("hsl[%T].{%v, %v, %v}(%v)", TH(0), _v.H.ValueString(), _v.S.ValueString(), _v.L.ValueString(), _v.GivenName.Name)
	}
	return fmt.Sprintf("hsl[%T, %T, %T].{%v, %v, %v}(%v)", TH(0), TS(0), TL(0), _v.H.ValueString(), _v.S.ValueString(), _v.L.ValueString(), _v.GivenName.Name)
}

func (_v HSLTyped[TH, TS, TL]) Set(h TH, s TS, l TL) HSLTyped[TH, TS, TL] {
	_ = _v.H.Set(h)
	_ = _v.S.Set(s)
	_ = _v.L.Set(l)
	return _v
}

func (_v HSLTyped[TH, TS, TL]) SetClamp(clamp bool) HSLTyped[TH, TS, TL] {
	_v.H.Clamp = clamp
	_v.S.Clamp = clamp
	_v.L.Clamp = clamp
	return _v
}

func (_v HSLTyped[TH, TS, TL]) SetBoundaries(minH, maxH TH, minS, maxS TS, minL, maxL TL) HSLTyped[TH, TS, TL] {
	_ = _v.H.SetBoundaries(minH, maxH)
	_ = _v.S.SetBoundaries(minS, maxS)
	_ = _v.L.SetBoundaries(minL, maxL)
	return _v
}

/**
Swizzling

	NOTE: This is a regular expression to find and replace swizzle functions into a one-liner if the auto formatter ever kicks in

	Find -
	func \((.*?)\) ([A-Z]{2,4})\(\) \((.*?)\)[ ]*\{[\n\t ]*return(.*?)[\n\t ]*\}

	Replace -
	func ($1) $2() ($3) { return$4 }
*/

func (_v HSLTyped[TH, TS, TL]) HH() (TH, TH) { return _v.H.Value(), _v.H.Value() }
func (_v HSLTyped[TH, TS, TL]) HS() (TH, TS) { return _v.H.Value(), _v.S.Value() }
func (_v HSLTyped[TH, TS, TL]) HL() (TH, TL) { return _v.H.Value(), _v.L.Value() }
func (_v HSLTyped[TH, TS, TL]) SH() (TS, TH) { return _v.S.Value(), _v.H.Value() }
func (_v HSLTyped[TH, TS, TL]) SS() (TS, TS) { return _v.S.Value(), _v.S.Value() }
func (_v HSLTyped[TH, TS, TL]) SL() (TS, TL) { return _v.S.Value(), _v.L.Value() }
func (_v HSLTyped[TH, TS, TL]) LH() (TL, TH) { return _v.L.Value(), _v.H.Value() }
func (_v HSLTyped[TH, TS, TL]) LS() (TL, TS) { return _v.L.Value(), _v.S.Value() }
func (_v HSLTyped[TH, TS, TL]) LL() (TL, TL) { return _v.L.Value(), _v.L.Value() }
func (_v HSLTyped[TH, TS, TL]) HHH() (TH, TH, TH) { return _v.H.Value(), _v.H.Value(), _v.H.Value() }
func (_v HSLTyped[TH, TS, TL]) HHS() (TH, TH, TS) { return _v.H.Value(), _v.H.Value(), _v.S.Value() }
func (_v HSLTyped[TH, TS, TL]) HHL() (TH, TH, TL) { return _v.H.Value(), _v.H.Value(), _v.L.Value() }
func (_v HSLTyped[TH, TS, TL]) HSH() (TH, TS, TH) { return _v.H.Value(), _v.S.Value(), _v.H.Value() }
func (_v HSLTyped[TH, TS, TL]) HSS() (TH, TS, TS) { return _v.H.Value(), _v.S.Value(), _v.S.Value() }
func (_v HSLTyped[TH, TS, TL]) HSL() (TH, TS, TL) { return _v.H.Value(), _v.S.Value(), _v.L.Value() }
func (_v HSLTyped[TH, TS, TL]) HLH() (TH, TL, TH) { return _v.H.Value(), _v.L.Value(), _v.H.Value() }
func (_v HSLTyped[TH, TS, TL]) HLS() (TH, TL, TS) { return _v.H.Value(), _v.L.Value(), _v.S.Value() }
func (_v HSLTyped[TH, TS, TL]) HLL() (TH, TL, TL) { return _v.H.Value(), _v.L.Value(), _v.L.Value() }
func (_v HSLTyped[TH, TS, TL]) SHH() (TS, TH, TH) { return _v.S.Value(), _v.H.Value(), _v.H.Value() }
func (_v HSLTyped[TH, TS, TL]) SHS() (TS, TH, TS) { return _v.S.Value(), _v.H.Value(), _v.S.Value() }
func (_v HSLTyped[TH, TS, TL]) SHL() (TS, TH, TL) { return _v.S.Value(), _v.H.Value(), _v.L.Value() }
func (_v HSLTyped[TH, TS, TL]) SSH() (TS, TS, TH) { return _v.S.Value(), _v.S.Value(), _v.H.Value() }
func (_v HSLTyped[TH, TS, TL]) SSS() (TS, TS, TS) { return _v.S.Value(), _v.S.Value(), _v.S.Value() }
func (_v HSLTyped[TH, TS, TL]) SSL() (TS, TS, TL) { return _v.S.Value(), _v.S.Value(), _v.L.Value() }
func (_v HSLTyped[TH, TS, TL]) SLH() (TS, TL, TH) { return _v.S.Value(), _v.L.Value(), _v.H.Value() }
func (_v HSLTyped[TH, TS, TL]) SLS() (TS, TL, TS) { return _v.S.Value(), _v.L.Value(), _v.S.Value() }
func (_v HSLTyped[TH, TS, TL]) SLL() (TS, TL, TL) { return _v.S.Value(), _v.L.Value(), _v.L.Value() }
func (_v HSLTyped[TH, TS, TL]) LHH() (TL, TH, TH) { return _v.L.Value(), _v.H.Value(), _v.H.Value() }
func (_v HSLTyped[TH, TS, TL]) LHS() (TL, TH, TS) { return _v.L.Value(), _v.H.Value(), _v.S.Value() }
func (_v HSLTyped[TH, TS, TL]) LHL() (TL, TH, TL) { return _v.L.Value(), _v.H.Value(), _v.L.Value() }
func (_v HSLTyped[TH, TS, TL]) LSH() (TL, TS, TH) { return _v.L.Value(), _v.S.Value(), _v.H.Value() }
func (_v HSLTyped[TH, TS, TL]) LSS() (TL, TS, TS) { return _v.L.Value(), _v.S.Value(), _v.S.Value() }
func (_v HSLTyped[TH, TS, TL]) LSL() (TL, TS, TL) { return _v.L.Value(), _v.S.Value(), _v.L.Value() }
func (_v HSLTyped[TH, TS, TL]) LLH() (TL, TL, TH) { return _v.L.Value(), _v.L.Value(), _v.H.Value() }
func (_v HSLTyped[TH, TS, TL]) LLS() (TL, TL, TS) { return _v.L.Value(), _v.L.Value(), _v.S.Value() }
func (_v HSLTyped[TH, TS, TL]) LLL() (TL, TL, TL) { return _v.L.Value(), _v.L.Value(), _v.L.Value() }
