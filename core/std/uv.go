// Code generated by 'internal/generators/letter'; DO NOT EDIT.
//go:generate go run ./internal/generators/letter -pkg std -name UV -nameL uv -cmpts U,V -cmptsL u,v -out uv.go
package std

import (
	"core/sys/name/format"
	"core/sys/num"
	"core/sys/num/bounded"
	"core/sys/support"
	"fmt"
)

// UV is a 2D vector of like-typed bounded.Number components.
//
// NOTE: If you'd like asymmetric types, please see UVTyped.
type UV[T num.Primitive] = UVTyped[T, T]

// UVTyped is a 2D vector of asymmetrically typed bounded.Number components.
//
// NOTE: If you'd like symmetric types, please see UV.
type UVTyped[TU num.Primitive, TV num.Primitive] struct {
	Entity
	U bounded.Number[TU]
	V bounded.Number[TV]
}

func NewUV[T num.Primitive]() UV[T] {
	return UV[T](NewUVTyped[T, T]())
}

func NewUVTyped[TU num.Primitive, TV num.Primitive]() UVTyped[TU, TV] {
	minU := num.MinValue[TU]()
	maxU := num.MaxValue[TU]()
	minV := num.MinValue[TV]()
	maxV := num.MaxValue[TV]()

	c := UVTyped[TU, TV]{}
	c.Entity = NewEntity[format.Default]()
	c.SetBoundaries(minU, maxU, minV, maxV)
	return c
}

func (_v UVTyped[TU, TV]) String() string {
	if support.AllSameTypes(TU(0), TV(0)) {
		return fmt.Sprintf("uv[%T].{%v, %v}(%v)", TU(0), _v.U.ValueString(), _v.V.ValueString(), _v.GivenName.Name)
	}
	return fmt.Sprintf("uv[%T, %T].{%v, %v}(%v)", TU(0), TV(0), _v.U.ValueString(), _v.V.ValueString(), _v.GivenName.Name)
}

func (_v UVTyped[TU, TV]) Set(u TU, v TV) UVTyped[TU, TV] {
	_ = _v.U.Set(u)
	_ = _v.V.Set(v)
	return _v
}

func (_v UVTyped[TU, TV]) SetClamp(clamp bool) UVTyped[TU, TV] {
	_v.U.Clamp = clamp
	_v.V.Clamp = clamp
	return _v
}

func (_v UVTyped[TU, TV]) SetBoundaries(minU, maxU TU, minV, maxV TV) UVTyped[TU, TV] {
	_ = _v.U.SetBoundaries(minU, maxU)
	_ = _v.V.SetBoundaries(minV, maxV)
	return _v
}

/**
Swizzling

	NOTE: This is a regular expression to find and replace swizzle functions into a one-liner if the auto formatter ever kicks in

	Find -
	func \((.*?)\) ([A-Z]{2,4})\(\) \((.*?)\)[ ]*\{[\n\t ]*return(.*?)[\n\t ]*\}

	Replace -
	func ($1) $2() ($3) { return$4 }
*/

func (_v UVTyped[TU, TV]) UU() (TU, TU) { return _v.U.Value(), _v.U.Value() }
func (_v UVTyped[TU, TV]) UV() (TU, TV) { return _v.U.Value(), _v.V.Value() }
func (_v UVTyped[TU, TV]) VU() (TV, TU) { return _v.V.Value(), _v.U.Value() }
func (_v UVTyped[TU, TV]) VV() (TV, TV) { return _v.V.Value(), _v.V.Value() }
