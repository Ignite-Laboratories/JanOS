// Code generated by 'internal/generators/letter'; DO NOT EDIT.
//go:generate go run ./internal/generators/letter -pkg std -name HSB -nameL hsb -cmpts H,S,B -cmptsL h,s,b -out hsb.go
package std

import (
	"core/sys/name/format"
	"core/sys/num"
	"core/sys/num/bounded"
	"core/sys/support"
	"fmt"
)

// HSB is a 3D vector of like-typed bounded.Number components.
//
// NOTE: If you'd like asymmetric types, please see HSBTyped.
type HSB[T num.Primitive] = HSBTyped[T, T, T]

// HSBTyped is a 3D vector of asymmetrically typed bounded.Number components.
//
// NOTE: If you'd like symmetric types, please see HSB.
type HSBTyped[TH num.Primitive, TS num.Primitive, TB num.Primitive] struct {
	Entity
	H bounded.Number[TH]
	S bounded.Number[TS]
	B bounded.Number[TB]
}

func NewHSB[T num.Primitive]() HSB[T] {
	return HSB[T](NewHSBTyped[T, T, T]())
}

func NewHSBTyped[TH num.Primitive, TS num.Primitive, TB num.Primitive]() HSBTyped[TH, TS, TB] {
	minH := num.MinValue[TH]()
	maxH := num.MaxValue[TH]()
	minS := num.MinValue[TS]()
	maxS := num.MaxValue[TS]()
	minB := num.MinValue[TB]()
	maxB := num.MaxValue[TB]()

	c := HSBTyped[TH, TS, TB]{}
	c.Entity = NewEntity[format.Default]()
	c.SetBoundaries(minH, maxH, minS, maxS, minB, maxB)
	return c
}

func (_v HSBTyped[TH, TS, TB]) String() string {
	if support.AllSameTypes(TH(0), TS(0), TB(0)) {
		return fmt.Sprintf("hsb[%T].{%v, %v, %v}(%v)", TH(0), _v.H.ValueString(), _v.S.ValueString(), _v.B.ValueString(), _v.GivenName.Name)
	}
	return fmt.Sprintf("hsb[%T, %T, %T].{%v, %v, %v}(%v)", TH(0), TS(0), TB(0), _v.H.ValueString(), _v.S.ValueString(), _v.B.ValueString(), _v.GivenName.Name)
}

func (_v HSBTyped[TH, TS, TB]) Set(h TH, s TS, b TB) HSBTyped[TH, TS, TB] {
	_ = _v.H.Set(h)
	_ = _v.S.Set(s)
	_ = _v.B.Set(b)
	return _v
}

func (_v HSBTyped[TH, TS, TB]) SetClamp(clamp bool) HSBTyped[TH, TS, TB] {
	_v.H.Clamp = clamp
	_v.S.Clamp = clamp
	_v.B.Clamp = clamp
	return _v
}

func (_v HSBTyped[TH, TS, TB]) SetBoundaries(minH, maxH TH, minS, maxS TS, minB, maxB TB) HSBTyped[TH, TS, TB] {
	_ = _v.H.SetBoundaries(minH, maxH)
	_ = _v.S.SetBoundaries(minS, maxS)
	_ = _v.B.SetBoundaries(minB, maxB)
	return _v
}

/**
Swizzling

	NOTE: This is a regular expression to find and replace swizzle functions into a one-liner if the auto formatter ever kicks in

	Find -
	func \((.*?)\) ([A-Z]{2,4})\(\) \((.*?)\)[ ]*\{[\n\t ]*return(.*?)[\n\t ]*\}

	Replace -
	func ($1) $2() ($3) { return$4 }
*/

func (_v HSBTyped[TH, TS, TB]) HH() (TH, TH) { return _v.H.Value(), _v.H.Value() }
func (_v HSBTyped[TH, TS, TB]) HS() (TH, TS) { return _v.H.Value(), _v.S.Value() }
func (_v HSBTyped[TH, TS, TB]) HB() (TH, TB) { return _v.H.Value(), _v.B.Value() }
func (_v HSBTyped[TH, TS, TB]) SH() (TS, TH) { return _v.S.Value(), _v.H.Value() }
func (_v HSBTyped[TH, TS, TB]) SS() (TS, TS) { return _v.S.Value(), _v.S.Value() }
func (_v HSBTyped[TH, TS, TB]) SB() (TS, TB) { return _v.S.Value(), _v.B.Value() }
func (_v HSBTyped[TH, TS, TB]) BH() (TB, TH) { return _v.B.Value(), _v.H.Value() }
func (_v HSBTyped[TH, TS, TB]) BS() (TB, TS) { return _v.B.Value(), _v.S.Value() }
func (_v HSBTyped[TH, TS, TB]) BB() (TB, TB) { return _v.B.Value(), _v.B.Value() }
func (_v HSBTyped[TH, TS, TB]) HHH() (TH, TH, TH) { return _v.H.Value(), _v.H.Value(), _v.H.Value() }
func (_v HSBTyped[TH, TS, TB]) HHS() (TH, TH, TS) { return _v.H.Value(), _v.H.Value(), _v.S.Value() }
func (_v HSBTyped[TH, TS, TB]) HHB() (TH, TH, TB) { return _v.H.Value(), _v.H.Value(), _v.B.Value() }
func (_v HSBTyped[TH, TS, TB]) HSH() (TH, TS, TH) { return _v.H.Value(), _v.S.Value(), _v.H.Value() }
func (_v HSBTyped[TH, TS, TB]) HSS() (TH, TS, TS) { return _v.H.Value(), _v.S.Value(), _v.S.Value() }
func (_v HSBTyped[TH, TS, TB]) HSB() (TH, TS, TB) { return _v.H.Value(), _v.S.Value(), _v.B.Value() }
func (_v HSBTyped[TH, TS, TB]) HBH() (TH, TB, TH) { return _v.H.Value(), _v.B.Value(), _v.H.Value() }
func (_v HSBTyped[TH, TS, TB]) HBS() (TH, TB, TS) { return _v.H.Value(), _v.B.Value(), _v.S.Value() }
func (_v HSBTyped[TH, TS, TB]) HBB() (TH, TB, TB) { return _v.H.Value(), _v.B.Value(), _v.B.Value() }
func (_v HSBTyped[TH, TS, TB]) SHH() (TS, TH, TH) { return _v.S.Value(), _v.H.Value(), _v.H.Value() }
func (_v HSBTyped[TH, TS, TB]) SHS() (TS, TH, TS) { return _v.S.Value(), _v.H.Value(), _v.S.Value() }
func (_v HSBTyped[TH, TS, TB]) SHB() (TS, TH, TB) { return _v.S.Value(), _v.H.Value(), _v.B.Value() }
func (_v HSBTyped[TH, TS, TB]) SSH() (TS, TS, TH) { return _v.S.Value(), _v.S.Value(), _v.H.Value() }
func (_v HSBTyped[TH, TS, TB]) SSS() (TS, TS, TS) { return _v.S.Value(), _v.S.Value(), _v.S.Value() }
func (_v HSBTyped[TH, TS, TB]) SSB() (TS, TS, TB) { return _v.S.Value(), _v.S.Value(), _v.B.Value() }
func (_v HSBTyped[TH, TS, TB]) SBH() (TS, TB, TH) { return _v.S.Value(), _v.B.Value(), _v.H.Value() }
func (_v HSBTyped[TH, TS, TB]) SBS() (TS, TB, TS) { return _v.S.Value(), _v.B.Value(), _v.S.Value() }
func (_v HSBTyped[TH, TS, TB]) SBB() (TS, TB, TB) { return _v.S.Value(), _v.B.Value(), _v.B.Value() }
func (_v HSBTyped[TH, TS, TB]) BHH() (TB, TH, TH) { return _v.B.Value(), _v.H.Value(), _v.H.Value() }
func (_v HSBTyped[TH, TS, TB]) BHS() (TB, TH, TS) { return _v.B.Value(), _v.H.Value(), _v.S.Value() }
func (_v HSBTyped[TH, TS, TB]) BHB() (TB, TH, TB) { return _v.B.Value(), _v.H.Value(), _v.B.Value() }
func (_v HSBTyped[TH, TS, TB]) BSH() (TB, TS, TH) { return _v.B.Value(), _v.S.Value(), _v.H.Value() }
func (_v HSBTyped[TH, TS, TB]) BSS() (TB, TS, TS) { return _v.B.Value(), _v.S.Value(), _v.S.Value() }
func (_v HSBTyped[TH, TS, TB]) BSB() (TB, TS, TB) { return _v.B.Value(), _v.S.Value(), _v.B.Value() }
func (_v HSBTyped[TH, TS, TB]) BBH() (TB, TB, TH) { return _v.B.Value(), _v.B.Value(), _v.H.Value() }
func (_v HSBTyped[TH, TS, TB]) BBS() (TB, TB, TS) { return _v.B.Value(), _v.B.Value(), _v.S.Value() }
func (_v HSBTyped[TH, TS, TB]) BBB() (TB, TB, TB) { return _v.B.Value(), _v.B.Value(), _v.B.Value() }
