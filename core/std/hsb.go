// Code generated by 'gen/letters'; DO NOT EDIT.
//go:generate go run ../gen/letters -pkg std -name HSB -nameL hsb -cmpts H,S,B -cmptsL h,s,b -out ../std/hsb.go
package std

import (
	"core/sys/atlas"
	"core/sys/name/format"
	"core/sys/num"
	"core/sys/num/bounded"
	"core/sys/support"
	"fmt"
	"strings"
)

// HSB is a 3D vector of like-typed bounded.Numeric components.
//
// NOTE: If you'd like asymmetric types, please see HSBTyped.
type HSB[T num.Primitive] = HSBTyped[T, T, T]

// HSBTyped is a 3D vector of asymmetrically typed bounded.Numeric components.
//
// NOTE: If you'd like symmetric types, please see HSB.
type HSBTyped[TH num.Primitive, TS num.Primitive, TB num.Primitive] struct {
	Entity
	H bounded.Numeric[TH]
	S bounded.Numeric[TS]
	B bounded.Numeric[TB]
}

func NewHSB[T num.Primitive](h T, s T, b T, name ...string) *HSB[T] {
	typed := HSB[T](*NewHSBTyped[T, T, T](h, s, b, name...))
	return &typed
}

func NewHSBTyped[TH num.Primitive, TS num.Primitive, TB num.Primitive](h TH, s TS, b TB, name ...string) *HSBTyped[TH, TS, TB] {
	minH := num.MinValue[TH]()
	maxH := num.MaxValue[TH]()
	if num.IsFloat[TH]() {
		minH = 0
		maxH = 1
	}
	minS := num.MinValue[TS]()
	maxS := num.MaxValue[TS]()
	if num.IsFloat[TS]() {
		minS = 0
		maxS = 1
	}
	minB := num.MinValue[TB]()
	maxB := num.MaxValue[TB]()
	if num.IsFloat[TB]() {
		minB = 0
		maxB = 1
	}

	_v := &HSBTyped[TH, TS, TB]{}
	_v.Entity = NewEntity[format.Default]()
	_v.SetBoundaries(minH, maxH, minS, maxS, minB, maxB)
	_v.Set(h, s, b)
	if len(name) > 0 {
		_v.SetName(name[0])
	}
	return _v
}

func (_v *HSBTyped[TH, TS, TB]) Name() string {
	return _v.GivenName.Name
}

func (_v *HSBTyped[TH, TS, TB]) SetName(name string) *HSBTyped[TH, TS, TB] {
	_v.GivenName.Name = name
	return _v
}

func (_v *HSBTyped[TH, TS, TB]) Set(h TH, s TS, b TB) *HSBTyped[TH, TS, TB] {
	_ = _v.H.Set(h)
	_ = _v.S.Set(s)
	_ = _v.B.Set(b)
	return _v
}

func (_v *HSBTyped[TH, TS, TB]) SetClamp(clamp bool) *HSBTyped[TH, TS, TB] {
	_v.H.Clamp = clamp
	_v.S.Clamp = clamp
	_v.B.Clamp = clamp
	return _v
}

func (_v *HSBTyped[TH, TS, TB]) SetBoundaries(minH, maxH TH, minS, maxS TS, minB, maxB TB) *HSBTyped[TH, TS, TB] {
	_ = _v.H.SetBoundaries(minH, maxH)
	_ = _v.S.SetBoundaries(minS, maxS)
	_ = _v.B.SetBoundaries(minB, maxB)
	return _v
}

func (_v *HSBTyped[TH, TS, TB]) Component(index uint) (bounded.INumeric, error) {
	switch index {
	case 0:
		return &_v.H, nil
	case 1:
		return &_v.S, nil
	case 2:
		return &_v.B, nil
	default:
		return nil, fmt.Errorf("cannot get component index %d of an HSB vector", index)
	}
}

func (_v *HSBTyped[TH, TS, TB]) Components() []bounded.INumeric {
	return []bounded.INumeric{&_v.H, &_v.S, &_v.B}
}

func (_v *HSBTyped[TH, TS, TB]) ComponentByName(name string) (bounded.INumeric, error) {
	switch strings.ToLower(name) {
	case "h":
		return &_v.H, nil
	case "s":
		return &_v.S, nil
	case "b":
		return &_v.B, nil
	default:
		return nil, fmt.Errorf("cannot get component \"%s\" of an HSB vector", name)
	}
}

func (_v *HSBTyped[TH, TS, TB]) ComponentLen() uint {
	return 3
}

func (_v *HSBTyped[TH, TS, TB]) SetComponent(index uint, value any) error {
	switch index {
	case 0:
		 _v.H.Set(value.(TH))
	case 1:
		 _v.S.Set(value.(TS))
	case 2:
		 _v.B.Set(value.(TB))
	default:
		return fmt.Errorf("cannot set component index %d of an HSB vector", index)
	}
	return nil
}

func (_v *HSBTyped[TH, TS, TB]) SetComponents(values []any) error {
	if len(values) != 3 {
		return fmt.Errorf("cannot set %d components of 3D vector HSB", len(values), )
	}
	if _, ok := values[0].(TH); !ok {
		return fmt.Errorf("expected type %T for component H, got type %T", TH(0), values[0])	}
	if _, ok := values[1].(TS); !ok {
		return fmt.Errorf("expected type %T for component S, got type %T", TS(0), values[1])	}
	if _, ok := values[2].(TB); !ok {
		return fmt.Errorf("expected type %T for component B, got type %T", TB(0), values[2])	}
	_v.H.Set(values[0].(TH))
	_v.S.Set(values[1].(TS))
	_v.B.Set(values[2].(TB))
	return nil
}

func (_v *HSBTyped[TH, TS, TB]) SetComponentByName(name string, value any) error {
	switch strings.ToLower(name) {
	case "h":
		 _v.H.Set(value.(TH))
	case "s":
		 _v.S.Set(value.(TS))
	case "b":
		 _v.B.Set(value.(TB))
	default:
		return fmt.Errorf("cannot set component \"%s\" of an HSB vector", name)
	}
	return nil
}

func (_v HSBTyped[TH, TS, TB]) String() string {
	if atlas.CompactVectors {
		return fmt.Sprintf("{h: %v, s: %v, b: %v}", _v.H.String(), _v.S.String(), _v.B.String())
	}
	 if support.AllSameTypes(TH(0), TS(0), TB(0)) {
		return fmt.Sprintf("hsb[%T]{%v, %v, %v}(\"%v\")", TH(0), _v.H.String(), _v.S.String(), _v.B.String(), _v.GivenName.Name)
	}
	return fmt.Sprintf("hsb[%T, %T, %T]{%v, %v, %v}(\"%v\")", TH(0), TS(0), TB(0), _v.H.String(), _v.S.String(), _v.B.String(), _v.GivenName.Name)
}

func (_v *HSBTyped[TH, TS, TB]) HH() (TH, TH) { return _v.H.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) HS() (TH, TS) { return _v.H.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) HB() (TH, TB) { return _v.H.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) SH() (TS, TH) { return _v.S.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) SS() (TS, TS) { return _v.S.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) SB() (TS, TB) { return _v.S.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) BH() (TB, TH) { return _v.B.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) BS() (TB, TS) { return _v.B.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) BB() (TB, TB) { return _v.B.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) HHH() (TH, TH, TH) { return _v.H.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) HHS() (TH, TH, TS) { return _v.H.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) HHB() (TH, TH, TB) { return _v.H.Value(), _v.H.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) HSH() (TH, TS, TH) { return _v.H.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) HSS() (TH, TS, TS) { return _v.H.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) HSB() (TH, TS, TB) { return _v.H.Value(), _v.S.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) HBH() (TH, TB, TH) { return _v.H.Value(), _v.B.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) HBS() (TH, TB, TS) { return _v.H.Value(), _v.B.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) HBB() (TH, TB, TB) { return _v.H.Value(), _v.B.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) SHH() (TS, TH, TH) { return _v.S.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) SHS() (TS, TH, TS) { return _v.S.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) SHB() (TS, TH, TB) { return _v.S.Value(), _v.H.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) SSH() (TS, TS, TH) { return _v.S.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) SSS() (TS, TS, TS) { return _v.S.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) SSB() (TS, TS, TB) { return _v.S.Value(), _v.S.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) SBH() (TS, TB, TH) { return _v.S.Value(), _v.B.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) SBS() (TS, TB, TS) { return _v.S.Value(), _v.B.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) SBB() (TS, TB, TB) { return _v.S.Value(), _v.B.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) BHH() (TB, TH, TH) { return _v.B.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) BHS() (TB, TH, TS) { return _v.B.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) BHB() (TB, TH, TB) { return _v.B.Value(), _v.H.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) BSH() (TB, TS, TH) { return _v.B.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) BSS() (TB, TS, TS) { return _v.B.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) BSB() (TB, TS, TB) { return _v.B.Value(), _v.S.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) BBH() (TB, TB, TH) { return _v.B.Value(), _v.B.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) BBS() (TB, TB, TS) { return _v.B.Value(), _v.B.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) BBB() (TB, TB, TB) { return _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) HHHH() (TH, TH, TH, TH) { return _v.H.Value(), _v.H.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) HHHS() (TH, TH, TH, TS) { return _v.H.Value(), _v.H.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) HHHB() (TH, TH, TH, TB) { return _v.H.Value(), _v.H.Value(), _v.H.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) HHSH() (TH, TH, TS, TH) { return _v.H.Value(), _v.H.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) HHSS() (TH, TH, TS, TS) { return _v.H.Value(), _v.H.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) HHSB() (TH, TH, TS, TB) { return _v.H.Value(), _v.H.Value(), _v.S.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) HHBH() (TH, TH, TB, TH) { return _v.H.Value(), _v.H.Value(), _v.B.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) HHBS() (TH, TH, TB, TS) { return _v.H.Value(), _v.H.Value(), _v.B.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) HHBB() (TH, TH, TB, TB) { return _v.H.Value(), _v.H.Value(), _v.B.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) HSHH() (TH, TS, TH, TH) { return _v.H.Value(), _v.S.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) HSHS() (TH, TS, TH, TS) { return _v.H.Value(), _v.S.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) HSHB() (TH, TS, TH, TB) { return _v.H.Value(), _v.S.Value(), _v.H.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) HSSH() (TH, TS, TS, TH) { return _v.H.Value(), _v.S.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) HSSS() (TH, TS, TS, TS) { return _v.H.Value(), _v.S.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) HSSB() (TH, TS, TS, TB) { return _v.H.Value(), _v.S.Value(), _v.S.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) HSBH() (TH, TS, TB, TH) { return _v.H.Value(), _v.S.Value(), _v.B.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) HSBS() (TH, TS, TB, TS) { return _v.H.Value(), _v.S.Value(), _v.B.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) HSBB() (TH, TS, TB, TB) { return _v.H.Value(), _v.S.Value(), _v.B.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) HBHH() (TH, TB, TH, TH) { return _v.H.Value(), _v.B.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) HBHS() (TH, TB, TH, TS) { return _v.H.Value(), _v.B.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) HBHB() (TH, TB, TH, TB) { return _v.H.Value(), _v.B.Value(), _v.H.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) HBSH() (TH, TB, TS, TH) { return _v.H.Value(), _v.B.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) HBSS() (TH, TB, TS, TS) { return _v.H.Value(), _v.B.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) HBSB() (TH, TB, TS, TB) { return _v.H.Value(), _v.B.Value(), _v.S.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) HBBH() (TH, TB, TB, TH) { return _v.H.Value(), _v.B.Value(), _v.B.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) HBBS() (TH, TB, TB, TS) { return _v.H.Value(), _v.B.Value(), _v.B.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) HBBB() (TH, TB, TB, TB) { return _v.H.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) SHHH() (TS, TH, TH, TH) { return _v.S.Value(), _v.H.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) SHHS() (TS, TH, TH, TS) { return _v.S.Value(), _v.H.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) SHHB() (TS, TH, TH, TB) { return _v.S.Value(), _v.H.Value(), _v.H.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) SHSH() (TS, TH, TS, TH) { return _v.S.Value(), _v.H.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) SHSS() (TS, TH, TS, TS) { return _v.S.Value(), _v.H.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) SHSB() (TS, TH, TS, TB) { return _v.S.Value(), _v.H.Value(), _v.S.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) SHBH() (TS, TH, TB, TH) { return _v.S.Value(), _v.H.Value(), _v.B.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) SHBS() (TS, TH, TB, TS) { return _v.S.Value(), _v.H.Value(), _v.B.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) SHBB() (TS, TH, TB, TB) { return _v.S.Value(), _v.H.Value(), _v.B.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) SSHH() (TS, TS, TH, TH) { return _v.S.Value(), _v.S.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) SSHS() (TS, TS, TH, TS) { return _v.S.Value(), _v.S.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) SSHB() (TS, TS, TH, TB) { return _v.S.Value(), _v.S.Value(), _v.H.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) SSSH() (TS, TS, TS, TH) { return _v.S.Value(), _v.S.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) SSSS() (TS, TS, TS, TS) { return _v.S.Value(), _v.S.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) SSSB() (TS, TS, TS, TB) { return _v.S.Value(), _v.S.Value(), _v.S.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) SSBH() (TS, TS, TB, TH) { return _v.S.Value(), _v.S.Value(), _v.B.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) SSBS() (TS, TS, TB, TS) { return _v.S.Value(), _v.S.Value(), _v.B.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) SSBB() (TS, TS, TB, TB) { return _v.S.Value(), _v.S.Value(), _v.B.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) SBHH() (TS, TB, TH, TH) { return _v.S.Value(), _v.B.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) SBHS() (TS, TB, TH, TS) { return _v.S.Value(), _v.B.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) SBHB() (TS, TB, TH, TB) { return _v.S.Value(), _v.B.Value(), _v.H.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) SBSH() (TS, TB, TS, TH) { return _v.S.Value(), _v.B.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) SBSS() (TS, TB, TS, TS) { return _v.S.Value(), _v.B.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) SBSB() (TS, TB, TS, TB) { return _v.S.Value(), _v.B.Value(), _v.S.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) SBBH() (TS, TB, TB, TH) { return _v.S.Value(), _v.B.Value(), _v.B.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) SBBS() (TS, TB, TB, TS) { return _v.S.Value(), _v.B.Value(), _v.B.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) SBBB() (TS, TB, TB, TB) { return _v.S.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) BHHH() (TB, TH, TH, TH) { return _v.B.Value(), _v.H.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) BHHS() (TB, TH, TH, TS) { return _v.B.Value(), _v.H.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) BHHB() (TB, TH, TH, TB) { return _v.B.Value(), _v.H.Value(), _v.H.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) BHSH() (TB, TH, TS, TH) { return _v.B.Value(), _v.H.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) BHSS() (TB, TH, TS, TS) { return _v.B.Value(), _v.H.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) BHSB() (TB, TH, TS, TB) { return _v.B.Value(), _v.H.Value(), _v.S.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) BHBH() (TB, TH, TB, TH) { return _v.B.Value(), _v.H.Value(), _v.B.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) BHBS() (TB, TH, TB, TS) { return _v.B.Value(), _v.H.Value(), _v.B.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) BHBB() (TB, TH, TB, TB) { return _v.B.Value(), _v.H.Value(), _v.B.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) BSHH() (TB, TS, TH, TH) { return _v.B.Value(), _v.S.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) BSHS() (TB, TS, TH, TS) { return _v.B.Value(), _v.S.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) BSHB() (TB, TS, TH, TB) { return _v.B.Value(), _v.S.Value(), _v.H.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) BSSH() (TB, TS, TS, TH) { return _v.B.Value(), _v.S.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) BSSS() (TB, TS, TS, TS) { return _v.B.Value(), _v.S.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) BSSB() (TB, TS, TS, TB) { return _v.B.Value(), _v.S.Value(), _v.S.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) BSBH() (TB, TS, TB, TH) { return _v.B.Value(), _v.S.Value(), _v.B.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) BSBS() (TB, TS, TB, TS) { return _v.B.Value(), _v.S.Value(), _v.B.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) BSBB() (TB, TS, TB, TB) { return _v.B.Value(), _v.S.Value(), _v.B.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) BBHH() (TB, TB, TH, TH) { return _v.B.Value(), _v.B.Value(), _v.H.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) BBHS() (TB, TB, TH, TS) { return _v.B.Value(), _v.B.Value(), _v.H.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) BBHB() (TB, TB, TH, TB) { return _v.B.Value(), _v.B.Value(), _v.H.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) BBSH() (TB, TB, TS, TH) { return _v.B.Value(), _v.B.Value(), _v.S.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) BBSS() (TB, TB, TS, TS) { return _v.B.Value(), _v.B.Value(), _v.S.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) BBSB() (TB, TB, TS, TB) { return _v.B.Value(), _v.B.Value(), _v.S.Value(), _v.B.Value() }
func (_v *HSBTyped[TH, TS, TB]) BBBH() (TB, TB, TB, TH) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.H.Value() }
func (_v *HSBTyped[TH, TS, TB]) BBBS() (TB, TB, TB, TS) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.S.Value() }
func (_v *HSBTyped[TH, TS, TB]) BBBB() (TB, TB, TB, TB) { return _v.B.Value(), _v.B.Value(), _v.B.Value(), _v.B.Value() }
